{"meta":{"title":"102网吧","subtitle":"","description":"","author":"huanshi2","url":"http://233hsysweb.ml","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-07-25T10:33:51.991Z","updated":"2021-07-25T10:33:51.991Z","comments":true,"path":"404.html","permalink":"http://233hsysweb.ml/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2021-07-25T10:33:52.001Z","updated":"2021-07-25T10:33:52.001Z","comments":true,"path":"categories/index.html","permalink":"http://233hsysweb.ml/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2021-07-25T10:33:52.011Z","updated":"2021-07-25T10:33:52.011Z","comments":true,"path":"friends/index.html","permalink":"http://233hsysweb.ml/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2021-07-25T10:33:53.271Z","updated":"2021-07-25T10:33:53.271Z","comments":true,"path":"tags/index.html","permalink":"http://233hsysweb.ml/tags/index.html","excerpt":"","text":""},{"title":"笔记","date":"2020-05-29T11:44:43.000Z","updated":"2020-05-29T11:44:43.000Z","comments":true,"path":"笔记/index.html","permalink":"http://233hsysweb.ml/%E7%AC%94%E8%AE%B0/index.html","excerpt":"","text":""}],"posts":[{"title":"c语言学习","slug":"c语言学习","date":"2021-07-25T11:34:00.000Z","updated":"2021-07-25T11:34:00.000Z","comments":true,"path":"2021/07/25/c语言学习/","link":"","permalink":"http://233hsysweb.ml/2021/07/25/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"c语言学习计划 TODO","categories":[{"name":"C语言","slug":"C语言","permalink":"http://233hsysweb.ml/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://233hsysweb.ml/tags/C%E8%AF%AD%E8%A8%80/"}],"author":"huanshi2"},{"title":"Vscode+wsl2下c/c++ 环境配置配置","slug":"Vscode-wsl2下c-c-环境配置配置","date":"2021-06-07T06:58:00.000Z","updated":"2021-06-07T06:58:00.000Z","comments":true,"path":"2021/06/07/Vscode-wsl2下c-c-环境配置配置/","link":"","permalink":"http://233hsysweb.ml/2021/06/07/Vscode-wsl2%E4%B8%8Bc-c-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%85%8D%E7%BD%AE/","excerpt":"微软官方wsl下C/C++环境配置 https://code.visualstudio.com/docs/editor/variables-reference","text":"微软官方wsl下C/C++环境配置 https://code.visualstudio.com/docs/editor/variables-reference 调试时出现错误: 1无法打开“libc-start.c”: 无法读取文件&#x27;vscode-remote://wsl+ubuntu-20.04/build/glibc-eX1tMB/glibc-2.31/csu/libc-start.c&#x27; (Error: 无法解析不存在的文件&quot;vscode-remote://wsl+ubuntu-20.04/build/glibc-eX1tMB/glibc-2.31/csu/libc-start.c&quot;)。 解决办法: 123456789101112131415161718huanshi2@DESKTOP-VRNCVPP:/$ cd build/huanshi2@DESKTOP-VRNCVPP:/build$ mkdir glibc-eX1tMBmkdir: cannot create directory ‘glibc-eX1tMB’: Permission deniedhuanshi2@DESKTOP-VRNCVPP:/build$ sudo mkdir glibc-eX1tMBhuanshi2@DESKTOP-VRNCVPP:/build$ cd glibc-eX1tMB/huanshi2@DESKTOP-VRNCVPP:/build/glibc-eX1tMB$ sudo wget http://ftp.gnu.org/gnu/glibc/glibc-2.31.tar.gz --2021-06-07 15:11:43-- http://ftp.gnu.org/gnu/glibc/glibc-2.31.tar.gzResolving ftp.gnu.org (ftp.gnu.org)... 209.51.188.20, 2001:470:142:3::bConnecting to ftp.gnu.org (ftp.gnu.org)|209.51.188.20|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 32648590 (31M) [application/x-gzip]Saving to: ‘glibc-2.31.tar.gz’glibc-2.31.tar.gz 100%[========================&gt;] 31.14M 58.0KB/s in 6m 56s 2021-06-07 15:18:40 (76.6 KB/s) - ‘glibc-2.31.tar.gz’ saved [32648590/32648590]huanshi2@DESKTOP-VRNCVPP:/build/glibc-eX1tMB$ sudo tar -zxvf glibc-2.31.tar.gz 成功解决： 待解决 调试还会出现某个文件中头文件标红的情况","categories":[{"name":"C语言","slug":"C语言","permalink":"http://233hsysweb.ml/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C","slug":"C","permalink":"http://233hsysweb.ml/tags/C/"},{"name":"C++","slug":"C","permalink":"http://233hsysweb.ml/tags/C/"}],"author":"huanshi2"},{"title":"DCG计算","slug":"DCG计算","date":"2020-12-30T02:19:00.000Z","updated":"2020-12-30T02:19:00.000Z","comments":true,"path":"2020/12/30/DCG计算/","link":"","permalink":"http://233hsysweb.ml/2020/12/30/DCG%E8%AE%A1%E7%AE%97/","excerpt":"","text":"DCG和NDCG的计算12345678910111213141516171819202122232425262728from math import logdef gain(grade, maxGrade=4.0): &quot;&quot;&quot; 当评分只有0和1时，gain的计算公式 &quot;&quot;&quot; return (2**grade - 1.0) / (2 ** maxGrade)def dcg(grades, n=0): &quot;&quot;&quot; 当评分为多个值时使用的gain计算公式 &quot;&quot;&quot; if n &gt; len(grades): raise ValueError( &quot;dcg@%s cannot be calculated with %s grades&quot; % (n, len(grades))) if n == 0: n = len(grades) dcg = 0 for i in range(0, n): r = i + 1 dcg += grades[i] / log((r + 1), 2.0) return dcg def ndcg(grades, n=0): return dcg(grades, n=n) / dcg(sorted(grades, reverse=True), n=n)","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"},{"name":"搜索引擎","slug":"毕设/搜索引擎","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://233hsysweb.ml/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"author":"huanshi2"},{"title":"搜索引擎评估","slug":"搜索引擎评估指标","date":"2020-12-28T07:45:00.000Z","updated":"2020-12-28T07:45:00.000Z","comments":true,"path":"2020/12/28/搜索引擎评估指标/","link":"","permalink":"http://233hsysweb.ml/2020/12/28/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87/","excerpt":"","text":"传统信息检索中，使用查全率，查准率。 对于搜索引擎来说需要满足： 覆盖率 返回结果的准确性 重复信息过滤返回 网页更新速度 响应时间 系统稳定性 Ranking模型的训练数据主要由query、文档以及query与文档的相关度组成，相关度可以标记成好、不好两个级别或细粒度更高的Perfect、Excellent、Good、Fair、Bad五个级别。 评估指标查全率查准率DCGCG的思想是逐条对搜索结果进行分等级的打分，分越高越好 DCG的思想是DCG的思想是等级比较高的结果却排到了比较后面，那么在统计分数时，就应该对这个结果的得分有所打折。 nDCG WTA,MRR,MAP1) WTA(Winners take all) 对于给定的查询q，如果模型返回的结果列表中，第一个文档是相关的，则WTA(q)=1，否则为0. 2) MRR(Mean Reciprocal Rank) 对于给定查询q，如果第一个相关的文档位置是R(q)，则MRR(q)=1/R(q)。 3) MAP(Mean Average Precision) 对于每个真实相关的文档d，考虑其在模型排序结果中的位置P(d)，统计该位置之前文档集合的分类准确率，取所有这些准确率的平均值。 A/B test上线测试两个版本，比较两个版本的点击率，留存率，点击时长等 MapReduce基于图的。 基于MapReduce的微博用户搜索排名算法主要思想：采用全体用户投票的方式来决定每个用户在搜索结果中的排名, 投票结果被量化成用户的“重要性”, 而用户的“重要性”则成为整个算法的排名依据。 单独标注一个或几个和心血管疾病比较相关的词，标5个重要性，然后计算上述指标。 搜索引擎评价体系应该分几个方面？建立怎样的指标？ - ArayS的回答 - 知乎https://www.zhihu.com/question/19624746/answer/12578436","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"},{"name":"搜索引擎","slug":"毕设/搜索引擎","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://233hsysweb.ml/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"author":"huanshi2"},{"title":"volantis主题升级","slug":"volantis主题升级","date":"2020-10-14T07:35:00.000Z","updated":"2020-10-14T07:35:00.000Z","comments":true,"path":"2020/10/14/volantis主题升级/","link":"","permalink":"http://233hsysweb.ml/2020/10/14/volantis%E4%B8%BB%E9%A2%98%E5%8D%87%E7%BA%A7/","excerpt":"1.下载源码备份之后直接替换","text":"1.下载源码备份之后直接替换 2.修改主题config.yml之前的头像需要显示修改layout里面meta中的author.ejs现在新版主题不知道是否还需要修改，查看源码应该不需要了 1234567891011121314&lt;%let author = theme.article.body.meta_library.author;let aid = post.author;if (aid &amp;&amp; site.data &amp;&amp; site.data.author &amp;&amp; (aid in site.data.author)) &#123; author = site.data.author[aid];&#125;%&gt;&lt;div class=&#x27;new-meta-item author&#x27;&gt; &lt;a class=&#x27;author&#x27; href=&quot;&lt;%- author.url %&gt;&quot; rel=&quot;nofollow&quot;&gt; &lt;img no-lazy src=&quot;&lt;%- author.avatar %&gt;&quot;&gt; &lt;p&gt;&lt;%- author.name %&gt;&lt;/p&gt; &lt;/a&gt;&lt;/div&gt; 3.重新deploy4.主题得到了美化","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/tags/Hexo/"}],"author":"huanshi2"},{"title":"Sql调优","slug":"Sql","date":"2020-09-26T03:15:00.000Z","updated":"2020-09-26T03:15:00.000Z","comments":true,"path":"2020/09/26/Sql/","link":"","permalink":"http://233hsysweb.ml/2020/09/26/Sql/","excerpt":"sql调优的目的是减少查询时间，主要操作目的是：减少磁盘IO操作进而减少查询时间。","text":"sql调优的目的是减少查询时间，主要操作目的是：减少磁盘IO操作进而减少查询时间。 建索引 在where及order by 涉及的列上建立索引 在需要的字段上进行检索 一个表的索引数最好不超过6个，建太多降低插入和update的效率 http://233hsysweb.ml/2020/09/25/Mysql%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B8%B8%E7%94%A8%E8%A7%84%E5%88%99/ 避免索引失效避免使用计算 具体见前面 http://233hsysweb.ml/2020/09/20/Small-points/ 使用预编译查询程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。调整where子句中的连接顺序表连接最好写在其他where条件之前 多条sql压缩到一句每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行 where字句替换HAVING 避免使用HAVING字句，因为HAVING只会在检索出所有记录之后才对结果集进行过滤，而where则是在聚合前刷选记录，如果能通过where字句限制记录的数目，那就能减少这方面的开销。HAVING中的条件一般用于聚合函数 的过滤，除此之外，应该将条件写在where字句中。 使用表别名多表连接时，减少解析时间，减少歧义 union all替换unionunion 会进行合并和排序，如果可以判断检索结果中不会有重复记录时，应该用union all，这样不用排序 使用临时表暂存中间结果将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。 只要在必要的情况下才使用事务使用varchar/nvarchar代替char/ncahr变长字段替代定长字段 查询select语句优化 https://www.cnblogs.com/dc-earl/p/10837577.html","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"huanshi2"},{"title":"Mysql建立索引的常用规则","slug":"Mysql建立索引的常用规则","date":"2020-09-25T07:46:00.000Z","updated":"2020-09-25T07:46:00.000Z","comments":true,"path":"2020/09/25/Mysql建立索引的常用规则/","link":"","permalink":"http://233hsysweb.ml/2020/09/25/Mysql%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B8%B8%E7%94%A8%E8%A7%84%E5%88%99/","excerpt":"","text":"1、表的主键、外键必须有索引； 2、数据量超过300的表应该有索引； 3、经常与其他表进行连接的表，在连接字段上应该建立索引； 4、经常出现在Where子句中的字段，特别是大表的字段，应该建立索引； 5、索引应该建在选择性高的字段上； 6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引； 7、复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"索引","slug":"索引","permalink":"http://233hsysweb.ml/tags/%E7%B4%A2%E5%BC%95/"},{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"huanshi2"},{"title":"操作系统的分页机制","slug":"操作系统的分页机制","date":"2020-09-24T04:48:06.000Z","updated":"2020-09-24T04:48:06.000Z","comments":true,"path":"2020/09/24/操作系统的分页机制/","link":"","permalink":"http://233hsysweb.ml/2020/09/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6/","excerpt":"","text":"","categories":[],"tags":[],"author":"huanshi2"},{"title":"排查内存溢出的原因","slug":"排查内存溢出的原因","date":"2020-09-24T03:08:58.000Z","updated":"2020-09-24T03:08:58.000Z","comments":true,"path":"2020/09/24/排查内存溢出的原因/","link":"","permalink":"http://233hsysweb.ml/2020/09/24/%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E5%8E%9F%E5%9B%A0/","excerpt":"","text":"1.检查是否使用过多static修饰2.检查递归和循环 使用jconsole","categories":[],"tags":[],"author":"huanshi2"},{"title":"常见的异常和error","slug":"常见的异常和error","date":"2020-09-24T03:03:00.000Z","updated":"2020-09-24T03:03:00.000Z","comments":true,"path":"2020/09/24/常见的异常和error/","link":"","permalink":"http://233hsysweb.ml/2020/09/24/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8%E5%92%8Cerror/","excerpt":"","text":"如下是常见的 Error 和 Exception： 1）运行时异常（RuntimeException）： NullPropagation：空指针异常； ClassCastException：类型强制转换异常 IllegalArgumentException：传递非法参数异常 IndexOutOfBoundsException：下标越界异常 NumberFormatException：数字格式异常 2）非运行时异常： ClassNotFoundException：找不到指定 class 的异常 IOException：IO 操作异常 3）错误（Error）： NoClassDefFoundError：找不到 class 定义异常 StackOverflowError：深递归导致栈被耗尽而抛出的异常 OutOfMemoryError：内存溢出异常","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"IO多路复用","slug":"IO多路复用","date":"2020-09-22T12:17:00.000Z","updated":"2020-09-22T12:17:00.000Z","comments":true,"path":"2020/09/22/IO多路复用/","link":"","permalink":"http://233hsysweb.ml/2020/09/22/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/","excerpt":"什么是IO多路复用？IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；一旦某个句柄就绪，就能通知应用程序进行响应的IO操作；没有这个句柄就会阻塞应用程序，交出CPU使用权，多路指的是网络连接，复用指的是用同一个线程。单线程或单进程同时监测若干个文件描述符是否可以执行IO操作。","text":"什么是IO多路复用？IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；一旦某个句柄就绪，就能通知应用程序进行响应的IO操作；没有这个句柄就会阻塞应用程序，交出CPU使用权，多路指的是网络连接，复用指的是用同一个线程。单线程或单进程同时监测若干个文件描述符是否可以执行IO操作。 为什么会有IO多路复用机制？同步阻塞BIO服务端采用单线程，当accept一个请求后，在recv或send调用阻塞时，将无法accept其他请求（必须等上一个请求处recv或send完），无法处理并发。 只能通过增加线程数来处理并发。 服务器端采用多线程，当accept一个请求后，开启线程进行recv，可以完成并发处理，但随着请求数增加需要增加系统线程，大量的线程占用很大的内存空间，并且线程切换会带来很大的开销，10000个线程真正发生读写事件的线程数不会超过20%，每次accept都开一个线程也是一种资源浪费 同步非阻塞NIO服务器端当accept一个请求后，加入fds集合，每次轮询一遍fds集合recv(非阻塞)数据，没有数据则立即返回错误，每次轮询所有fd（包括没有发生读写事件的fd）会很浪费cpu。 IO多路复用（现在的做法）服务器端采用单线程通过select/epoll等系统调用获取fd列表，遍历有事件的fd进行accept/recv/send，使其能支持更多的并发连接请求。 文件描述符内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。 IO多路复用的三种方式 select poll epoll selectselect缺点： 单个进程所打开的FD是有限制的，通过FD_SETSIZE设置，默认1024 每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大 对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时） pollpoll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历fd。这个过程经历了多次无谓的遍历。 每次调用poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大 对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时） epoll应用于redis，nginx，只能工作在Linux下。 select/poll/epoll之间的区别 select poll epoll 数据结构 bitmap 数组 红黑树 最大连接数 1024 无上限 无上限 fd拷贝 每次调用select拷贝 每次调用poll拷贝 fd首次调用epoll_ctl拷贝，每次调用epoll_wait不拷贝 工作效率 轮询：O(n) 轮询：O(n) 回调：O(1) 自己的理解select 首先从用户空间拷贝fd_set到内核空间 注册回调函数pollwait，pollwait的主要作用就是将当前进程挂载到设备的等待队列 遍历fd，调用其对应的poll方法 poll方法会返回一个描述读写操作是否就绪的mask掩码，根据这个掩码给fd_set赋值。 遍历完fd如果没有返回一个可读写的掩码，则会调用select的进程进入睡眠状态。如果设备发生自身资源可读写后，回唤醒等待队列上的进程。 把fd_set从内核空间拷贝回用户空间。 poll https://juejin.im/post/6844904200141438984","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"author":"huanshi2"},{"title":"BIO、NIO、AIO","slug":"BIO、NIO、AIO","date":"2020-09-22T11:29:00.000Z","updated":"2020-09-22T11:29:00.000Z","comments":true,"path":"2020/09/22/BIO、NIO、AIO/","link":"","permalink":"http://233hsysweb.ml/2020/09/22/BIO%E3%80%81NIO%E3%80%81AIO/","excerpt":"AIO、BIO、AIO的区别同步两个同步任务相互依赖，并且一个任务必须以依赖于另一任务的某种方式执行。 比如在A-&gt;B事件模型中，你需要先完成 A 才能执行B。 异步两个异步的任务完全独立的，一方的执行不需要等待另外一方的执行。","text":"AIO、BIO、AIO的区别同步两个同步任务相互依赖，并且一个任务必须以依赖于另一任务的某种方式执行。 比如在A-&gt;B事件模型中，你需要先完成 A 才能执行B。 异步两个异步的任务完全独立的，一方的执行不需要等待另外一方的执行。 阻塞阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。 非阻塞非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。 IO模型的主要分类： 同步(synchronous) IO和异步(asynchronous) IO 阻塞(blocking) IO和非阻塞(non-blocking)IO 同步阻塞(blocking-IO)简称BIO 同步非阻塞(non-blocking-IO)简称NIO 异步非阻塞(synchronous-non-blocking-IO)简称AIO 在处理 IO 的时候，阻塞和非阻塞都是同步 IO。 1.BIO同步阻塞数据的读取写入必须阻塞在同一个线程内等待其完成。 伪异步IO 2.NIO同步非阻塞NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO 流是非阻塞 IO 而 IO 流是阻塞IO 1)Non-blocking IO（非阻塞IO）IO流是阻塞的，NIO流是不阻塞的。 Java NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到buffer，同时可以继续做别的事情，当数据读取到buffer中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 Java IO的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write() 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了 2)Buffer(缓冲区)IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。 Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，体现了新库与原I/O的一个重要区别。在面向流的I/O中·可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。 在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。 最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。 3)Channel (通道)NIO 通过Channel（通道） 进行读写。 通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。 4)Selector (选择器)NIO有选择器，而IO没有。 选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。 一个单线程中Selector维护3个Channel的示意图 NIO 读数据和写数据方式通常来说NIO中的所有IO都是从 Channel（通道） 开始的。 从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。 从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。数据读取和写入操作图示： NIO读写数据的方式 NIO核心组件简单介绍 NIO 包含下面几个核心的组件： Channel(通道) Buffer(缓冲区) Selector(选择器)整个NIO体系包含的类远远不止这三个，只能说这三个是NIO体系的“核心API”。 AIO异步IO异步非阻塞的IOAIO （ Asynchronous I/O）：异步非阻塞I/O模型。异步非阻塞无需一个线程去轮询所有IO操作的状态改变，在相应的状态改变后，系统会通知对应的线程来处理。 对应到烧开水中就是，为每个水壶上面装了一个开关，水烧开之后，水壶会自动通知我水烧开了。 https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/BIO-NIO-AIO.md#1non-blocking-io%E9%9D%9E%E9%98%BB%E5%A1%9Eio","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"IO","slug":"IO","permalink":"http://233hsysweb.ml/tags/IO/"},{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"Small points","slug":"Small-points","date":"2020-09-20T08:13:00.000Z","updated":"2020-09-20T08:13:00.000Z","comments":true,"path":"2020/09/20/Small-points/","link":"","permalink":"http://233hsysweb.ml/2020/09/20/Small-points/","excerpt":"这篇博客用于记录学习过程中的一些small points，包括计算机网络，操作系统，数据结构，算法，Java语言等","text":"这篇博客用于记录学习过程中的一些small points，包括计算机网络，操作系统，数据结构，算法，Java语言等 继承继承是面向对象的一块基石，继承就是子类继承父类的行为和特征，使得子类对象具有父类的实例域和方法，或者从父类继承方法，使得子类具有和父类相同的行为。 重写与重载：重写返回值和形参都不变，外壳不变，核心重写，重载是一个类里方法名字相同，参数不同，返回值也可以不同。每个重载的方法都必须要有一个独一无二的参数列表。 区别点 重载方法 重写方法 参数列表 必须修改 一定不能修改 返回类型 可以修改 一定不能修改 异常 可以修改 可以减少或删除，一定不能抛出新的或者更广的异常 访问 可以修改 一定不能做更严格的限制（可以降低限制） 一次完整的http请求 链路层：以太网规定一组电信号就是一个数据包，一个数据包被称为一帧， 制定这个规则的协议就是以太网协议，以太网数据包： https://www.cnblogs.com/onepixel/p/7092302.html DNS查询 递归查询，浏览器缓存-本地缓存-ISP提供商-根域名服务器 迭代查询： 根域名-顶级域名-二级域名 给一个数字，判断是否是回文数字并且需要考虑转换后是否越界问题，数字正负数都有可能（时间复杂度小于O(n)，并且不能借助数组或转为字符串的方式）? 方法：使用栈，分奇数偶数 求出每一位的数字，再还原一下和原来数字比较 什么是内存泄漏：1.对象未被引用 2.垃圾回收器无法回收，因为还被引用着。 1234567 Vector v = new Vector(10);for (int i = 0; i &lt; 100; i++) &#123; Object o = new Object(); v.add(o); o = null;&#125; 在这个例子中，我们循环申请Object对象，并将所申请的对象放入一个 Vector 中，如果我们仅仅释放引用本身，那么 Vector 仍然引用该对象，所以这个对象对 GC 来说是不可回收的。因此，如果对象加入到Vector 后，还必须从 Vector 中删除，最简单的方法就是将 Vector 对象设置为 null。 1v = null 8.常见的内存泄漏： 1.static修饰的静态集合类 2.单例模式 3.监听器 4. 各种连接 5.内部类和外部模块的引用 正向代理反向代理（reverse proxy）：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。反向代理服务器一般用作负载均衡 （负载均衡（Cloud Load Balancer，CLB）提供安全快捷的流量分发服务，访问流量经由 CLB 可以自动分配到云中的多台云服务器上，扩展系统的服务能力并消除单点故障。负载均衡支持亿级连接和千万级并发，可轻松应对大流量访问，满足业务需求。） 双亲委派机制的工作流程;1.当前classloader从已加载的类中查询此类是否已加载，如果已加载，则直接返回已加载的类 2.没有找到时，委托父类加载器加载，依次递归，父类加载器可以完成加载任务时，就成功返回 3.所有父类加载器没有加载的时候，由当前类加载器加载 类的加载机制加载 - 验证 - 准备 - 解析 - 初始化 - 使用 - 卸载 123456789101112(1) 装载：查找和导入Class文件；(2) 链接：把类的二进制数据合并到JRE中； (a)校验：检查载入Class文件数据的正确性； (b)准备：给类的静态变量分配存储空间； (c)解析：将符号引用转成直接引用；(3) 初始化：对类的静态变量，静态代码块执行初始化操作 准备阶段; 准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。 （1）类的实例变量会在对象实例化时随着对象一起分配在Java堆中。 （2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。 https://juejin.im/post/6844903564804882445 解析阶段:在解析阶段，虚拟机会把所有的类名，方法名，字段名这些符号引用替换为具体的内存地址或偏移量，也就是直接引用。 成员变量和局部变量：成员变量随着对象的建立而建立，随着对象的消失而消失，存在对象所在的堆内存中。 局部变量存在栈内存中。 成员变量和静态变量的区别123456789101112131415161718192021222324251、两个变量的生命周期不同 成员变量随着对象的创建而存在，随着对象被回收而释放。 静态变量随着类的加载而存在，随着类的消失而消失。 2、调用方式不同 成员变量只能被对象调用。 静态变量可以被对象调用，还可以被类名调用。 3、别名不同 成员变量也称为实例变量。 静态变量也称为类变量。 4、数据存储位置不同 成员变量存储在堆内存的对象中，所以也叫对象的特有数据。 静态变量数据存储在方法区（共享数据区）的静态区，所以也叫对象的共享数据。 Map下面的实现类:HashMap,Hashtable,LinkedHashMap,TreeMap 线程的三种创建方法： 线程同步的四种方式：临界区（Critical Section）、互斥对象（Mutex）：主要用于互斥控制；都具有拥有权的控制方法，只有拥有该对象的线程才能执行任务，所以拥有，执行完任务后一定要释放该对象。 信号量（Semaphore）、事件对象（Event）：事件对象是以通知的方式进行控制，主要用于同步控制！ linux下统计文件行数： wc -lArrayList初始容量10，扩容时扩容1.5倍多态：多态指同一个行为具有不同的表现形式或形态的能力。 多态存在的三个必要条件： 1.继承 2.重写 3.父类引用指向子类对象。 多态实现方式：（1）重写 （2）接口 （3）抽象类和抽象方法 索引失效：单列索引： 1.查询条件使用了不等式 &lt;&gt; 或!= 2.查询条件的类型不一致，例如查String字段输入了数字 3.使用函数计算 4.模糊查询 联合索引： （1）查询条件使用不等式 （2）查询条件类型不一致 （3）查询条件使用函数计算 （4）不适用索引首列当查询条件 本地方法栈、虚拟机栈Native Method 就是一个java调用非Java代码的接口。 本地方法栈和Java虚拟机栈实现的功能类似,只不过本地方法区是本地方法运行的内存模型.本地方法被执行的时候,在本地方法栈也会创建一个栈帧,用于存放该本地方法的局部变量表\\操作数栈\\动态链接\\出口信息. 方法执行完毕后相应的栈帧也会出栈并释放内存空间.也会抛出OutOfMemoryError和StackOverflowError异常. 有一些虚拟机（如HotSpot）将java虚拟机栈和本地方法栈合并实现。 虚拟机栈java虚拟机栈和程序计数器一样，他是线程私有的内存区域，他的生命周期与线程相同，java虚拟机栈描述的是java方法执行时候的内存概念模型，每个方法在执行的时候都会创建一个栈帧，用来创建这个方法的操作数栈，局部变量表，方法出口，动态链接等信息，每一个方法在调用和结束的过程就对应了一个栈帧在虚拟机栈中入栈到出栈的过程， java虚拟机栈是一个后进先出栈，靠后执行的方法会优先完成，后面进入虚拟机栈的栈帧优先被出栈，这与我们平时执行java方法的印象是一致的，在程序执行中java方法的调用，执行和退出，都与java虚拟机栈里面存储的栈帧有着密切的联系。 OSI网络模型表示层表示层：数据压缩、加密以及数据描述，使得应用程序不必关心在各台主机中数据内部格式不同的问题。 MAC地址链路层地址，长度未6字节（48位），用于唯一标识网络适配器（网卡）。 局域网局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。 交换机和路由器工作层次不同：交换机主要工作在数据链路层（第二层） 路由器工作在网络层（第三层）。 转发依据不同：交换机转发所依据的对象是：MAC地址。（物理地址） 路由转发所依据的对象是：IP地址。（网络地址） 主要功能不同：交换机主要用于组建局域网，而路由主要功能是将由交换机组好的局域网相互连接起来，或者接入Internet。交换机能做的，路由都能做。 交换机不能分割广播域，路由可以。路由还可以提供防火墙的功能。路由配置比交换机复杂。 交换机带宽是网络带宽，而路由器则是共享带宽。 交换机是单独拨号，路由器是使用同一个账号。 内部类https://blog.csdn.net/txy534989700/article/details/51557204 为什么用了Synchronized还要用cas一开始数组上是null的时候使用CAS进行put而不需要加锁，如果成功了就成功了，如果失败了再使用synchronized","categories":[{"name":"Small points","slug":"Small-points","permalink":"http://233hsysweb.ml/categories/Small-points/"}],"tags":[{"name":"points","slug":"points","permalink":"http://233hsysweb.ml/tags/points/"}],"author":"huanshi2"},{"title":"Java 线程池的拒绝策略","slug":"Java-线程池的拒绝策略","date":"2020-09-19T08:15:00.000Z","updated":"2020-09-19T08:15:00.000Z","comments":true,"path":"2020/09/19/Java-线程池的拒绝策略/","link":"","permalink":"http://233hsysweb.ml/2020/09/19/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5/","excerpt":"RejectedExecutionHandler提供了四种方式来处理任务拒绝策略 1、直接丢弃（DiscardPolicy） 2、丢弃队列中最老的任务(DiscardOldestPolicy)。 3、抛异常(AbortPolicy) 4、将任务分给调用线程来执行(CallerRunsPolicy)。","text":"RejectedExecutionHandler提供了四种方式来处理任务拒绝策略 1、直接丢弃（DiscardPolicy） 2、丢弃队列中最老的任务(DiscardOldestPolicy)。 3、抛异常(AbortPolicy) 4、将任务分给调用线程来执行(CallerRunsPolicy)。 线程池线程池是一种基于池化思想管理线程的工具，经常出现在多线程服务器中。 主要思想就是：由于线程过多会带来额外的开销，包括线程创建和销毁的开销，调度线程的开销，降低了计算机整体性能，线程池维护多个线程，等待监督管理者分配可并发执行的任务。这样减少了线程创建销毁的开销，避免了线程数量膨胀导致过分调度问题，保证对内核的充分调用。 线程池参数：corePoolSize： 线程池维护线程的最少数量 maximumPoolSize：线程池维护线程的最大数量 keepAliveTime： 线程池维护线程所允许的空闲时间 unit： 线程池维护线程所允许的空闲时间的单位 workQueue： 线程池所使用的缓冲队列 handler： 线程池对拒绝任务的处理策略","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"new 和 newInstance()方法的区别","slug":"new-和-newInstance-方法的区别","date":"2020-09-13T12:47:16.000Z","updated":"2020-09-13T12:47:16.000Z","comments":true,"path":"2020/09/13/new-和-newInstance-方法的区别/","link":"","permalink":"http://233hsysweb.ml/2020/09/13/new-%E5%92%8C-newInstance-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"https://blog.csdn.net/luckykapok918/article/details/50186797","categories":[],"tags":[],"author":"huanshi2"},{"title":"JVM之堆栈","slug":"JVm","date":"2020-09-13T08:57:00.000Z","updated":"2020-09-13T08:57:00.000Z","comments":true,"path":"2020/09/13/JVm/","link":"","permalink":"http://233hsysweb.ml/2020/09/13/JVm/","excerpt":"","text":"https://www.cnblogs.com/yychuyu/p/13275970.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"Jvm","slug":"Java/Jvm","permalink":"http://233hsysweb.ml/categories/Java/Jvm/"}],"tags":[{"name":"Jvm","slug":"Jvm","permalink":"http://233hsysweb.ml/tags/Jvm/"}],"author":"huanshi2"},{"title":"内存泄漏","slug":"内存序列","date":"2020-09-11T08:49:00.000Z","updated":"2020-09-11T08:49:00.000Z","comments":true,"path":"2020/09/11/内存序列/","link":"","permalink":"http://233hsysweb.ml/2020/09/11/%E5%86%85%E5%AD%98%E5%BA%8F%E5%88%97/","excerpt":"","text":"什么是内存泄漏？内存泄漏：对象已经没有被应用程序使用，但是垃圾回收器没办法移除它们，因为还在被引用着。 在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点，首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；其次，这些对象是无用的，即程序以后不会再使用这些对象。如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。 https://www.jianshu.com/p/54b5da7c6816","categories":[],"tags":[],"author":"huanshi2"},{"title":"为什么要重写HashCode方法和equals方法？","slug":"为什么要重写HashCode方法和equals方法？","date":"2020-09-11T07:04:00.000Z","updated":"2020-09-11T07:04:00.000Z","comments":true,"path":"2020/09/11/为什么要重写HashCode方法和equals方法？/","link":"","permalink":"http://233hsysweb.ml/2020/09/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E5%86%99HashCode%E6%96%B9%E6%B3%95%E5%92%8Cequals%E6%96%B9%E6%B3%95%EF%BC%9F/","excerpt":"hashCode()用本地方法返回内存地址。 equals比较的是两个对象是否相等。","text":"hashCode()用本地方法返回内存地址。 equals比较的是两个对象是否相等。 1.Object.hashCode的通用约定 在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，那么，对该对象调用hashCode方法多次，它必须始终如一地返回 同一个整数。在同一个应用程序的多次执行过程中，这个整数可以不同，即这个应用程序这次执行返回的整数与下一次执行返回的整数可以不一致。 如果两个对象根据equals(Object)方法是相等的，那么调用这两个对象中任一个对象的hashCode方法必须产生同样的整数结果。 如果两个对象根据equals(Object)方法是不相等的，那么调用这两个对象中任一个对象的hashCode方法，不要求必须产生不同的整数结果。然而，程序员应该意识到这样的事实，对于不相等的对象产生截然不同的整数结果，有可能提高散列表（hash table）的性能。 2.重写hashCode方法自定义对象插入HashMap时，首先需要根据内存地址确定Key在hashMap数组中的索引。但是原来的hashCode函数计算的时内存中的地址，造成new的两个相同的对象的hashCode不相等。但是HashMap中相同对象的索引应该相同，所以此时需要重写hashCode方法。 3.重写equals方法重写了hashCode方法之后，两个相同对象在HashMap中的索引已经相等了，还需要判断equals，因为hashCode相同，两个对象还可能不相等，所以还需要判断equals。判断该对象类型和参数是否相等。 总结总之,重写hashCode和equals的目的是保证相同的自定义对象在HashMap中的Entry数组上是唯一的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package hs.lx;import java.util.HashMap;public class HashAndEquals &#123; public static void main(String[] args) &#123; HashMapKey k1 = new HashMapKey(1); System.out.println(k1.hashCode()); HashMapKey k2 = new HashMapKey(1); System.out.println(k2.hashCode()); System.out.println(k1 == k2); System.out.println(k1.equals(k2)); HashMap&lt;HashMapKey, String&gt; map = new HashMap&lt;&gt;(); map.put(k1, &quot;我是一个程序员&quot;); System.out.println(&quot;map.get(k2) : &quot; + map.get(k2)); &#125;&#125;class HashMapKey &#123; private Integer id; public HashMapKey(Integer id) &#123; this.id = id; &#125; public Integer getId() &#123; return id; &#125; @Override public int hashCode() &#123; return id.hashCode(); &#125; @Override public boolean equals(Object o) &#123; if (o == null || !(o instanceof HashMapKey)) &#123; return false; &#125; else &#123; return this.getId().equals(((HashMapKey) o).getId()); &#125; &#125;&#125; https://zhuanlan.zhihu.com/p/61307537https://blog.csdn.net/zknxx/article/details/53862572","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"Java是编译型还是解释型？","slug":"Java是编译型还是解释型？","date":"2020-09-10T12:49:00.000Z","updated":"2020-09-10T12:49:00.000Z","comments":true,"path":"2020/09/10/Java是编译型还是解释型？/","link":"","permalink":"http://233hsysweb.ml/2020/09/10/Java%E6%98%AF%E7%BC%96%E8%AF%91%E5%9E%8B%E8%BF%98%E6%98%AF%E8%A7%A3%E9%87%8A%E5%9E%8B%EF%BC%9F/","excerpt":"编译型语言（compiled language）指通过编译器（compiler）将源代码编译为机器码（machine code）后运行的语言，例如C、C++； 解释型语言（interpreted language）指由解释器（interpreter）直接执行，不需要编译成机器语言，例如 PHP、JavaScript。","text":"编译型语言（compiled language）指通过编译器（compiler）将源代码编译为机器码（machine code）后运行的语言，例如C、C++； 解释型语言（interpreted language）指由解释器（interpreter）直接执行，不需要编译成机器语言，例如 PHP、JavaScript。 编译型语言和解释型语言的优点和缺点：由于解释型语言会在运行时翻译源代码，一般情况下运行速度不如编译型语言；解释型语言由解释器运行，而不是直接运行在操作系统上，所以一般有较强的跨平台能力。 Java 是编译型语言还是解释型语言：为了兼顾跨平台和运行速度，Java 源代码首先会被编译为字节码文件（.class），但并非是机器语言，而是需要在 JVM 上运行，而 .class 文件在 JVM 上是解释执行的。所以 Java 兼具编译型语言和解释型语言的特点。 为了更高的效率，JVM 还引入了 JIT（just-in-time，即时编译）编译器，在 Java 程序运行时进一步编译，转换成高度优化的机器代码。现在的很多语言以及不能以编译型语言和解释型语言来区分了，因为很多语言都兼具编译型语言和解释型语言的特点。 作者：叉叉哥链接：https://www.zhihu.com/question/19608553/answer/1388597692来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"Spring 注解","slug":"Spring-注解","date":"2020-09-08T13:44:00.000Z","updated":"2020-09-08T13:44:00.000Z","comments":true,"path":"2020/09/08/Spring-注解/","link":"","permalink":"http://233hsysweb.ml/2020/09/08/Spring-%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"","categories":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/categories/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/tags/Spring/"}],"author":"huanshi2"},{"title":"设计模式之工厂模式","slug":"设计模式之工厂模式","date":"2020-09-08T11:49:00.000Z","updated":"2020-09-08T11:49:00.000Z","comments":true,"path":"2020/09/08/设计模式之工厂模式/","link":"","permalink":"http://233hsysweb.ml/2020/09/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://233hsysweb.ml/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://233hsysweb.ml/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"author":"huanshi2"},{"title":"Maven配置及使用","slug":"Maven中pom-xml配置","date":"2020-09-08T11:01:00.000Z","updated":"2020-09-08T11:01:00.000Z","comments":true,"path":"2020/09/08/Maven中pom-xml配置/","link":"","permalink":"http://233hsysweb.ml/2020/09/08/Maven%E4%B8%ADpom-xml%E9%85%8D%E7%BD%AE/","excerpt":"","text":"maven是什么？是一个项目管理和综合工具。提供开发人员构建一个完整的生命周期开发框架，可以自动完成项目的基础工具建设，maven使用标准的目录机构和默认构建生命周期。 类似的工具还有Gradle。 maven是干什么的？简单来说就是一个导jar包的工具，把jar包集中管理。 maven本地仓库（略）修改setting.xml中仓库地址 pom.xml配置POM project object model 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 基本配置 --&gt; &lt;groupId&gt;hs&lt;/groupId&gt; &lt;artifactId&gt;ys&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!-- 项目基本信息 --&gt; &lt;name&gt;ys&lt;/name&gt; &lt;!-- FIXME change it to the project&#x27;s website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;!-- 定义pom常量 --&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;!-- 依赖配置 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.6&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt; &lt;artifactId&gt;jol-core&lt;/artifactId&gt; &lt;version&gt;0.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 构建配置 --&gt; &lt;build&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;!-- 使用的插件列表 --&gt; &lt;plugins&gt; &lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.22.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 创建一个POM之前，应该要先决定项目组(groupId)，项目名(artifactId)和版本（version） 部分项目组件已经标在上面的xml中。其他的可以参考下面第二个链接。 https://www.cnblogs.com/whgk/p/7112560.htmlhttps://www.jianshu.com/p/0e3a1f9c9ce7","categories":[{"name":"Maven","slug":"Maven","permalink":"http://233hsysweb.ml/categories/Maven/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"Maven","slug":"Maven","permalink":"http://233hsysweb.ml/tags/Maven/"}],"author":"huanshi2"},{"title":"Spring IoC AOP","slug":"Spring-IoC-AOP","date":"2020-09-08T03:28:00.000Z","updated":"2020-09-08T03:28:00.000Z","comments":true,"path":"2020/09/08/Spring-IoC-AOP/","link":"","permalink":"http://233hsysweb.ml/2020/09/08/Spring-IoC-AOP/","excerpt":"","text":"","categories":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/categories/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/tags/Spring/"}],"author":"huanshi2"},{"title":"leetcode-77 组合","slug":"leetcode-77-组合","date":"2020-09-08T02:31:00.000Z","updated":"2020-09-08T02:31:00.000Z","comments":true,"path":"2020/09/08/leetcode-77-组合/","link":"","permalink":"http://233hsysweb.ml/2020/09/08/leetcode-77-%E7%BB%84%E5%90%88/","excerpt":"给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。 12345678910输入: n = 4, k = 2输出:[ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4],]","text":"给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。 12345678910输入: n = 4, k = 2输出:[ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4],] 这里不需要考虑重复问题, 因为按照顺序选择，后面的数字一定大于前面的数字。 12345678910111213141516171819202122232425class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); if(k &lt;= 0 || n &lt; k)&#123; return res; &#125; List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); dfs(n, k, 1, path, res); return res; &#125; public void dfs(int n, int k, int begin, List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; res)&#123; if(path.size() == k)&#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; // 搜索起点上界 + 接下来要选的元素个数 - 1 = n, 这里的i不是索引，而是取值。 for(int i = begin; i &lt;= n - (k - path.size()) + 1; i++)&#123; path.add(i); dfs(n, k, i + 1, path, res); path.remove(path.size() - 1); &#125; &#125;&#125;","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"}],"author":"huanshi2"},{"title":"Spring 框架相关术语","slug":"Spring-框架相关术语","date":"2020-09-07T13:34:00.000Z","updated":"2020-09-07T13:34:00.000Z","comments":true,"path":"2020/09/07/Spring-框架相关术语/","link":"","permalink":"http://233hsysweb.ml/2020/09/07/Spring-%E6%A1%86%E6%9E%B6%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD/","excerpt":"Spring是什么？Spring是一个开发应用框架，有以下几个特点：轻量级、非侵入式、一站式、模块化。","text":"Spring是什么？Spring是一个开发应用框架，有以下几个特点：轻量级、非侵入式、一站式、模块化。 应用程序开发： 除了要开发业务逻辑外， 还要关注对象写作来完成所需功能 低耦合，高内聚 Spring带来了什么简化开发 帮助我们根据配置文件创建以及组装对象之间的依赖关系 面向切向变成能够帮助我们无耦合的实现 帮我们管理数据库事务 提供第三方数据访问框架（Hibernate, JPA)无缝集成，自己也提供了一套JDBC访问模板 还提供第三方Web框架无缝集成，自己也提供了一套SpringMVC框架 能够方便与java EE整合， 与更多技术整合 Spring相关术语应用程序：是我们完成功能的成品，比如购物网站，OA系统(办公自动化系统),ERP系统（企业资源计划系统）等。 框架：完成一定功能的半成品，框架规定了开发时的整体架构，实现了基础功能，规定了类和对象如何创建，如何协作等从而简化开发。 非侵入式设计：无需继承框架提供的类，就可以看作是非侵入式设计，如果继承了框架类则是侵入式设计，以后更换框架之前写的代码就无法重用，非侵入式则可以重用。 轻量级和重量级：轻量级一般就是非侵入式的，所依赖东西少，资源占用少，部署简单等，重量级相反 POJO：Plain Old Java Objects 简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色不继承或不实现任何其他框架的类或接口 容器：装对象的容器，因为存在放入，拿出操作，容器还要管理对象的生命周期 控制反转：Inversion of Control 缩写IoC， 控制反转还有一个名字叫做依赖注入（Dependency Ijection) 就是容器控制程序之间的关系，而非传统实现中，由程序代码直接操控 bean：一般指容器管理对象，在Spring中指Spring IoC容器管理对象 Spring的好处非常轻量级的容器：以集中的、自动化的方式进行应用程序对象创建和装配，负责对象创建和装配，管理对象生命周期，能组合成复杂的应用程序。Spring容器是非侵入式的（不需要依赖任何Spring特定类），而且完全采用POJOs进行开发，使应用程序更容易测试、更容易管理。而且核心JAR包非常小，Spring3.0.5不到1M，而且不需要依赖任何应用服务器，可以部署在任何环境（Java SE或Java EE）。 AOP：AOP是Aspect Oriented Programming的缩写，意思是面向切面编程，提供从另一个角度来考虑程序结构以完善面向对象编程（相对于OOP），即可以通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。通俗点说就是把可重用的功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中；比如安全，日记记录，这些都是通用的功能，我们可以把它们提取出来，然后在程序执行的合适地方织入这些代码并执行它们，从而完成需要的功能并复用了这些功能。 简单的数据库事务管理：在使用数据库的应用程序当中，自己管理数据库事务是一项很让人头疼的事，而且很容易出现错误，Spring支持可插入的事务管理支持，而且无需JEE环境支持，通过Spring管理事务可以把我们从事务管理中解放出来来专注业务逻辑。 JDBC抽象及ORM框架支持：Spring使JDBC更加容易使用；提供DAO（数据访问对象）支持，非常方便集成第三方ORM框架，比如Hibernate等；并且完全支持Spring事务和使用Spring提供的一致的异常体系。 灵活的Web层支持：Spring本身提供一套非常强大的MVC框架，而且可以非常容易的与第三方MVC框架集成，比如Struts等。 简化各种技术集成：提供对Java Mail、任务调度、JMX、JMS、JNDI、EJB、动态语言、远程访问、Web Service等的集成。 Spring结构图 Spring应用场景典型Web应用程序应用场景Spring的声明式事务管理功能让web应用程序完全是事务性的,就像如果你使用EJB容器管理的事务。你所有的自定义的业务逻辑可以通过简单的pojo实现和由Spring的IoC容器。服务包括支持发送电子邮件和web层的独立验证,可以让你选择在哪里执行验证规则。 远程访问应用场景Spring能非常方便的提供暴露RMI服务，远程访问服务如Hessian、Burlap等，实现非常简单只需通过在Spring中配置相应的地址及需要暴露的服务即可轻松实现。 作者：斜杠Allen链接：https://www.jianshu.com/p/7b6a070119c7来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/categories/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/tags/Spring/"}],"author":"huanshi2"},{"title":"Mysql B+索引","slug":"Mysql-B-索引","date":"2020-09-07T07:52:00.000Z","updated":"2020-09-07T07:52:00.000Z","comments":true,"path":"2020/09/07/Mysql-B-索引/","link":"","permalink":"http://233hsysweb.ml/2020/09/07/Mysql-B-%E7%B4%A2%E5%BC%95/","excerpt":"各个数据页可以组成一个双向链表，而每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表， 每个数据页都会为存储在它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。","text":"各个数据页可以组成一个双向链表，而每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表， 每个数据页都会为存储在它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。 页abc可以不在物理存储结构上相连，只要通过双向链表相关联。 没有索引的查找一个页面查找 主键为搜索条件：在页目录中二分查找 其他列： 遍历单链表 多个页面查找 定位到记录所在页 从所在页找到相应记录 索引我们只在示意图里展示记录的这几个部分：record_type：记录头信息的一项属性，表示记录的类型，0表示普通记录、2表示最小记录、3表示最大记录、1我们还没用过，等会再说 next_record：记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，为了方便大家理解，我们都会用箭头来表明下一条记录是谁。 各个列的值：这里只记录在index_demo表中的三个列，分别是c1、c2和c3。 其他信息：除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。 一个简单的索引方案因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以 不得不 依次遍历所有的数据页。 建立索引需要： 下一个数据页中用户记录的主键值必须大于上一个野种用户记录的主键值 给所有的页建立一个目录项。 一个插入过程再插入一条记录4 新分配的数据页编号可能并不是连续的，也就是说我们使用的这些页在存储空间里可能并不挨着 页面不连续，所以插入数据后数据页可能变成下面这样 最终页目录 这个目录有一个别名，称为索引。 InnoDB中的索引方案这些目录项其实长得跟我们的用户记录差不多，只不过目录项中的两个列是主键和页号而已，所以他们复用了之前存储用户记录的数据页来存储目录项，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。 记录头信息里的record_type属性，它的各个取值代表的意思如下：0. 普通的用户记录 目录项记录 最小记录 最大记录 从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调一遍目录项记录和普通的用户记录的不同点： 目录项记录的record_type值是1，而普通用户记录的record_type值是0。 目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有InnoDB自己添加的隐藏列。 还记得我们之前在唠叨记录头信息的时候说过一个叫min_rec_mask的属性么，只有在存储目录项记录的页中的主键值最小的目录项记录的min_rec_mask值为1，其他别的记录的min_rec_mask值都是0。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"B+Tree","slug":"B-Tree","permalink":"http://233hsysweb.ml/tags/B-Tree/"},{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"},{"name":"索引","slug":"索引","permalink":"http://233hsysweb.ml/tags/%E7%B4%A2%E5%BC%95/"}],"author":"huanshi2"},{"title":"leetcode-1004 最大连续1的个数III","slug":"leetcode-1004-最大连续1的个数III","date":"2020-09-05T03:02:00.000Z","updated":"2020-09-05T03:02:00.000Z","comments":true,"path":"2020/09/05/leetcode-1004-最大连续1的个数III/","link":"","permalink":"http://233hsysweb.ml/2020/09/05/leetcode-1004-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0III/","excerpt":"给定一个由若干 0 和 1 组成的数组 A，我们最多可以将 K 个值从 0 变成 1 。 返回仅包含 1 的最长（连续）子数组的长度。","text":"给定一个由若干 0 和 1 组成的数组 A，我们最多可以将 K 个值从 0 变成 1 。 返回仅包含 1 的最长（连续）子数组的长度。 123456789输入：A = [1,1,1,0,0,0,1,1,1,1,0], K = 2输出：6解释： [1,1,1,0,0,1,1,1,1,1,1]粗体数字从 0 翻转到 1，最长的子数组长度为 6。来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/max-consecutive-ones-iii著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 解题思路：滑动窗口的思想：滑动窗口的大小为包含k个0的子串，low指向滑动窗口的左边，high指向滑动窗口的右边（high不断向右移动）。一旦滑动窗口中，0的个数大于k个时，就将low右移，直至滑动窗口中的0的个数恢复至k个。用res变量来保存当前滑动窗口的大小，不断进行更新。 1234567891011121314151617181920212223242526272829303132333435363738394041424344package hs.bs;public class SlideWindows &#123; public static void main(String[] args) &#123; int[] arr = &#123; 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1 &#125;; int k = 2; int max = 0; int left = 0; int right = 0; int countZero = 0; // 分情况，如果countZero 0的个数小于k // 1. 当 A[right] = 1 时，left 不变，right 继续移动 // 2. 当 A[right] = 0 时， // 2.1 当0 的数量在 K 的范围内，left 不变，right 继续移动 // 2.2 当0 的数量 &gt; K， // 2.2.1 当 A[left] == 0 时，即 left 指向了一个零，只需要 left 右移一格，就可以减少一个零 // 2.2.2 当 A[left] == 1 时，即此时窗口内包了 K 个零，需要先移动至下个零，再右移一格才能减少一个零 // for (; right &lt; arr.length; right++) &#123; if (arr[right] == 0) &#123; if (countZero &lt; k) &#123; countZero++; &#125; else if (countZero == k) &#123; while (arr[left] == 1) &#123; //先移动到第一个0 left++; &#125; //去掉第一个0 left++; //此时left指针指向当前序列的第二个0，此时k-1个0 //遇到下一个arr[right] = 0 时，left++ //因为此时最左边的0已经组成不了最长子序列了 //而且每一次right++， max都会取最长子序列 &#125; &#125; // for 循环中如果 arr[right] == 1, 则 right++ max = Math.max(max, right - left + 1); &#125; System.out.println(max); &#125;&#125;","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"},{"name":"滑动窗口","slug":"滑动窗口","permalink":"http://233hsysweb.ml/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"}],"author":"huanshi2"},{"title":"Mysql InnoDB数据页结构","slug":"Mysql-InnoDB数据页结构","date":"2020-09-04T01:36:00.000Z","updated":"2020-09-04T01:36:00.000Z","comments":true,"path":"2020/09/04/Mysql-InnoDB数据页结构/","link":"","permalink":"http://233hsysweb.ml/2020/09/04/Mysql-InnoDB%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84/","excerpt":"","text":"不同类型页数据页是InnoDB管理存储空间的基本单位，一个页的大小一般是16KB。InnoDB为了不同的目的而设计了许多种不同类型的页，比如存放表空间头部信息的页，存放Insert Buffer信息的页，存放INODE信息的页，存放undo日志信息的页等 数据页结构一个InnoDB数据页的存储空间大致被划分成了7个部分，有的部分占用字节数是确定的，有的不是。 数据插入过程 数据结构构造的主要思想： 分组 把每组主键最大最小记录单列出来 把每组主键最大最小的记录在页目录page directory排列成数组便于二分查找 最大最小记录我们的记录按照主键从小到大的顺序形成了一个单链表。 最大记录的next_record的值为0，这也就是说最大记录是没有下一条记录了，它是这个单链表中的最后一个节点。如果从中删除掉一条记录，这个链表也是会跟着变化的，比如我们把第2条记录删掉： 对于最小记录所在的分组只能有 1 条记录，最大记录所在的分组拥有的记录条数只能在 1-8 条之间，剩下的分组中记录的条数范围只能在是 4-8 条之间 数据查找所以在一个数据页中查找指定主键值的记录的过程分为两步： 通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。 通过记录的next_record属性遍历该槽所在的组中的各个记录。 页面头部（page header） 文件头部（file header） 文件头部有FIL_PAGE_PREV和FIL_PAGE_NEXT指针分别指向上下页双链表 总结一个数据页可以被大致划分为7个部分，分别是 File Header，表示页的一些通用信息，占固定的38字节。 Page Header，表示数据页专有的一些信息，占固定的56个字节。 Infimum + Supremum，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的26个字节。 User Records：真实存储我们插入的记录的部分，大小不固定。 Free Space：页中尚未使用的部分，大小不确定。 Page Directory：页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。 File Trailer：用于检验页是否完整的部分，占用固定的8个字节。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"}],"author":"huanshi2"},{"title":"Mysql InnoDB行格式","slug":"Mysql-表","date":"2020-09-03T12:09:50.000Z","updated":"2020-09-03T12:09:50.000Z","comments":true,"path":"2020/09/03/Mysql-表/","link":"","permalink":"http://233hsysweb.ml/2020/09/03/Mysql-%E8%A1%A8/","excerpt":"https://learnku.com/articles/33781 真实数据在不同存储引擎中存放的格式一般是不同的 InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为 16 KB。","text":"https://learnku.com/articles/33781 真实数据在不同存储引擎中存放的格式一般是不同的 InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为 16 KB。 0. InnoDB页简介InnoDB是一个将表中的数据存储到磁盘上的存储引擎，所以即使关机后重启我们的数据还是存在的。而真正处理数据的过程是发生在内存中的，所以需要把磁盘中的数据加载到内存中，如果是处理写入或修改请求的话，还需要把内存中的内容刷新到磁盘上。而我们知道读写磁盘的速度非常慢，和内存读写差了几个数量级，所以当我们想从表中获取某些记录时，InnoDB存储引擎需要一条一条的把记录从磁盘上读出来么？不，那样会慢死，InnoDB采取的方式是：将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小一般为 16 KB。也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。 0.1 InnoDB行格式我们平时是以记录为单位来向表中插入数据的，这些记录在磁盘上的存放方式也被称为行格式或者记录格式。设计InnoDB存储引擎的大叔们到现在为止设计了4种不同类型的行格式，分别是Compact、Redundant、Dynamic和Compressed行格式，随着时间的推移，他们可能会设计出更多的行格式，但是不管怎么变，在原理上大体都是相同的。 指定行格式的语法我们可以在创建或修改表的语句中指定行格式： CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称ALTER TABLE 表名 ROW_FORMAT=行格式名称 1.COMPACT行格式 在Compact行格式中，把所有变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表，各变长字段数据占用的字节数按照列的顺序逆序存放，我们再次强调一遍，是逆序存放！ 如果该可变字段允许存储的最大字节数(MxW)(W值表示一个字符最多使用的字节数，M表示变长类型最多存储M个字符)超过255字节并且真实存储的字节数（L）超过127字节，则使用两个字节，否则使用一个字节。 小贴士： 并不是所有记录都有这个 变长字段长度列表 部分，比方说表中所有的列都不是变长的数据类型的话，这一部分就不需要有. 1.1 NULL值列表1.统计语序存储NULL的列 2.如果表中没有允许存储 NULL 的列，则 NULL值列表也不存在了，否则将每个允许存储NULL的列对应一个二进制位，二进制位按照列的顺序逆序排列，二进制位表示的意义如下： 二进制位的值为1时，代表该列的值为NULL。 二进制位的值为0时，代表该列的值不为NULL 3.MySQL规定NULL值列表必须用整数个字节的位表示，如果使用的二进制位个数不是整数个字节，则在字节的高位补0。 对于第二条记录来说，c1、c3、c4这3个列中c3和c4的值都为NULL，所以这3个列对应的二进制位的情况就是：110对应16进制为0x06 最终 1.2 记录头信息除了变长字段长度列表、NULL值列表之外，还有一个用于描述记录的记录头信息，它是由固定的5个字节组成。5个字节也就是40个二进制位，不同的位代表不同的意思，如图： 二进制位代表详细信息： 1.3 记录的真实数据除了自己定立的列的数据外，还有一些隐藏列 小贴士： 实际上这几个列的真正名称其实是：DB_ROW_ID、DB_TRX_ID、DB_ROLL_PTR，我们为了美观才写成了row_id、transaction_id和roll_pointer。 InnoDB表对主键的生成策略：优先使用用户自定义主键作为主键，如果用户没有定义主键，则选取一个Unique键作为主键，如果表中连Unique键都没有定义的话，则InnoDB会为表默认添加一个名为row_id的隐藏列作为主键。 真实记录 1.4 CHAR(M)列的存储格式逆序存储 对于 CHAR(M) 类型的列来说，当列采用的是定长字符集时，该列占用的字节数不会被加到变长字段长度列表，而如果采用变长字符集时，该列占用的字节数也会被加到变长字段长度列表。 2.Redundant行格式(mysql5.0之前的行格式) ![upload successful](/images/pasted-98.png）偏移表示第几列就是偏移数组中两两相减差值，表示长度 记录头 2.1 char列存储格式占用的真实数据空间就是该字符集表示一个字符最多需要的字节数和M的乘积。 3.溢出数据在Compact和Reduntant行格式中，对于占用存储空间非常大的列，在记录的真实数据处只会存储该列的一部分数据，把剩余的数据分散存储在几个其他的页中，然后记录的真实数据处用20个字节存储指向这些页的地址（当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数），从而可以找到剩余数据所在的页 从图中可以看出来，对于Compact和Reduntant行格式来说，如果某一列中的数据非常多的话，在本记录的真实数据处只会存储该列的前768个字节的数据和一个指向其他页的地址，然后把剩下的数据存放到其他页中，这个过程也叫做行溢出，存储超出768字节的那些页面也被称为溢出页。画一个简图就是这样： 4.Dynamic和Compressed行格式行格式和Compact挺像的，但是不会存储768个字节真实数据，直接存溢出页地址 5.总结 页是MySQL中磁盘和内存交互的基本单位，也是MySQL是管理存储空间的基本单位。 指定和修改行格式的语法如下： CREATE TABLE 表名 (列的信息) ROW_FORMAT=行格式名称 ALTER TABLE 表名 ROW_FORMAT=行格式名称 InnoDB目前定义了4种行格式 5.1 COMPACT行格式具体组成如图： 5.2 Redundant 5.3 Dynamic和Compressed类似于compact行格式，不会记录真实数据处存储字符床的钱768个字节，而是把所有字节都存储到其他页面中，实际地址存储存储页面的地址。Compressed行格式会采用压缩算法堆页面进行压缩 一个页一般是16KB，当记录中的数据太多，当前页放不下的时候，会把多余的数据存储到其他页中，这种现象称为行溢出。","categories":[],"tags":[],"author":"huanshi2"},{"title":"Mysql 隔离级别","slug":"Mysql隔离级别","date":"2020-09-03T07:44:00.000Z","updated":"2020-09-03T07:44:00.000Z","comments":true,"path":"2020/09/03/Mysql隔离级别/","link":"","permalink":"http://233hsysweb.ml/2020/09/03/Mysql%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","excerpt":"事务隔离级别MySql 事务隔离级别和允许并发副作用，分别如下表： 事务隔离级别 脏读 不可重复读 幻读 读未提交（read uncommitted） 是 是 是 不可重复读（read committed） 否 是 是 可重复读（repeatable read） 否 否 是 串行化（serializable） 否 否 否","text":"事务隔离级别MySql 事务隔离级别和允许并发副作用，分别如下表： 事务隔离级别 脏读 不可重复读 幻读 读未提交（read uncommitted） 是 是 是 不可重复读（read committed） 否 是 是 可重复读（repeatable read） 否 否 是 串行化（serializable） 否 否 否 由上表可知，MySQL 共支持四种事务隔离级别。表由上到下允许并发副作用越来越弱，似乎我们只要选择串行化（serializable）的事务隔离级别就不会发生脏读、不可重复读、幻读等问题了，但是选择串行化（serializable）却会带来一定的性能下降。所以关于如何选择事务隔离级别我们需要对脏读、不可重复读、幻读有一定认知，并确定这几种副作用对应用的影响，然后选择合适的隔离级别。 MySQL 的默认事务隔离级别为 可重复读（repeatable read） 所以我们不用担心「脏读」和「不可重复读」。 可以设置默认隔离级别： 12-- 设置事务隔离级别为 read committed，仅在本次会话中生效set session transaction isolation level read committed; 或者修改配置文件my.cnf配置文件使其永久生效。 12[mysqld]transaction-isolation = REPEATABLE-READ 作者：一只贱熊猫链接：https://juejin.im/post/6844903681196982285来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 https://juejin.im/post/6844903681196982285","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"}],"author":"huanshi2"},{"title":"Mysql 当前读，快照读和MVCC","slug":"Mysql-当前读，快照读和MVCC","date":"2020-09-03T07:26:00.000Z","updated":"2020-09-03T07:26:00.000Z","comments":true,"path":"2020/09/03/Mysql-当前读，快照读和MVCC/","link":"","permalink":"http://233hsysweb.ml/2020/09/03/Mysql-%E5%BD%93%E5%89%8D%E8%AF%BB%EF%BC%8C%E5%BF%AB%E7%85%A7%E8%AF%BB%E5%92%8CMVCC/","excerpt":"当前读当前读, 读取的是最新版本, 并且对读取的记录加锁, 阻塞其他事务同时改动相同记录，避免出现安全问题。","text":"当前读当前读, 读取的是最新版本, 并且对读取的记录加锁, 阻塞其他事务同时改动相同记录，避免出现安全问题。 具体有以下操作： select...lock in share mode (共享读锁) select...for update update , delete , insert 举例： 假设要update一条记录，但是另一个事务已经delete这条数据并且commit了，如果不加锁就会产生冲突。所以update的时候肯定要是当前读，得到最新的信息并且锁定相应的记录。 当前读的实现方式next-key锁(行记录锁 + Gap间隙锁) 快照读快照读 即：snapshot read，官方叫法是：Consistent Nonlocking Reads，即：一致性非锁定读. 12这次查询 只能看到 别的事务 生成快照前提交的数据，而不能看到别的事务生成快照后提交的数据或者未提交的数据。 单纯的select操作，不包括上述 select ... lock in share mode, select ... for update。 Read Committed隔离级别：每次select都生成一个快照读 Read Repeatable隔离级别：开启事务后第一个select语句才是快照读的地方，而不是一开启事务就快照读 快照读的实现方式 undolog和多版本并发控制MVCC https://www.jianshu.com/p/16f272c02aachttps://zhuanlan.zhihu.com/p/55819387https://zhuanlan.zhihu.com/p/55872397https://www.jianshu.com/p/eb3f56565b42","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"}],"author":"huanshi2"},{"title":"Mysql 事务ACID","slug":"Mysql-事务ACID","date":"2020-09-02T13:06:00.000Z","updated":"2020-09-02T13:06:00.000Z","comments":true,"path":"2020/09/02/Mysql-事务ACID/","link":"","permalink":"http://233hsysweb.ml/2020/09/02/Mysql-%E4%BA%8B%E5%8A%A1ACID/","excerpt":"1.事务事务就是一个操作序列，要么这些操作全部执行，要么操作不执行，它是一个不可分割的工作单位。","text":"1.事务事务就是一个操作序列，要么这些操作全部执行，要么操作不执行，它是一个不可分割的工作单位。 1.1 原子性一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作。 实现事务的原子性，数据库要支持回滚操作，在事务中某个操作失败后，回滚到事务之前的状态。 大多数数据库实现事务时，事务操作的数据是在事务相关的数据快照上，并不是真正修改实际的数据，如果有错不提交即可。 而其他一些只支持简单事务的数据库系统中，事务更新数据不在快照上，而是直接操作实际数据，则系统需要先预演一遍所有要执行的操作，如果失败，事务相关的所有操作都不会被执行。 1.2 一致性一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。 如转账的栗子: 假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。 事务的一致性决定了一个系统设计和实现的复杂度，因为事务可以有不同程度的一致性： 强一致性: 无论更新操作是在哪一个数据副本执行，之后所有的读操作都能获得最新的数据。 弱一致性: 提交的更新操作，不一定立即会被读操作读到，需要一段时间，此种情况会存在一个不一致窗口。 最终一致性: 是弱一致性的特例。事务更新一份数据，最终一致性保证在没有其他事务更新同样的值的话，最终所有的事务都会读到之前事务更新的最新值。如果没有错误发生，不一致窗口的大小依赖于：通信延迟，系统负载等 1.3 隔离性隔离性是当多个用户并发访问数据库时，同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如操作同一张表，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。 1.4 持久性持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。 2.并发一致性问题产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。 2.1 丢失更新 2.2 脏读T1修改了数据，但随后T1撤销了修改，T2读的是脏数据。 2.3 不可重复读T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和和第一次读取的结果不同。 2.4 幻读T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。 2.5 特点上述四种问题的特点： 丢失修改：T1，T2都进行修改提交，T1的更新会丢失 读脏数据：T1先修改 T2随后读取 ，T1再回滚，则T2读到了脏数据。 不可重复读：T2读 T1修改 T2再读 幻影读：T1读 T2修改 T1再读， 2.6 区别从控制的角度来讲，不可重复读只需要锁住满足条件的记录，而幻影读要锁住满足条件的及其相近的记录。所以，避免幻读，必须锁住表，避免不可重复读，只需要锁住行。 不可重复读和幻读最大的区别在于，如何通过锁的机制来解决它们产生的问题。 可以采用悲观锁的机制来处理问题，悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。但随之而来的就是数据库性能的大量开销，特别是对长事务而言，这样的开销往往无法承受。所以出于性能的考虑，成熟的数据库使用了以乐观锁为理论基础的MVCC（多版本并发控制）来避免上述两种问题。 乐观锁，大多是基于数据版本记录机制实现的。 1.SELECT : 当开始新一个事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号。 2.INSERT : 将当前系统版本号作为数据行快照的创建版本号。 3.DELETE : 将当前系统版本号作为数据行快照的删除版本号。 4.UPDATE : 可以理解为先执行 DELETE 后执行 INSERT。 https://zhuanlan.zhihu.com/p/58534510https://www.cnblogs.com/drunkhero/p/strenghen-comprehension-on-dirty-read-and-phantom-of-mysql.html","categories":[{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"}],"author":"huanshi2"},{"title":"背包问题","slug":"背包问题","date":"2020-09-02T02:22:00.000Z","updated":"2020-09-02T02:22:00.000Z","comments":true,"path":"2020/09/02/背包问题/","link":"","permalink":"http://233hsysweb.ml/2020/09/02/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","excerpt":"https://blog.csdn.net/yandaoqiusheng/article/details/84782655 01背包问题 题目有N件物品和一个容量为V的背包。第i件物品的费用是w[i]，价值是v[i]，求将哪些物品装入背包可使价值总和最大。","text":"https://blog.csdn.net/yandaoqiusheng/article/details/84782655 01背包问题 题目有N件物品和一个容量为V的背包。第i件物品的费用是w[i]，价值是v[i]，求将哪些物品装入背包可使价值总和最大。 基本思路这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。用子问题定义状态：即f[i][j]表示前i件物品恰放入一个容量为j的背包可以获得的最大价值。则其状态转移方程便是： f[i][j]=max(f[i−1][j],f[i−1][j−w[i]]+v[i]) i表示前i件物品，j表示剩余容量 “将前i件物品放入容量为jj的背包中”这个子问题，若只考虑第ii件物品的策略（放或不放），那么就可以转化为一个只牵扯前i−1件物品的问题。如果不放第i件物品，那么问题就转化为“前i−1件物品放入容量为j的背包中”，价值为f[i−1][j]；如果放第i件物品，那么问题就转化为“前i−1件物品放入剩下的容量为j−w[i]的背包中”，此时能获得的最大价值就是f[i−1][j−w[i]]再加上通过放入第ii件物品获得的价值v[i]。 如果不放第i件物品， 则最大价值为f[i-1][j] 如果放第i件物品，前i-1件物品价值为f[i-1][j-v[i]],再加上第i件物品价值，则最大价值为 f[i-1][j-w[i]] + v[i] 代码分析：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import java.util.Scanner;/*0-1背包问题每类物品最多装一次 */public class Sp &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int N = sc.nextInt(); int V = sc.nextInt(); int[] value = new int[N]; int[] weight = new int[N]; for (int i = 0; i &lt; N; i++) &#123; value[i] = sc.nextInt(); weight[i] = sc.nextInt(); &#125; sc.close(); int[][] dp = new int[N + 1][V + 1]; System.out.println(&quot;-----------&quot;); for (int i = 1; i &lt;= N; i++) &#123; for (int j = 1; j &lt;= V; j++) &#123; if (weight[i - 1] &gt; j) &#123; dp[i][j] = dp[i - 1][j]; &#125; else &#123; System.out.print(j - weight[i - 1] + &quot; &quot;); dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i - 1]] + value[i - 1]); &#125; &#125; System.out.println(); &#125; System.out.println(&quot;-----------&quot;); // int[] dp = new int[V + 1]; // for (int i = 0; i &lt; N; i++) &#123; // for (int j = V; j &gt;= 0; j--) &#123; // if (j &gt; weight[i]) &#123; // dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]); // &#125; // &#125; // &#125; // int[] dp = new int[V + 1]; // for (int i = 0; i &lt; N; i++) &#123; // for (int j = weight[i]; j &lt; V + 1; j++) &#123; // dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]); // &#125; // &#125; for(int[] b : dp) &#123; for(int c : b)&#123; System.out.print(c + &quot; &quot;); &#125; System.out.println(); &#125; System.out.println(&quot;-----------&quot;); int maxValue = dp[N][V]; System.out.println(maxValue); &#125;&#125; 输入输出： 1234567891011121314151617181920215 105 45 310 48 64 2-----------0 1 2 3 4 5 60 1 2 3 4 5 6 70 1 2 3 4 5 60 1 2 3 40 1 2 3 4 5 6 7 8-----------0 0 0 0 0 0 0 0 0 0 00 0 0 0 5 5 5 5 5 5 50 0 0 5 5 5 5 10 10 10 100 0 0 5 10 10 10 15 15 15 150 0 0 5 10 10 10 15 15 15 180 0 4 5 10 10 14 15 15 19 19-----------19 第二部分表示用于迭代计算的上一部分的值的容量j 第一行 表示容量从0到10的情况下一个物品都不拿的情况，所以最后不管容量为多少，最大价值都为0. dp[0][j] = 0 第二行 表示容量从0-10的情况下只拿第一个物品或者不拿第一个物品的情况，由于第一件物品占用容量为4，weight[0] = 4 &gt; j，j在0-3之间时，容量均小于第一件物品占用容量4，所以dp[0][j]始终为0。 当容量大于等于4时，此时需要考虑第一件物品的价值。第一件物品的价值为5，容量为4，所以容量变大到4以后，计算 dp[1][j] = Math.max(dp[0][j], dp[0][j - weight[0]] + value[0]) ,可以看出这一行的值使用了第一行的值。 第三行 表示容量从0-10的情况下，可以从第一，第二件物品中选择的过程，第二件物品占用容量比第一件物品小，由于第二件物品占用容量为3，weight[1] = 3 &gt; j，容量在0-2之间，放不下第二件物品，所以dp为0 当容量大于等于3时，dp[2][3] = Math.max(dp[1][3], dp[1][3 - weight[1]] + value[1]),容量j = 4时，dp[2][4] = Math.max(dp[1][4], dp[1][4 - weight[1]] + value[1]), 容量j从4到6之间，只能放下第一个物品和第二个物品两个中的一个，但是两个物品价值相同，所以最大价值一直为5。当j = 7时，dp[2][7] = Math.max(dp[1][7], dp[1][7-weight[1]] + value[1]). 即求两个物品最大价值时，可以把两个物品分开，先计算去掉当前物品容量的情况下的最大价值，再加上当前物品的价值，最后比较加了该物品和未加该物品，当前容量减掉当前物品容量的情况可以在数组中前一行找到。 其他行同理。","categories":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"http://233hsysweb.ml/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"huanshi2"},{"title":"leetcode-486 预测赢家","slug":"leetcode-486-预测赢家","date":"2020-09-01T03:17:00.000Z","updated":"2020-09-01T03:17:00.000Z","comments":true,"path":"2020/09/01/leetcode-486-预测赢家/","link":"","permalink":"http://233hsysweb.ml/2020/09/01/leetcode-486-%E9%A2%84%E6%B5%8B%E8%B5%A2%E5%AE%B6/","excerpt":"给定一个表示分数的数组，两个玩家先后拿分数，预测先手玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。 输入：[1, 5, 2] 输出：False","text":"给定一个表示分数的数组，两个玩家先后拿分数，预测先手玩家1是否会成为赢家。你可以假设每个玩家的玩法都会使他的分数最大化。 输入：[1, 5, 2] 输出：False 思路定义状态dp： dp[i][j]dp[i][j]表示先手玩家与后手玩家在nums[i...j]和nums[i...j]之间互相拿，先手玩家比后手玩家多的最大分数，注意：这是个差值(delta)，而且是个最大差值。 所以最后dp[0][length-1] 就是最终先手玩家比后手玩家多的最大分数，大于0则true。 作者：a-fei-8链接：https://leetcode-cn.com/problems/predict-the-winner/solution/ji-xiao-hua-ji-da-zhi-yu-ce-ying-jia-polar-bear-by/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 先手玩家有两种拿法： 先手拿开头的 剩余区间[i+1][j],此时状态dp[i+1][j]表示后手玩家比先手玩家多的最大分数，所以dp[i][j] = nums[i] - dp[i+1][j] 先手拿结尾的剩余区间[i][j-1],此时状态dp[i][j-1]表示后手玩家比先手玩家多的最大分数，所以dp[i][j] = nums[j] - dp[i][j-1] 最大化dp[i][j] = max[nums[i]+(-dp[i+1][j]), nums[j]+(-dp[i][j-1])] 作者：a-fei-8链接：https://leetcode-cn.com/problems/predict-the-winner/solution/ji-xiao-hua-ji-da-zhi-yu-ce-ying-jia-polar-bear-by/来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 123456789101112131415161718class Solution &#123; public boolean PredictTheWinner(int[] nums) &#123; if (nums == null || nums.length == 0) return false; int len = nums.length; // 动态规划 所用数组，dp[i][j]表示：在nums数组的i到j下标区间内，先手玩家比后手玩家 “最大”多的数值 int[][] dp = new int[len][len]; for(int i = 0; i &lt; len; i++)&#123; dp[i][i] = nums[i]; &#125; for(int i = len - 2; i &gt;= 0; i--)&#123; for(int j = i + 1; j &lt; len; j++)&#123; dp[i][j] = Math.max(nums[i] - dp[i+1][j], nums[j] - dp[i][j-1]); &#125; &#125; return dp[0][len-1] &gt;= 0; &#125;","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"}],"author":"huanshi2"},{"title":"TCP","slug":"TCP","date":"2020-08-31T13:56:00.000Z","updated":"2020-08-31T13:56:00.000Z","comments":true,"path":"2020/08/31/TCP/","link":"","permalink":"http://233hsysweb.ml/2020/08/31/TCP/","excerpt":"https://mp.weixin.qq.com/s/tH8RFmjrveOmgLvk9hmrkw","text":"https://mp.weixin.qq.com/s/tH8RFmjrveOmgLvk9hmrkw 什么是TCP？IP 层是「不可靠」的，它不保证网络包的交付、不保证网络包的按序交付、也不保证网络包中的数据的完整性。 如果需要保障网络数据包的可靠性，那么就需要由上层（传输层）的 TCP 协议来负责。 因为 TCP 是一个工作在传输层的可靠数据传输的服务，它能确保接收端接收的网络包是无损坏、无间隔、非冗余和按序的。 TCP的定义和特点TCP 是面向连接的、可靠的、基于字节流的传输层通信协议。 面向连接：一定是「一对一」才能连接，不能像 UDP 协议 可以一个主机同时向多个主机发送消息，也就是一对多是无法做到的； 可靠的：无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端； 字节流：消息是「没有边界」的，所以无论我们消息有多大都可以进行传输。并且消息是「有序的」，当「前一个」消息没有收到的时候，即使它先收到了后面的字节已经收到，那么也不能扔给应用层去处理，同时对「重复」的报文会自动丢弃。 什么是连接简单来说就是，用于保证可靠性和流量控制维护的某些状态信息，这些信息的组合，包括Socket、序列号和窗口大小称为连接。 所以我们可以知道，建立一个 TCP 连接是需要客户端与服务器端达成上述三个信息的共识。 Socket：由 IP 地址和端口号组成 序列号：用来解决乱序问题等 窗口大小：用来做流量控制 确定唯一一个TCP连接TCP四元组源地址和目的地址的字段（32位）是在 IP 头部中，作用是通过 IP 协议发送报文给对方主机。 源端口和目的端口的字段（16位）是在 TCP 头部中，作用是告诉 TCP 协议应该把报文发给哪个进程。 最大连接数 TCP头部格式头部由20个字节组成： 源端口号2字节16位，目标端口号2字节16位 序列号4字节32位 确认应答号4字节32位 首部长度4位(数据偏移位数) 保留位6位 窗口大小2字节16位 检验和2字节16位 紧急指针2字节16位 可变长度选项 数据 序列号：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就「累加」一次该「数据字节数」的大小。用来解决网络包乱序问题。 确认应答号：指下一次「期望」收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。用来解决不丢包的问题。 控制位： ACK：该位为 1 时，「确认应答」的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。 RST：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。 SYN：该位为 1 时，表示希望建立连，并在其「序列号」的字段进行序列号初始值的设定。 FIN：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位置为 1 的 TCP 段。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"}],"author":"huanshi2"},{"title":"TCP为什么要三次握手和四次挥手","slug":"TCP为什么要三次握手和四次挥手","date":"2020-08-31T13:03:00.000Z","updated":"2020-08-31T13:03:00.000Z","comments":true,"path":"2020/08/31/TCP为什么要三次握手和四次挥手/","link":"","permalink":"http://233hsysweb.ml/2020/08/31/TCP%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/","excerpt":"为什么三次握手一次握手的情况： 由于TCP是面向连接的，一次很明显时不可能的，因为客户端发出连接消息后，却没有接收到来自服务端的回应，客户端就无法确定服务端接是否收到了连接请求，当然也就不能确定是否连接成功。","text":"为什么三次握手一次握手的情况： 由于TCP是面向连接的，一次很明显时不可能的，因为客户端发出连接消息后，却没有接收到来自服务端的回应，客户端就无法确定服务端接是否收到了连接请求，当然也就不能确定是否连接成功。 两次握手「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号； 「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。 三次握手接下来以三个方面分析三次握手的原因： 三次握手才可以阻止历史重复连接的初始化（主要原因） 三次握手才可以同步双方的初始序列号 三次握手才可以避免资源浪费 三次握手的首要原因是为了防止旧的重复连接初始化造成混乱。 https://mp.weixin.qq.com/s/tH8RFmjrveOmgLvk9hmrkwhttps://blog.csdn.net/Shuffle_Ts/article/details/93778635https://blog.csdn.net/lengxiao1993/article/details/82771768","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"}],"author":"huanshi2"},{"title":"leetcode-215 数组中第K个最大元素","slug":"leetcode-215-数组中第K个最大元素","date":"2020-08-31T08:19:00.000Z","updated":"2020-08-31T08:19:00.000Z","comments":true,"path":"2020/08/31/leetcode-215-数组中第K个最大元素/","link":"","permalink":"http://233hsysweb.ml/2020/08/31/leetcode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/","excerpt":"第K大的数 Arrays.sort() 快排，堆排 优先队列","text":"第K大的数 Arrays.sort() 快排，堆排 优先队列 基于快速排序的选择方法主要思想： 把数组划分为两部分 递归调用快排 每一次排序最终q左边n个数，右边m个数，q的索引为n 当n = arr.length - k时，这个数就是第k个最大元素 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; int len = nums.length; int left = 0; int right = len - 1; // 转换一下，第 k 大元素的索引是 len - k int target = len - k; // 选取数组最左边的数为基准 while (true) &#123; int index = partition(nums, left, right); if (index == target) &#123; return nums[index]; &#125; else if (index &lt; target) &#123; left = index + 1; &#125; else &#123; right = index - 1; &#125; &#125; &#125; // j也可以代表交换次数，小于pivot的数的个数，最终j的位置就是pivot的索引 public int partition(int[] nums, int left, int right) &#123; int pivot = nums[left]; int j = left; for (int i = left + 1; i &lt;= right; i++) &#123; if (nums[i] &lt; pivot) &#123; // 小于 pivot 的元素都被交换到前面 j++; swap(nums, j, i); &#125; &#125; // 在之前遍历的过程中，满足 [left + 1, j] &lt; pivot，并且 (j, i] &gt;= pivot swap(nums, j, left); // 交换以后 [left, j - 1] &lt; pivot, nums[j] = pivot, [j + 1, right] &gt;= pivot return j; &#125; private void swap(int[] nums, int index1, int index2) &#123; int temp = nums[index1]; nums[index1] = nums[index2]; nums[index2] = temp; &#125;&#125; 基于堆排序的选择方法们也可以使用堆排序来解决这个问题——建立一个大根堆，做 k−1 次删除操作后堆顶元素就是我们要找的答案。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; sort(nums); return nums[nums.length - k]; &#125; public void sort(int []arr)&#123; //1.构建大顶堆 //最后一个非叶子节点的位置是 arr.length/2 - 1 for(int i = arr.length/2-1;i&gt;=0;i--)&#123; //从最后一个非叶子结点从下至上，从右至左调整结构 adjustHeap(arr,i,arr.length); &#125; //2.调整堆结构+交换堆顶元素与末尾元素 for(int j=arr.length-1;j&gt;0;j--)&#123; swap(arr,0,j);//将堆顶元素与末尾元素进行交换 adjustHeap(arr,0,j);//重新对堆进行调整 &#125; &#125; public void adjustHeap(int []arr,int i,int length)&#123; int temp = arr[i];//先取出当前元素i (初始为arr.length/2 - 1，代表最后一个非叶子节点) for(int k = i * 2 + 1; k &lt; length; k = k * 2 + 1)&#123;//从i结点的左子结点开始，也就是2i+1处开始 if(k+1&lt;length &amp;&amp; arr[k]&lt;arr[k+1])&#123;//如果左子结点小于右子结点，k指向右子结点 k++; &#125; if(arr[k] &gt; temp)&#123;//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换） arr[i] = arr[k]; i = k; &#125;else&#123; break; &#125; &#125; arr[i] = temp;//将temp值放到父节点位置 &#125; public void swap(int []arr,int a ,int b)&#123; int temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; &#125;&#125; 优先队列123456789101112131415161718class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o2.compareTo(o1); &#125; &#125;); for(int num : nums)&#123; heap.offer(num); &#125; int res = -1; for(int i = k; i &gt; 0; i--)&#123; res = heap.poll(); &#125; return res; &#125;&#125;","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"}],"author":"huanshi2"},{"title":"leetcode-841钥匙和房间","slug":"leetcode-841","date":"2020-08-31T07:54:00.000Z","updated":"2020-08-31T07:54:00.000Z","comments":true,"path":"2020/08/31/leetcode-841/","link":"","permalink":"http://233hsysweb.ml/2020/08/31/leetcode-841/","excerpt":"输入: [[1],[2],[3],[]] 输出: true","text":"输入: [[1],[2],[3],[]] 输出: true 解释:我们从 0 号房间开始，拿到钥匙 1。 之后我们去 1 号房间，拿到钥匙 2。 然后我们去 2 号房间，拿到钥匙 3。 最后我们去了 3 号房间。 由于我们能够进入每个房间，我们返回 true。 DFS: 123456789101112131415161718192021class Solution &#123; boolean[] vis; int num; public boolean canVisitAllRooms(List&lt;List&lt;Integer&gt;&gt; rooms) &#123; int n = rooms.size(); num = 0; vis = new boolean[n]; dfs(rooms, 0); return num == n; &#125; public void dfs(List&lt;List&lt;Integer&gt;&gt; rooms, int x)&#123; vis[x] = true; num++; for(int it : rooms.get(x))&#123; if(!vis[it])&#123; dfs(rooms, it); &#125; &#125; &#125;&#125; BFS:与DFS不同的是BFS是当前层级遍历完之后再遍历下一层级。DFS中for循环里面直接进入了下一层DFS 1234567891011121314151617181920class Solution &#123;public boolean canVisitAllRooms(List&lt;List&lt;Integer&gt;&gt; rooms) &#123; int n = rooms.size(), num = 0; boolean[] vis = new boolean[n]; Queue&lt;Integer&gt; que = new LinkedList&lt;Integer&gt;(); vis[0] = true; que.offer(0); while(!que.isEmpty())&#123; int x = que.poll(); num++; for(int it : rooms.get(x))&#123; if(!vis[it])&#123; vis[it] = true; que.offer(it); &#125; &#125; &#125; return num == n; &#125;&#125;","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"},{"name":"BFS","slug":"BFS","permalink":"http://233hsysweb.ml/tags/BFS/"},{"name":"DFS","slug":"DFS","permalink":"http://233hsysweb.ml/tags/DFS/"}],"author":"huanshi2"},{"title":"翻转二叉树","slug":"翻转二叉树","date":"2020-08-30T09:33:39.000Z","updated":"2020-08-30T09:33:39.000Z","comments":true,"path":"2020/08/30/翻转二叉树/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"","categories":[],"tags":[],"author":"huanshi2"},{"title":"二叉搜索树中比k小的数","slug":"二叉搜索树中比k小的数","date":"2020-08-30T09:33:29.000Z","updated":"2020-08-30T09:33:29.000Z","comments":true,"path":"2020/08/30/二叉搜索树中比k小的数/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E6%AF%94k%E5%B0%8F%E7%9A%84%E6%95%B0/","excerpt":"","text":"","categories":[],"tags":[],"author":"huanshi2"},{"title":"乐观锁和悲观锁","slug":"乐观锁和悲观锁","date":"2020-08-30T09:21:04.000Z","updated":"2020-08-30T09:21:04.000Z","comments":true,"path":"2020/08/30/乐观锁和悲观锁/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/","excerpt":"","text":"https://www.cnblogs.com/kismetv/p/10787228.html","categories":[],"tags":[],"author":"huanshi2"},{"title":"字典序算法","slug":"字典序算法","date":"2020-08-30T09:15:32.000Z","updated":"2020-08-30T09:15:32.000Z","comments":true,"path":"2020/08/30/字典序算法/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E5%AD%97%E5%85%B8%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[],"author":"huanshi2"},{"title":"CAS原理","slug":"CAS原理","date":"2020-08-30T09:10:54.000Z","updated":"2020-08-30T09:10:54.000Z","comments":true,"path":"2020/08/30/CAS原理/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/CAS%E5%8E%9F%E7%90%86/","excerpt":"","text":"https://blog.csdn.net/weixin_43878293/article/details/102941568","categories":[],"tags":[],"author":"huanshi2"},{"title":"JVM类加载机制和双亲委派模型","slug":"JVM类加载机制和双亲委派模型","date":"2020-08-30T09:08:08.000Z","updated":"2020-08-30T09:08:08.000Z","comments":true,"path":"2020/08/30/JVM类加载机制和双亲委派模型/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"https://juejin.im/post/6844903633574690824","categories":[],"tags":[],"author":"huanshi2"},{"title":"Linux下查看正在运行的Java程序","slug":"Linux下查看正在运行的Java程序","date":"2020-08-30T08:56:00.000Z","updated":"2020-08-30T08:56:00.000Z","comments":true,"path":"2020/08/30/Linux下查看正在运行的Java程序/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/Linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84Java%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"查看所有java进程 ps -ef | grep java 停止所有java进程 pkill -9 停止特定的java命令 kill -9 进程pid","categories":[{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/categories/Linux/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/tags/Linux/"}],"author":"huanshi2"},{"title":"Java读取txt文本","slug":"Java读取txt文本","date":"2020-08-30T08:49:00.000Z","updated":"2020-08-30T08:49:00.000Z","comments":true,"path":"2020/08/30/Java读取txt文本/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/Java%E8%AF%BB%E5%8F%96txt%E6%96%87%E6%9C%AC/","excerpt":"","text":"1234567891011121314151617181920212223242526package hs.ms;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;public class ReadTxt &#123; public static void main(String[] args) throws IOException &#123; String filepath = &quot;E:\\\\Avscode\\\\erchashu\\\\ys\\\\src\\\\main\\\\java\\\\hs\\\\ms\\\\a.txt&quot;; File file = new File(filepath); FileInputStream fis = new FileInputStream(file); InputStreamReader isr = new InputStreamReader(fis, &quot;UTF-8&quot;); BufferedReader br = new BufferedReader(isr); String line = null; while ((line = br.readLine()) != null) &#123; // 执行操作 System.out.println(line); &#125; fis.close(); isr.close(); br.close(); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"IO","slug":"IO","permalink":"http://233hsysweb.ml/tags/IO/"},{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"进程间通信的7种方式","slug":"进程间通信的7种方式","date":"2020-08-30T08:45:00.000Z","updated":"2020-08-30T08:45:00.000Z","comments":true,"path":"2020/08/30/进程间通信的7种方式/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%847%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"https://www.jianshu.com/p/c1015f5ffa74 进程间通信的7种方式 管道/匿名管道(pipe) 管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道。 … 有名管道(FIFO) … 信号(Signal) … 消息(Message)队列 … 共享内存(share memory) … 信号量(semaphore) … 套接字(socket)","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"进程","slug":"进程","permalink":"http://233hsysweb.ml/tags/%E8%BF%9B%E7%A8%8B/"}],"author":"huanshi2"},{"title":"线程池的原理","slug":"线程池的原理","date":"2020-08-30T08:41:00.000Z","updated":"2020-08-30T08:41:00.000Z","comments":true,"path":"2020/08/30/线程池的原理/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%8E%9F%E7%90%86/","excerpt":"","text":"https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html https://blog.csdn.net/fuyuwei2015/article/details/72758179 https://juejin.im/post/6844903602452955150 写一个简单的线程池","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"线程池","slug":"线程池","permalink":"http://233hsysweb.ml/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"}],"author":"huanshi2"},{"title":"copyonwrite","slug":"copyonwrite","date":"2020-08-30T08:39:00.000Z","updated":"2020-08-30T08:39:00.000Z","comments":true,"path":"2020/08/30/copyonwrite/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/copyonwrite/","excerpt":"copy-on-write思想写入时复制思想是计算机程序设计中的一种通用优化策略。 核心思想是如果有多个调用者同时访问相同的资源，他们会共同获取相同的指针指向相同的资源，直到某个调用者修改资源内容时，系统会复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初资源仍然保持不变。","text":"copy-on-write思想写入时复制思想是计算机程序设计中的一种通用优化策略。 核心思想是如果有多个调用者同时访问相同的资源，他们会共同获取相同的指针指向相同的资源，直到某个调用者修改资源内容时，系统会复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初资源仍然保持不变。 通俗易懂的讲，写入时复制技术就是不同进程在访问同一资源的时候，只有更新操作，才会去复制一份新的数据并更新替换，否则都是访问同一个资源。 JDK中的COWJDK 的CopyOnWriteArrayList/CopyOnWriteArraySet 容器正是采用了 COW 思想，它是如何工作的呢？ 简单来说，就是平时查询的时候，都不需要加锁，随便访问，只有在更新的时候，才会从原来的数据复制一个副本出来，然后修改这个副本，最后把原数据替换成当前的副本。修改操作的同时，读操作不会被阻塞，而是继续读取旧的数据。这点要跟读写锁区分一下。 优点对于一些读多写少的数据，写入时复制的做法就很不错，例如配置、黑名单、物流地址等变化非常少的数据，这是一种无锁的实现。可以帮我们实现程序更高的并发。 CopyOnWriteArrayList 并发安全且性能比 Vector 好。Vector 是增删改查方法都加了synchronized 来保证同步，但是每个方法执行的时候都要去获得锁，性能就会大大下降，而 CopyOnWriteArrayList 只是在增删改上加锁，但是读不加锁，在读方面的性能就好于 Vector。 缺点数据一致性问题。这种实现只是保证数据的最终一致性，在添加到拷贝数据而还没进行替换的时候，读到的仍然是旧数据。 内存占用问题。如果对象比较大，频繁地进行替换会消耗内存，从而引发 Java 的 GC 问题，这个时候，我们应该考虑其他的容器，例如 ConcurrentHashMap。 https://www.cnblogs.com/jmcui/p/12377081.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"tcp与udp区别","slug":"tcp与udp区别","date":"2020-08-30T08:37:00.000Z","updated":"2020-08-30T08:37:00.000Z","comments":true,"path":"2020/08/30/tcp与udp区别/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/tcp%E4%B8%8Eudp%E5%8C%BA%E5%88%AB/","excerpt":"","text":"TCP为什么是三次握手","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"},{"name":"UDP","slug":"UDP","permalink":"http://233hsysweb.ml/tags/UDP/"}],"author":"huanshi2"},{"title":"sleep,wait和yield的区别","slug":"sleep和wait的区别","date":"2020-08-30T08:06:00.000Z","updated":"2020-08-30T08:06:00.000Z","comments":true,"path":"2020/08/30/sleep和wait的区别/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/sleep%E5%92%8Cwait%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"sleep 和 wait的区别 wait只能再同步状态下调用，sleep是静态方法，当前线程Thread.sleep()就可以调用 wait状态线程能被nofify和notifyAll方法唤醒，但是sleeping状态不能 wait通常有条件地执行，线程一直处于wait状态直到某个条件变为真。但是sleep仅仅让线程进入睡眠状态 wait方法进入wait状态会释放锁，sleep不会 wait方法是针对一个被同步代码块加锁的对象，而sleep是针对一个线程","text":"sleep 和 wait的区别 wait只能再同步状态下调用，sleep是静态方法，当前线程Thread.sleep()就可以调用 wait状态线程能被nofify和notifyAll方法唤醒，但是sleeping状态不能 wait通常有条件地执行，线程一直处于wait状态直到某个条件变为真。但是sleep仅仅让线程进入睡眠状态 wait方法进入wait状态会释放锁，sleep不会 wait方法是针对一个被同步代码块加锁的对象，而sleep是针对一个线程 yeild 和 sleep的区别yield和sleep的主要是，yield方法会临时暂停当前正在执行的线程，来让有同样优先级的正在等待的线程有机会执行。如果没有正在等待的线程，或者所有正在等待的线程的优先级都比较低，那么该线程会继续运行。执行了yield方法的线程什么时候会继续运行由线程调度器来决定，不同的厂商可能有不同的行为。yield方法不保证当前的线程会暂停或者停止，但是可以保证当前线程在调用yield方法时会放弃CPU。 sleep 方法的几个注意点 Thread.sleep()方法用来暂停线程的执行，将CPU放给线程调度器。 Thread.sleep()方法是一个静态方法，它暂停的是当前执行的线程。 Java有两种sleep方法，一个只有一个毫秒参数，另一个有毫秒和纳秒两个参数。 与wait方法不同，sleep方法不会释放锁 如果其他的线程中断了一个休眠的线程，sleep方法会抛出Interrupted Exception。 休眠的线程在唤醒之后不保证能获取到CPU，它会先进入就绪态，与其他线程竞争CPU。 有一个易错的地方，当调用t.sleep()的时候，会暂停线程t。这是不对的，因为Thread.sleep是一个静态方法，它会使当前线程而不是线程t进入休眠状态。 https://www.jianshu.com/p/25e959037eed","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"线程","slug":"线程","permalink":"http://233hsysweb.ml/tags/%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"HashMap,HashSet,Hashtable的区别","slug":"HashMap-HashSet-Hashtable的区别","date":"2020-08-30T08:04:00.000Z","updated":"2020-08-30T08:04:00.000Z","comments":true,"path":"2020/08/30/HashMap-HashSet-Hashtable的区别/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/HashMap-HashSet-Hashtable%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"HashMap和Hashtable的区别1.继承的类不同，HashMap是基于AbstractMap实现了Map接口实现的，而Hashtable是基于Dictionary类 2.HashMap不是线程安全的，Hash table是线程安全的。 3.与不允许null的区别，Hashtable中，key和value都不允许出现null值，而在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。 4.遍历方式的内部实现上不同，Hashset、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式。 5.哈希值的使用不同HashTable直接使用对象的hashCode。而HashMap重新计算hash值。 6.内部实现方式的数组的初始大小和扩容的方式不一样HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"},{"name":"HashSet","slug":"HashSet","permalink":"http://233hsysweb.ml/tags/HashSet/"},{"name":"Hashtable","slug":"Hashtable","permalink":"http://233hsysweb.ml/tags/Hashtable/"}],"author":"huanshi2"},{"title":"List,Map和Set的区别","slug":"List-Maphe-Set的区别","date":"2020-08-30T07:59:00.000Z","updated":"2020-08-30T07:59:00.000Z","comments":true,"path":"2020/08/30/List-Maphe-Set的区别/","link":"","permalink":"http://233hsysweb.ml/2020/08/30/List-Maphe-Set%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"12345678有人想有可以自动扩展的数组,所以有了List有的人想有没有重复的数组,所以有了set有人想有自动排序的组数,所以有了TreeSet,TreeList,TreeMap 而几乎有有的集合都是基于数组来实现的.因为集合是对数组做的封装,所以,数组永远比任何一个集合要快 但任何一个集合,比数组提供的功能要多","text":"12345678有人想有可以自动扩展的数组,所以有了List有的人想有没有重复的数组,所以有了set有人想有自动排序的组数,所以有了TreeSet,TreeList,TreeMap 而几乎有有的集合都是基于数组来实现的.因为集合是对数组做的封装,所以,数组永远比任何一个集合要快 但任何一个集合,比数组提供的功能要多 List 和 Set两个接口都是继承自Collection是常用来存放数据项的集合，主要区别如下： ① List和Set之间很重要的一个区别是是否允许重复元素的存在，在List中允许插入重复的元素，而在Set中不允许重复元素存在。 ② 与元素先后存放顺序有关，List是有序集合，会保留元素插入时的顺序，Set是无序集合。 ③ List可以通过下标来访问，而Set不能。 Map 因为List和Set都实现了Collection接口的addAll(Collection&lt;? extends E&gt; c)方法，因此可以采用addAll()方法将List和Set互相转换；另外，List和Set也提供了Collection&lt;? extends E&gt; c作为参数的构造函数，因此通常采用构造函数的形式完成互相转化。 https://blog.csdn.net/SpeedMe/article/details/22398395","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"List","slug":"List","permalink":"http://233hsysweb.ml/tags/List/"},{"name":"Map","slug":"Map","permalink":"http://233hsysweb.ml/tags/Map/"},{"name":"Set","slug":"Set","permalink":"http://233hsysweb.ml/tags/Set/"}],"author":"huanshi2"},{"title":"ThreadLocal是什么？","slug":"ThreadLocal是什么？","date":"2020-08-28T07:42:00.000Z","updated":"2020-08-28T07:42:00.000Z","comments":true,"path":"2020/08/28/ThreadLocal是什么？/","link":"","permalink":"http://233hsysweb.ml/2020/08/28/ThreadLocal%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"","text":"jdk1.8文档介绍 123456789101112131415/** * This class provides thread-local variables. These variables differ from * their normal counterparts in that each thread that accesses one (via its * &#123;@code get&#125; or &#123;@code set&#125; method) has its own, independently initialized * copy of the variable. &#123;@code ThreadLocal&#125; instances are typically private * static fields in classes that wish to associate state with a thread (e.g., * a user ID or Transaction ID). * * &lt;p&gt;For example, the class below generates unique identifiers local to each * thread. * A thread&#x27;s id is assigned the first time it invokes &#123;@code ThreadId.get()&#125; * and remains unchanged on subsequent calls. */ ThreadLocal提供了线程的局部变量，每个线程都可以通过set()和get()来对这个局部变量进行操作，但不会和其他线程的局部变量进行冲突，实现了线程的数据隔离的。 简要言之：往ThreadLocal中填充的变量属于当前线程，该变量对其他线程而言是隔离的。 ThreadLocal原理总结ThreadLocal设计的目的就是为了能够在当前线程中有属于自己的变量，并不是为了解决并发或者共享变量的问题。 每个Thread维护着一个ThreadLocalMap的引用 ThreadLocalMap是ThreadLocal的内部类，用Entry来进行存储 调用ThreadLocal的set()方法时，实际上就是往ThreadLocalMap设置值，key是ThreadLocal对象，值是传递进来的对象 调用ThreadLocal的get()方法时，实际上就是往ThreadLocalMap获取值，key是ThreadLocal对象 ThreadLocal本身并不存储值，它只是作为一个key来让线程从ThreadLocalMap获取value。 ThreadLocal表示线程的“局部变量”，它确保每个线程的ThreadLocal变量都是各自独立的； ThreadLocal适合在一个线程的处理流程中保持上下文（避免了同一参数在所有方法中传递）； 使用ThreadLocal要用try … finally结构，并在finally中清除。 内存泄漏ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。 https://juejin.im/post/6844903586984361992","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"浏览器输入URL后发生了什么？","slug":"浏览器输入URL后发生了什么？","date":"2020-08-28T07:09:00.000Z","updated":"2020-08-28T07:09:00.000Z","comments":true,"path":"2020/08/28/浏览器输入URL后发生了什么？/","link":"","permalink":"http://233hsysweb.ml/2020/08/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/","excerpt":"DNS域名解析 建立TCP连接 发送HTTP请求 服务器处理请求 服务器返回响应结果 关闭TCP连接 浏览器解析HTML 浏览器渲染布局","text":"DNS域名解析 建立TCP连接 发送HTTP请求 服务器处理请求 服务器返回响应结果 关闭TCP连接 浏览器解析HTML 浏览器渲染布局 DNS域名解析浏览器项本地DNS服务器发起请求，采用迭代查询的方式依次向根域名服务器，顶级域名服务器，权威域名服务器发起查询请求，直到查到一个或一组IP地址返回给浏览器。建立TCP连接通过 DNS 解析拿到服务器 IP 地址后，浏览器再通过系统调用 Socket 接口与服务器 443 端口进行通信，整个过程可以分解为建立连接、发送 HTTP 请求、返回 HTTP 响应、维持连接、释放连接五个部分。发送HTTP请求浏览器开始发送 HTTP 请求，一个请求报文由请求行、请求头、空行、实体（Get 请求没有）组成。服务器处理请求 服务器返回响应结果服务器接受并处理完请求，返回 HTTP 响应，一个响应报文格式基本等同于请求报文，由响应行、响应头、空行、实体组成。 维持连接完成一次 HTTP 请求后，服务器并不是马上断开与客户端的连接。在 HTTP/1.1 中，Connection: keep-alive 是默认启用的，表示持久连接，以便处理不久后到来的新请求，无需重新建立连接而增加慢启动开销，提高网络的吞吐能力。在反向代理软件 Nginx 中，持久连接超时时间默认值为 75 秒，如果 75 秒内没有新到达的请求，则断开与客户端的连接。同时，浏览器每隔 45 秒会向服务器发送 TCP keep-alive 探测包，来判断 TCP 连接状况，如果没有收到 ACK 应答，则主动断开与服务器的连接。注意，HTTP keep-alive 和 TCP keep-alive 虽然都是一种保活机制，但是它们完全不相同，一个作用于应用层，一个作用于传输层。 关闭TCP连接浏览器解析HTML浏览器渲染布局 https://zhuanlan.zhihu.com/p/43369093","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"},{"name":"DNS","slug":"DNS","permalink":"http://233hsysweb.ml/tags/DNS/"}],"author":"huanshi2"},{"title":"Vscode java build error","slug":"Vscode-java-build-error","date":"2020-08-28T02:09:00.000Z","updated":"2020-08-28T02:09:00.000Z","comments":true,"path":"2020/08/28/Vscode-java-build-error/","link":"","permalink":"http://233hsysweb.ml/2020/08/28/Vscode-java-build-error/","excerpt":"","text":"vscode java maven项目 build出错， Build failed,do you want to contine? Source:Debugger for java (Extension) 按下面博客说的，删除workspaceStorage文件夹，没有成功， https://blog.csdn.net/qq_28632639/article/details/100764746 清理 .vscode文件夹 也未成功 https://blog.csdn.net/qq_45662289/article/details/104084386 查看 language support for java 插件输出 https://blog.csdn.net/qq_32384249/article/details/101446882 12345678910111213141516[Error - 上午10:33:06] 2020-8-28 10:33:06 Error occured while building workspace. Details: message: Cannot instantiate the type Account; code: 16777373; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 10 message: Cannot instantiate the type Account; code: 16777373; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 11 message: The method transfer(Account, int) is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 14 message: The method transfer(Account, int) is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 19 message: The method getMoney() is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 28 message: The method getMoney() is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 28 message: The type Account is already defined; code: 16777539; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 40[Error - 上午10:36:07] 2020-8-28 10:36:07 Error occured while building workspace. Details: message: Cannot instantiate the type Account; code: 16777373; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 10 message: Cannot instantiate the type Account; code: 16777373; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 11 message: The method transfer(Account, int) is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 14 message: The method transfer(Account, int) is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 19 message: The method getMoney() is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 28 message: The method getMoney() is undefined for the type Account; code: 67108964; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 28 message: The type Account is already defined; code: 16777539; resource: E:/Avscode/erchashu/ys/src/main/java/hs/bf/ExerciseTransfer.java; line: 40 把出错的class注释掉，错误解决了。","categories":[{"name":"Vscode","slug":"Vscode","permalink":"http://233hsysweb.ml/categories/Vscode/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"Java基础(面试)","slug":"Java基础-面试","date":"2020-08-28T01:50:00.000Z","updated":"2020-08-28T01:50:00.000Z","comments":true,"path":"2020/08/28/Java基础-面试/","link":"","permalink":"http://233hsysweb.ml/2020/08/28/Java%E5%9F%BA%E7%A1%80-%E9%9D%A2%E8%AF%95/","excerpt":"","text":"","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"面试","slug":"Java/面试","permalink":"http://233hsysweb.ml/categories/Java/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"深拷贝和浅拷贝","slug":"深拷贝和浅拷贝","date":"2020-08-27T13:30:00.000Z","updated":"2020-08-27T13:30:00.000Z","comments":true,"path":"2020/08/27/深拷贝和浅拷贝/","link":"","permalink":"http://233hsysweb.ml/2020/08/27/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/","excerpt":"","text":"https://segmentfault.com/a/1190000010648514","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"深拷贝","slug":"深拷贝","permalink":"http://233hsysweb.ml/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"},{"name":"浅拷贝","slug":"浅拷贝","permalink":"http://233hsysweb.ml/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"}],"author":"huanshi2"},{"title":"为什么 HashMap 常用 String 对象作 key","slug":"为什么-HashMap-常用-String-对象作-key","date":"2020-08-27T13:25:00.000Z","updated":"2020-08-27T13:25:00.000Z","comments":true,"path":"2020/08/27/为什么-HashMap-常用-String-对象作-key/","link":"","permalink":"http://233hsysweb.ml/2020/08/27/%E4%B8%BA%E4%BB%80%E4%B9%88-HashMap-%E5%B8%B8%E7%94%A8-String-%E5%AF%B9%E8%B1%A1%E4%BD%9C-key/","excerpt":"","text":"https://blog.csdn.net/codejas/article/details/78837830","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"}],"author":"huanshi2"},{"title":"Java程序的执行过程","slug":"Java程序的执行过程","date":"2020-08-27T12:55:00.000Z","updated":"2020-08-27T12:55:00.000Z","comments":true,"path":"2020/08/27/Java程序的执行过程/","link":"","permalink":"http://233hsysweb.ml/2020/08/27/Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/","excerpt":"","text":"https://juejin.im/post/6844903696996941832","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"}],"author":"huanshi2"},{"title":"Java 死锁的四个必要条件和死锁预防、检测、避免、解除","slug":"Java-死锁","date":"2020-08-27T12:33:00.000Z","updated":"2020-08-27T12:33:00.000Z","comments":true,"path":"2020/08/27/Java-死锁/","link":"","permalink":"http://233hsysweb.ml/2020/08/27/Java-%E6%AD%BB%E9%94%81/","excerpt":"死锁是什么？一组相互竞争资源的线程因为互相等待，导致“永久”阻塞的现象。 死锁发生的四个必要条件 互斥，共享资源 X 和 Y 只能被一个线程占用； 占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X； 不可抢占，其他线程不能强行抢占线程 T1 占有的资源； 循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。","text":"死锁是什么？一组相互竞争资源的线程因为互相等待，导致“永久”阻塞的现象。 死锁发生的四个必要条件 互斥，共享资源 X 和 Y 只能被一个线程占用； 占有且等待，线程 T1 已经取得共享资源 X，在等待共享资源 Y 的时候，不释放共享资源 X； 不可抢占，其他线程不能强行抢占线程 T1 占有的资源； 循环等待，线程 T1 等待线程 T2 占有的资源，线程 T2 等待线程 T1 占有的资源，就是循环等待。 检测 jps + jstack jconsole Java Visual VM 找到cpu占用较高的线程TID 通过jstack -l &lt; PID &gt; 输出当前进程的线程信息 预防死锁的发生主要思想： 破坏死锁发生的条件。四个条件中我们不能破坏互斥条件，所以只能对其他三个条件进行破坏。 占用且等待：一次性申请所有的资源，这样就不存在等待了。 不可抢占：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。 循环等待：存在一个封闭的进程链，使得每个资源至少占有此链中下一个进程所需要的一个资源。 两种常用的死锁接触1) 资源剥夺法。挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但应防止被挂起的进程长时间得不到资源，而处于资源匮乏的状态。 2) 撤销进程法。强制撤销部分、甚至全部死锁进程并剥夺这些进程的资源。撤销的原则可以按进程优先级和撤销进程代价的高低进行。 https://blog.csdn.net/u010648555/article/details/80721815https://www.cnblogs.com/myworld7/p/12230010.html#_labelTop","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"死锁","slug":"死锁","permalink":"http://233hsysweb.ml/tags/%E6%AD%BB%E9%94%81/"}],"author":"huanshi2"},{"title":"leetcode 从前序遍历和中序遍历构造二叉树","slug":"leetcode-从前序遍历和中序遍历构造二叉树","date":"2020-07-31T02:18:00.000Z","updated":"2020-07-31T02:18:00.000Z","comments":true,"path":"2020/07/31/leetcode-从前序遍历和中序遍历构造二叉树/","link":"","permalink":"http://233hsysweb.ml/2020/07/31/leetcode-%E4%BB%8E%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"递归","slug":"递归","permalink":"http://233hsysweb.ml/tags/%E9%80%92%E5%BD%92/"},{"name":"二叉树","slug":"二叉树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"}],"author":"huanshi2"},{"title":"String,StringBuffer与StringBuilder的区别","slug":"String-StringBuffer与StringBuilder的区别","date":"2020-07-23T07:35:00.000Z","updated":"2020-07-23T07:35:00.000Z","comments":true,"path":"2020/07/23/String-StringBuffer与StringBuilder的区别/","link":"","permalink":"http://233hsysweb.ml/2020/07/23/String-StringBuffer%E4%B8%8EStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"特点 是否可变 线程安全 String String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间 不可变 — StringBuilder StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量 可变 线程不安全，单线程操作字符串 StringBuffer 可变类，速度更快 可变 线程安全，可以多线程操作字符串 Java String简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于String 是不可变的对象, 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，这样不仅效率低下，而且大量浪费有限的内存空间，所以经常改变内容的字符串最好不要用 String 。因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。 StringBuffer和StringBuilder当对字符串进行修改的时候，特别是字符串对象经常改变的情况下，需要使用 StringBuffer 和 StringBuilder 类。 与 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。 使用场景（1）如果要操作少量的数据用 String； （2）多线程操作字符串缓冲区下操作大量数据 StringBuffer； （3）单线程操作字符串缓冲区下操作大量数据 StringBuilder。 实战String常量与String变量的”+”操作比较12345678910111213141516171819202122public class str &#123; public static void main(String[] args)&#123; String str = &quot;&quot;; long beginTime = System.currentTimeMillis(); for(int i=0;i&lt;1000000;i++)&#123; str = &quot;Heart&quot; + &quot;Raid&quot;; &#125; long endTime = System.currentTimeMillis(); System.out.println(endTime - beginTime); String s1 = &quot;Heart&quot;; String s2 = &quot;Raid&quot;; long beginTime1 = System.currentTimeMillis(); for(int i=0;i&lt;1000000;i++)&#123; str = s1 + s2; &#125; long endTime1=System.currentTimeMillis(); System.out.println(endTime1 - beginTime1); &#125;&#125; 结果: String常量的连接 稍优于String变量的连接 原因： 测试一中， &quot;Heart&quot; + &quot;Raid&quot;在编译阶段就已经连接起来，形成了一个字符串常量，并指向队中的拘留字符对象。运行时，只需要将&quot;HeartRaid&quot;指向的字符串对象地址取出100W次，存放在局部变量str中。 测试二中，局部变量s1，s2存放的是不同字符串对象的地址，然后会通过下列三个步骤完成 +连接： StringBuilder temp = new StringBuilder(s1); temp.append(s2); str = temp.toString(); 我们发现，虽然在中间的时候也用到了append()方法，但是在开始和结束的时候分别创建了StringBuilder和String对象。可想而知：调用1W次，是不是就创建了100W次这两种对象呢？不划算。 String对象的”累+”连接操作与StringBuffer对象的append()累和连接操作比较12345678910111213141516171819202122public class str &#123; public static void main(String[] args)&#123; String s1 = &quot;Heart&quot; ; String s = &quot;&quot;; long beginTime = System.currentTimeMillis(); for(int i=0;i&lt;100000;i++)&#123; s= s + s1; &#125; long endTime = System.currentTimeMillis(); System.out.println(endTime - beginTime); String s2 = &quot;Heart&quot;; StringBuffer sb = new StringBuffer(); long beginTime1 = System.currentTimeMillis(); for(int i=0;i&lt;100000;i++)&#123; sb.append(s2); &#125; long endTime1=System.currentTimeMillis(); System.out.println(endTime1 - beginTime1); &#125;&#125; 结果：后者远小于前者 原因： 测试① 中的s=s+s1，JVM会利用首先创建一个StringBuilder，并利用append方法完成s和s1所指向的字符串对象值的合并操作，接着调用StringBuilder的 toString()方法在堆中创建一个新的String对象，其值为刚才字符串的合并结果。而局部变量s指向了新创建的String对象。 StringBuilder temp = new StringBuilder(s); temp.append(s1); s = temp.toString(); 因为String对象中的value[]是不能改变的，每一次合并后字符串值都需要创建一个新的String对象来存放。循环1W次自然需要创建1W个String对象和1W个StringBuilder对象，效率低就可想而知了。 测试②中sb.append(s1);只需要将自己的value[]数组不停的扩大来存放s2即可。循环过程中无需在堆中创建任何新的对象。效率高就不足为奇了. String与StringBuilder的相互转换123456789101112String s=&quot;hellowork&quot;;StringBuilder sb = new StringBuilder(s);//使用构造方法转换System.out.println(s);System.out.println(sb);StringBuilder sbb = new StringBuilder();sbb.append(&quot;hello&quot;).append(&quot;work&quot;);String ss = sb.toString();//使用toString方法转换System.out.println(sbb);System.out.println(ss); StringBuilder实现数组元素按格式实现拼接123456789101112131415StringBuilder sb = new StringBuilder(); char[] arr = &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;&#125;; sb.append(&quot;[&quot;); //遍历数组 for(int i = 0; i &lt; arr.length; i++) &#123; if(i == arr.length - 1) &#123; sb.append(arr[i]); &#125;else &#123; sb.append(arr[i]).append(&quot;,&quot;); &#125; &#125; sb.append(&quot;]&quot;); String s = sb.toString(); System.out.println(s); https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"String","slug":"String","permalink":"http://233hsysweb.ml/tags/String/"},{"name":"StringBuffer","slug":"StringBuffer","permalink":"http://233hsysweb.ml/tags/StringBuffer/"},{"name":"StringBuilder","slug":"StringBuilder","permalink":"http://233hsysweb.ml/tags/StringBuilder/"}],"author":"huanshi2"},{"title":"java优先队列","slug":"java优先队列","date":"2020-07-22T12:13:00.000Z","updated":"2020-07-22T12:13:00.000Z","comments":true,"path":"2020/07/22/java优先队列/","link":"","permalink":"http://233hsysweb.ml/2020/07/22/java%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/","excerpt":"实际上是一个堆，不指定Comparator时默认为最小堆。也可以根据Comparator来设置大根堆还是小根堆。 默认情况下，队列的头是按照指定排序方式的最小元素。如果多个元素都是最小值，则头是其中一个。 新建对象时可以指定初始容量，有自动扩容机制。","text":"实际上是一个堆，不指定Comparator时默认为最小堆。也可以根据Comparator来设置大根堆还是小根堆。 默认情况下，队列的头是按照指定排序方式的最小元素。如果多个元素都是最小值，则头是其中一个。 新建对象时可以指定初始容量，有自动扩容机制。 特点 注意1：该队列是用数组实现，但是数组大小可以动态增加，容量无限。 注意2：队列的实现不是同步的。不是线程安全的。如果多个线程中的任意线程从结构上修改了列表， 则这些线程不应同时访问 PriorityQueue实例。保证线程安全可以使用PriorityBlockingQueue 类。 注意3：不允许使用 null 元素。 注意4：插入方法（offer()、poll()、remove() 、add() 方法）时间复杂度为O(log(n)) ；remove(Object) 和 contains(Object) 时间复杂度为O(n)；检索方法（peek、element 和 size）时间复杂度为常量。 注意5：方法iterator()中提供的迭代器并不保证以有序的方式遍历优先级队列中的元素。（原因可参考PriorityQueue的内部实现）如果需要按顺序遍历，可用Arrays.sort(pq.toArray())。 注意6：可以在构造函数中指定如何排序。如：PriorityQueue()使用默认的初始容量（11）创建一个 PriorityQueue，并根据其自然顺序来排序其元素（使用 Comparable）。PriorityQueue(int initialCapacity) 使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序来排序其元素（使用 Comparable）。PriorityQueue(int initialCapacity, Comparator&lt;? super E&gt; comparator) 使用指定的初始容量创建一个 PriorityQueue，并根据指定的比较器comparator来排序其元素。 注意7：此类及其迭代器实现了 Collection 和 Iterator 接口的所有可选方法。 PriorityQueue对元素采用的是堆排序，头是按指定排序方式的最小元素。堆排序只能保证根是最大（最小），整个堆并不是有序的。方法iterator()中提供的迭代器可能只是对整个数组的依次遍历。也就只能保证数组的第一个元素是最小的。 小根堆标准写法 123456PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o1.compareTo(o2); &#125;&#125;); 标准写法2 1234PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;(Comparator&lt;Integer&gt;() &#123; public int compare(Integer e1, Integer e2) &#123; return e1 - e2; &#125;&#125;); 简化写法Queue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(k, (v1,v2) -&gt; v1 - v2); 示例,求最大的k个数; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class topk &#123; public static int[] getLeastNumbers(int[] arr, int k) &#123; if (k == 0 || arr.length == 0) &#123; return new int[0]; &#125; // 使用一个最大堆（大顶堆） // Java 的 PriorityQueue 默认是小顶堆，添加 comparator 参数使其变成最大堆 PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o1.compareTo(o2); &#125; &#125;); //Queue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(k, (v1,v2) -&gt; v1 - v2); for (int e : arr) &#123; // 当前数字大于堆顶元素才会入堆 if (heap.isEmpty() || heap.size() &lt; k || e &gt; heap.peek()) &#123; heap.offer(e); &#125; if (heap.size() &gt; k) &#123; heap.poll(); // 删除堆顶最大元素 &#125; &#125; // 将堆中的元素存入数组 int[] res = new int[heap.size()]; int j = 0; for (int e : heap) &#123; res[j++] = e; &#125; return res; &#125; public static void main(String[] args) &#123; int[] arr = &#123;4,2,3,8,5,7,1,6&#125;; int[] a = getLeastNumbers(arr,3); for (int i : a)&#123; System.out.println(i); &#125; &#125;&#125; 大根堆标准写法 123456PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o2.compareTo(o1); &#125; &#125;); 简化写法 Queue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(k, (v1,v2) -&gt; v2 - v1); 示例：求最小的k个数 12345678910111213141516171819202122232425262728293031323334353637383940414243public class topk &#123; public static int[] getLeastNumbers(int[] arr, int k) &#123; if (k == 0 || arr.length == 0) &#123; return new int[0]; &#125; // 使用一个最大堆（大顶堆） // Java 的 PriorityQueue 默认是小顶堆，添加 comparator 参数使其变成最大堆 PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o2.compareTo(o1); &#125; &#125;); //Queue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(k, (v1,v2) -&gt; v1 - v2); for (int e : arr) &#123; // 当前数字小于堆顶元素才会入堆 if (heap.isEmpty() || heap.size() &lt; k || e &lt; heap.peek()) &#123; heap.offer(e); &#125; if (heap.size() &gt; k) &#123; heap.poll(); // 删除堆顶最大元素 &#125; &#125; // 将堆中的元素存入数组 int[] res = new int[heap.size()]; int j = 0; for (int e : heap) &#123; res[j++] = e; &#125; return res; &#125; public static void main(String[] args) &#123; int[] arr = &#123;4,2,3,8,5,7,1,6&#125;; int[] a = getLeastNumbers(arr,3); for (int i : a)&#123; System.out.println(i); &#125; &#125;&#125; 最后123456789101112131415161718192021222324252627282930public static void main(String[] args) &#123; PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;Integer&gt;() &#123; @Override public int compare(Integer o1, Integer o2) &#123; return o1.compareTo(o2); &#125; &#125;); heap.offer(3); heap.offer(1); heap.offer(2); heap.offer(0); heap.offer(5); heap.peek(); for (int i : heap)&#123; System.out.print(i); &#125; System.out.print(&quot;----------&quot;); heap.poll(); for (int i : heap)&#123; System.out.print(i); &#125; System.out.print(&quot;----------&quot;); heap.poll(); for (int i : heap)&#123; System.out.print(i); &#125; 由以上代码可知，小根堆在堆顶元素出栈之后，堆还会自己调整结构，保证小根堆的堆顶是最小值。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"},{"name":"优先队列","slug":"优先队列","permalink":"http://233hsysweb.ml/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"},{"name":"堆","slug":"堆","permalink":"http://233hsysweb.ml/tags/%E5%A0%86/"}],"author":"huanshi2"},{"title":"leetcode378 有序矩阵第K小元素","slug":"leetcode378-有序矩阵第K小元素","date":"2020-07-22T09:13:00.000Z","updated":"2020-07-22T09:13:00.000Z","comments":true,"path":"2020/07/22/leetcode378-有序矩阵第K小元素/","link":"","permalink":"http://233hsysweb.ml/2020/07/22/leetcode378-%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E7%AC%ACK%E5%B0%8F%E5%85%83%E7%B4%A0/","excerpt":"给定一个n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。请注意，它是排序后的第 k 小元素，而不是第 k 个不同的元素。","text":"给定一个n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第 k 小的元素。请注意，它是排序后的第 k 小元素，而不是第 k 个不同的元素。 直接排序1234567891011121314class Solution &#123; public int kthSmallest(int[][] matrix, int k) &#123; int rows = matrix.length, columns = matrix[0].length; int[] sorted = new int[rows * columns]; int index = 0; for (int[] row : matrix) &#123; for (int num : row) &#123; sorted[index++] = num; &#125; &#125; Arrays.sort(sorted); return sorted[k - 1]; &#125;&#125; 归并排序由题目给出的性质可知，这个矩阵的每一行均为一个有序数组。问题即转化为从这 n*n 个有序数组中找第 k大的数，可以想到利用归并排序的做法，归并到第 k 个数即可停止。 一般归并排序是两个数组归并，而本题是 n 个数组归并，所以需要用小根堆维护，以优化时间复杂度 参考 leetcode 23 合并K个排序链表 https://leetcode-cn.com/problems/merge-k-sorted-lists/ 123456789101112131415161718192021222324252627282930313233343536class Solution &#123; public int kthSmallest(int[][] matrix, int k) &#123; //优先队列，默认小根堆 PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;int[]&gt;(new Comparator&lt;int[]&gt;() &#123; public int compare(int[] a, int[] b) &#123; return a[0] - b[0]; &#125; &#125;); int n = matrix.length; //堆中存了数组每一行的第一个值，行数，和0 //排序序列为每一行的第一个值的小根堆序列 for (int i = 0; i &lt; n; i++) &#123; // new出来的int数组 第一位存的是值，第二位存的是行号，最后一列存的是列号 pq.offer(new int[]&#123;matrix[i][0], i, 0&#125;); &#125; //上面最小堆出队k-1次 for (int i = 0; i &lt; k - 1; i++) &#123; int[] now = pq.poll(); //如果数组没有遍历到最后一列 //往堆中添加当前堆中最小值的右边一位的值，行号，列号 //由于最小值出堆后，堆的结构会自动调整，堆顶的元素始终为最小值。 //下一次，出堆的一定是加入上一次最小值右边后，堆调整后的最小值 //出堆一次，选择一个大于刚才堆顶元素的值入堆 //搜索顺序是不确定的， //但是是根据当前最小值进行搜索的 if (now[2] != n - 1) &#123; pq.offer(new int[]&#123;matrix[now[1]][now[2] + 1], now[1], now[2] + 1&#125;); &#125; &#125; //栈顶元素就是第k小的元素 return pq.poll()[0]; &#125;&#125; 多个数组的优先队列写法和标准写法不太相同。 泛型参数为int[],比较的是数组的第一个元素，构造的是小根堆。 12345PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;int[]&gt;(new Comparator&lt;int[]&gt;() &#123; public int compare(int[] a, int[] b) &#123; return a[0] - b[0]; &#125; &#125;);","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"二分查找","slug":"二分查找","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}],"author":"huanshi2"},{"title":"java泛型","slug":"java泛型","date":"2020-07-22T06:44:00.000Z","updated":"2020-07-22T06:44:00.000Z","comments":true,"path":"2020/07/22/java泛型/","link":"","permalink":"http://233hsysweb.ml/2020/07/22/java%E6%B3%9B%E5%9E%8B/","excerpt":"泛型带来的好处在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。 那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。 泛型分类：泛型接口，泛型类，泛型方法 通过泛型可以定义类型安全的数据结构（类型安全），而无须使用实际的数据类型（可扩展）。这能够显著提高性能并得到更高质量的代码（高性能），因为您可以重用数据处理算法，而无须复制类型特定的代码（可重用）。","text":"泛型带来的好处在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。 那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。 泛型分类：泛型接口，泛型类，泛型方法 通过泛型可以定义类型安全的数据结构（类型安全），而无须使用实际的数据类型（可扩展）。这能够显著提高性能并得到更高质量的代码（高性能），因为您可以重用数据处理算法，而无须复制类型特定的代码（可重用）。 泛型接口：定义一个泛型接口： 12345package hs;public interface Gener&lt;T&gt; &#123; public T test();&#125; 实现这个泛型接口 123456789101112131415161718package hs;import java.util.Random;public class NumGener implements Gener&lt;Integer&gt; &#123; int[] ages = &#123;18, 19, 20&#125;; @Override public Integer text()&#123; Random rand = new Random(); return ages[rand.nextInt(3)]; &#125; public static void main(String[] args) &#123; NumGener age = new NumGener(); System.out.println(age.text()); &#125;&#125; 同理，把泛型参数改成String也是一样的。还可以把参数类型指定为一个自定义的对象。 12345678910111213141516171819202122232425262728293031323334353637383940414243package hs;class Man &#123; int age; float weight; String name; char sex; public void setName(String name) &#123; this.name = name; &#125; public void setAge(int age) &#123; this.age = age; &#125; public void setSex(char sex) &#123; this.sex = sex; &#125; public void setWeight(float weight) &#123; this.weight = weight; &#125;&#125;public class NumGener implements Gener&lt;Man&gt; &#123; @Override public Man text()&#123; Man man = new Man(); man.setAge(18); man.setName(&quot;xiaoming&quot;); man.setSex(&#x27;M&#x27;); man.setWeight(6565); return man; &#125; public static void main(String[] args) &#123; NumGener man = new NumGener(); System.out.println(man.text().name); System.out.println(man.text().age); System.out.println(man.text().sex); &#125;&#125; 泛型类 123456789101112131415161718192021222324252627package hs;public class Box&lt;T&gt; &#123; private T t; public void add(T t) &#123; this.t = t; &#125; public T get() &#123; return t; &#125; public static void main(String[] args) &#123; Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;(); Box&lt;String&gt; strBox = new Box&lt;String&gt;(); integerBox.add(new Integer(10)); strBox.add(new String(&quot;str&quot;)); System.out.printf(&quot;整型值为 : %d \\n\\n&quot;, integerBox.get()); System.out.printf(&quot;字符串为 : %s \\n&quot;, strBox.get()); &#125; &#125; 泛型方法1234567891011121314151617181920212223242526272829303132333435363738package hs;import java.util.ArrayList;import java.util.List;public class CommonSingle &#123; public static void printer(List&lt;?&gt; data) &#123;//普通的 System.out.print(data); &#125; public static void getUperNumber(List&lt;? extends Number&gt; data) &#123;//给通配符划分了范围 System.out.println(&quot;data :&quot; + data); &#125; public static void main(String[] args) &#123; List&lt;String&gt; name = new ArrayList&lt;String&gt;(); // List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;(); // List&lt;Number&gt; number = new ArrayList&lt;Number&gt;(); // name.add(&quot;icon&quot;); // age.add(18); // number.add(314); // CommonSingle.printer(name); // CommonSingle.printer(age); // CommonSingle.printer(number); List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;(); List&lt;Number&gt; number = new ArrayList&lt;Number&gt;(); name.add(&quot;icon&quot;); age.add(18); number.add(314); //CommonSingle.getUperNumber(name);//报错：因为S不在Number的范围内,Number 的参数列表为 Byte，Double, Float, Long, Short CommonSingle.getUperNumber(age); CommonSingle.getUperNumber(number); &#125;&#125; 泛型的通配符与上下界常用的T，E, K, V, ? 无界通配符 ？ 上界通配符 &lt;? extends E&gt; 下界通配符 &lt;? super E&gt; ? 和 T ？表示不确定的 java 类型 对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 ），表示可以持有任何类型T (type) 表示具体的一个java类型 K V (key value) 分别代表java键值中的Key Value E (element) 代表Element T和？的区别 ？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ： // 可以T t = operate(); // 不可以？car = operate();简单总结下： T 是一个确定的类型，通常用于泛型类和泛型方法的定义，？是一个不确定的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。 上界通配符 &lt;? extends E&gt;用 extends 关键字声明，表示参数化的类型可能是所指定的E类型，或者是此类型E的子类。 如果传入的参数不是E或者E的子类，编译不成功 泛型中可以使用E的方法 123456private &lt;K extends A, E extends B&gt; E test(K arg1, E arg2)&#123; E result = arg2; arg2.compareTo(arg1); //..... return result;&#125; 下界通配符 &lt; ? super E&gt;下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object参数类型中使用super表示这个泛型中的参数必须是E或者E的父类 12345678910111213141516171819202122232425262728293031323334353637383940package hs;import java.util.ArrayList;import java.util.List; class Fruit &#123;&#125;class Orange extends Fruit &#123;&#125;class Apple extends Fruit &#123;&#125;class Jonathan extends Apple &#123;&#125; public class CovariantArrays &#123; public static void main(String[] args) &#123; //规定上界，上界为Fruit 父类，表示参数化类型可能时T或者时T的子类 List&lt;? extends Apple&gt; flistTop = new ArrayList&lt;Jonathan&gt;(); flistTop.add(null); //add Fruit对象会报错 //父类不能add //flistTop.add(new Fruit()); Fruit fruit1 = flistTop.get(0); Apple app = flistTop.get(0); System.out.println(flistTop); //下界，下届为Apple，表示参数化类型是此类型的超类型（父类型），直至Object List&lt;? super Apple&gt; flistBottem = new ArrayList&lt;Fruit&gt;(); flistBottem.add(new Apple()); flistBottem.add(new Jonathan()); //add fruit 对象出错 //flistBottem.add(new Fruit()); flistBottem.add(new Jonathan()); System.out.println(flistBottem); System.out.println(flistBottem.get(0)); System.out.println(flistBottem.get(1)); //get Apple对象会报错 //Apple apple = flistBottem.get(0); &#125;&#125; https://www.cnblogs.com/1605-3QYL/p/12609999.htmlhttps://www.cnblogs.com/JokerShi/p/8117556.htmlhttps://www.cnblogs.com/minikobe/p/11547220.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"泛型","slug":"Java/泛型","permalink":"http://233hsysweb.ml/categories/Java/%E6%B3%9B%E5%9E%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"泛型","slug":"泛型","permalink":"http://233hsysweb.ml/tags/%E6%B3%9B%E5%9E%8B/"}],"author":"huanshi2"},{"title":"内部类和外部类之间的相互调用","slug":"内部类和外部类之间的相互调用","date":"2020-07-22T02:51:00.000Z","updated":"2020-07-22T02:51:00.000Z","comments":true,"path":"2020/07/22/内部类和外部类之间的相互调用/","link":"","permalink":"http://233hsysweb.ml/2020/07/22/%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E5%A4%96%E9%83%A8%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/","excerpt":"","text":"https://www.cnblogs.com/rgever/p/8902758.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"}],"author":"huanshi2"},{"title":"java多线程","slug":"java多线程","date":"2020-07-22T02:33:00.000Z","updated":"2020-07-22T02:33:00.000Z","comments":true,"path":"2020/07/22/java多线程/","link":"","permalink":"http://233hsysweb.ml/2020/07/22/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/","excerpt":"Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。 多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。 这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。 多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。","text":"Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。 多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。 这里定义和线程相关的另一个术语 - 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。 多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。 一个线程的生命周期线程是一个动态执行的过程，它也有一个从产生到死亡的过程。 下图显示了一个线程完整的生命周期。 新建状态（NEW）:使用 new 关键字和 Thread 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 start() 这个线程。 运行状态(RUNNABLE):运行状态，Java线程将操作系统中的就绪和运行两种状态笼统的称为”运行中”, 就绪状态:当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。 运行状态:如果就绪状态的线程获取 CPU 资源，就可以执行 run()，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。 阻塞状态:如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。 WAITING:等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断） 超时等待(TIME_WAITING):超时等待状态，该状态不同于WAITING, 它是可以指定的时间自行返回的 终止状态:一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态，表示当前线程已经执行完毕 一个线程在一个给定的时刻，线程只能处于其中一个状态. 线程的优先级每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。 Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。 默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。 具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。 创建一个线程Java 提供了三种创建线程的方法： 通过实现 Runnable 接口； 通过继承 Thread 类本身； 通过 Callable 和 Future 创建线程。 通过线程池Excutor创建（待更新） 线程的几个主要概念在多线程编程时，你需要了解以下几个概念： 线程同步 线程间通信 线程死锁 线程控制：挂起、停止和恢复","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"线程","slug":"线程","permalink":"http://233hsysweb.ml/tags/%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"leetcode 95 不同的二叉搜索树","slug":"leetcode-95-不同的二叉搜索树","date":"2020-07-21T13:05:00.000Z","updated":"2020-07-21T13:05:00.000Z","comments":true,"path":"2020/07/21/leetcode-95-不同的二叉搜索树/","link":"","permalink":"http://233hsysweb.ml/2020/07/21/leetcode-95-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"构建单棵二叉搜索树选择一个根节点，递归的构建根节点的左，右子树 在二叉搜索树中，根据二叉搜索树的特性，根节点选择中间的值。 123456789101112131415161718192021public TreeNode createBinaryTree(int n)&#123; return helper(1, n);&#125; public TreeNode helper(int start, int end)&#123; if(start &gt; end)&#123; return null; &#125; //选择父节点 int val = (start + end) / 2; //构建父节点 TreeNode root = new TreeNode(val); //递归地构建左右子节点 root.left = helper(start, val - 1); root.right = helper(val + 1 , end); return root;&#125; 构建多棵二叉树要构建多颗二叉树，问题就在于如何选择不同的根节点，以构建不同的树和子树。 在上面的代码中，在选择根结点的时候，可以这样改造 12345// 选择所有可能的根结点for(int i = start; i &lt;= end; i++)&#123; TreeNode root = new TreeNode(i); ...&#125; 但是如果按照上述递归函数的方法写，每次递归只能返回一颗树，我们需要的是多颗树，我们可以将不同的根结点装入List然后返回，实际上，上述代码可以改写成 12345678910111213141516171819202122public List&lt;TreeNode&gt; helper(int start, int end)&#123; List&lt;TreeNode&gt; list = new ArrayList&lt;&gt;(); if(start &gt; end)&#123; list.add(null); return list; &#125; for(int i = start; i &lt;= end; i++)&#123; TreeNode root = new TreeNode(i); int val = (start + end) / 2; TreeNode root = new TreeNode(val); root.left = helper(start, val - 1); root.right = helper(val + 1, end); // 装入所有根结点 list.add(root); &#125; return list;&#125; 很显然，现在问题变成了如何构建root的左右子树，我们抛开复杂的递归函数，只关心递归的返回值，每次选择根结点root，我们 递归构建左子树，并拿到左子树所有可能的根结点列表left 递归构建右子树，并拿到右子树所有可能的根结点列表right 这个时候我们有了左右子树列表，我们的左右子树都是各不相同的，因为根结点不同，我们如何通过左右子树列表构建出所有的以root为根的树呢？ 我们固定一个左孩子，遍历右子树列表，那么以当前为root根结点的树个数就为left.size() * right.size()个。 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public List&lt;TreeNode&gt; generateTrees(int n) &#123; if(n &lt; 1) return new ArrayList&lt;&gt;(); return helper(1, n); &#125; public List&lt;TreeNode&gt; helper(int start, int end)&#123; List&lt;TreeNode&gt; list = new ArrayList&lt;&gt;(); if(start &gt; end)&#123; // 如果当前子树为空，不加null行吗？ list.add(null); return list; &#125; for(int i = start; i &lt;= end; i++)&#123; // 想想为什么这行不能放在这里，而放在下面？ // TreeNode root = new TreeNode(i); // 因为要构建多个子树 List&lt;TreeNode&gt; leftnode = helper(start, i-1); List&lt;TreeNode&gt; rightnode = helper(i+1, end); // 固定左孩子，遍历右孩子 for(TreeNode l : leftnode)&#123; for(TreeNode r : rightnode)&#123; TreeNode root = new TreeNode(i); root.left = l; root.right = r; list.add(root); &#125; &#125; &#125; return list; &#125;&#125; 关于TreeNode root = new TreeNode(i)的放置的位置问题如果这行代码放置在注释的地方，会造成一个问题，就是以当前为root根结点的树个数就num = left.size() * right.size() &gt; 1时，num棵子树会共用这个root结点，在下面两层for循环中，root的左右子树一直在更新，如果每次不新建一个root，就会导致num个root为根节点的树都相同。 关于如果当前子树为空，不加null行不行的问题显然，如果一颗树的左子树为空，右子树不为空，要正确构建所有树，依赖于对左右子树列表的遍历，也就是上述代码两层for循环的地方，如果其中一个列表为空，那么循环都将无法进行。 https://leetcode-cn.com/problems/unique-binary-search-trees-ii/solution/cong-gou-jian-dan-ke-shu-dao-gou-jian-suo-you-shu-/来源：力扣（LeetCode）","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"二叉搜索树","slug":"二叉搜索树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"二分查找","slug":"二分查找","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}],"author":"huanshi2"},{"title":"hexo deploy error","slug":"git","date":"2020-07-21T07:46:00.000Z","updated":"2020-07-21T07:46:00.000Z","comments":true,"path":"2020/07/21/git/","link":"","permalink":"http://233hsysweb.ml/2020/07/21/git/","excerpt":"123456stderr: &#x27;(node:364) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated. (node:375) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated. fatal: could not parse HEAD error: refs/heads/master does not point to a valid object! Everything up-to-date&#x27;","text":"123456stderr: &#x27;(node:364) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated. (node:375) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated. fatal: could not parse HEAD error: refs/heads/master does not point to a valid object! Everything up-to-date&#x27; 解决办法： https://blog.csdn.net/zhanglongtumi/article/details/73526750 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118huanshi2@DESKTOP-VRNCVPP:~/blog/.deploy_git$ find .git/objects/ -type f -empty | xargs rmhuanshi2@DESKTOP-VRNCVPP:~/blog/.deploy_git$ git fetch -perror: refs/heads/master does not point to a valid object!error: refs/heads/master does not point to a valid object!error: refs/heads/master does not point to a valid object!error: refs/heads/master does not point to a valid object!remote: Enumerating objects: 6409, done.remote: Counting objects: 100% (6409/6409), done.remote: Compressing objects: 100% (1253/1253), done.remote: Total 10576 (delta 2905), reused 6150 (delta 2650), pack-reused 4167Receiving objects: 100% (10576/10576), 10.82 MiB | 390.00 KiB/s, done.Resolving deltas: 100% (4649/4649), done.From https://github.com/huanshi2/huanshi2.github.io * branch master -&gt; FETCH_HEADhuanshi2@DESKTOP-VRNCVPP:~/blog/.deploy_git$ git fsck --fullChecking object directories: 100% (256/256), done.Checking objects: 100% (18161/18161), done.dangling blob 3381364de58f04eee8efdcd30af72a69702199d5dangling blob 030483548db5960c2212abc0af641f48db038dc0dangling blob a904fde6f7c927d15b2621530fed5ebac9d8ad60dangling blob 0c86d895e8272f0cfff0bf21c63c8410a3804c96dangling blob b808656ad298f56ada6658f51702b6feabb5fb55dangling blob 4989d8388f4e1799a873314dd9c3ee6a0e613099dangling blob f08bccfd8fcefb9752240bb1a31ecbb23ee5752adangling blob 3390f4fd72597398fc9aa140a86b190f51367591dangling blob e99081c449c6a8e093beccb0535b0393864a8861dangling blob b592baf9c11a44efd0434ab724036fde98956a56dangling blob bf9258fb107fa9462fcce6e2363470deda4dae76dangling blob 5f9316ae6eb270a710b2feaddd1f3ec8b4d463c4dangling blob b2941486da94983f94ca42c5a5099b34964cf352dangling blob dd168ec0d93e60ebd3563f6ec53914b6df0c3681dangling blob 051c9c84edd6b337da118150d393f02394764c25dangling blob 4b1de08449a50165e1a7cac2487cee90f6279fafdangling blob 731dcf9d8a101c2d0e043fe491ca083a9cce69bcdangling blob 7f1ea8b321f836c6cf0e7fc656b5eb46e782bc2ddangling blob 3d9f7abd5d228fdb5e97e260b3edb68ab80c9c1bdangling blob 1da1cf2679ddddf9234b93919afda39896c76a3ddangling blob 38229c9e986452722cc2a667ed6b85a6781a9832dangling blob bda3d39f23a1c039cd5cee805752d5311500998ddangling blob 5fa42d503a809489df1cf8407a7c9f92f01ba9a7dangling blob 592645a1c1401012f28b170cd7720171ca143f5edangling blob 0fa7e5beccecb8db54a6d96b2f0b88780e3663d7dangling blob cca7f396dabd3ebe736fec335542e9a6090229d8dangling blob 14284d502960cc9e8814a82396ef9af9ce65670ddangling blob d8282cc7f54655590878f776ed93e61f8143079adangling blob 9929f503947570d62ef93a9553c82535775f64b9dangling blob 7eaa914a50f374cd0b30ce7be9ab9d3c9707fffcdangling blob 0a2d7d2fea6459cc2dad75044376ab5afee8aabcdangling blob 232f8143da057257432380955994c05f10dde9e9dangling blob d3af790a4071216ec90ac6c4912e7cc9773bcf3edangling blob efaf9624667fe4977a56e7601109a3f75d2d2883dangling blob 5db1d9aa77b1392476d68d655fb7f63210dd319fdangling blob 4132533838e439232692d170d19512b31a5a5254dangling blob ddb462cce81d38add00d1473964e8bded0545413dangling blob f8b5ec7dd7d172d286649d448fd81e5ac941825edangling blob 37b7e127238cadcdb2b92f6c5581efd2cfff10dfdangling blob e3376b5f67013570c0a303e557a0dba53c0dca67dangling blob 78b9dc85d2627dbc8ba49c63340762313e607595dangling blob 1c3ac378aace3752a460daf7eddcec9169a8fb1ddangling blob 1b3e140e26701cf7a68c693af853b54b03c835a7dangling blob 23c044e13b5194bb67e4b3dc9dbf38b23115d1f4dangling blob ebc06f1ee861693af3bef4d3884851759a78ea01dangling blob 37c14b8c37966e3641003abd599861308604088fdangling blob 59448b0659d2894e65163207c1b1ebe69c80fdb7dangling blob 9944907e68668b048c6020dd92a04fd999db8bf7dangling blob cdc7712ff784553d19e1cd81256dd15f609fdadadangling blob 50c8942217bddb43ccf6b6115b6969952d237962dangling blob 73cb66667d38e723a8de9a08342e8ed626ec886fdangling blob d54ba0a21499b037aabb044c9603322c916d71d5dangling blob 9dcc98edb385e042a3a3e29a687d9a78c80b8bd6dangling blob 16ceae81ff6bcc778d9260ea336896b84fc4f9e7dangling blob 97ced8c5d6176befb45a982abfc24dc24d4a1600dangling blob fcce1fd61dbc37bab08af3aa8b0fe77a98c74be8dangling blob 74d166e4b62015c64762335f9b9216d161c438c7dangling blob 8751dfb8b4130468940e9ec01f82937d42d3e888dangling blob 7bd2ff3d8e3e1135aacc7dd26d74d3081dddd402dangling blob 3d54d53bce11472ad43b09a354d7a609ab1d047ddangling blob c154833f9a03a24b55c8f944ddb33b8a792ee2cfdangling blob c4d542ad8503fcb0d460db66a949bc1aa6c9fc4fdangling blob 38d6967ed70c6a4c416eaa7425f45bdf2f928e48dangling blob 9656700f7ff12a9e6990f2737a465efd08dfc9b3dangling blob 5f57d74498dd2b3ec1432fda19016722dbe05e42dangling blob 68d761a245c0aa7b7f0c71d9c36f2c28e4e6fc52dangling blob 17d9a0703e41341421890a1632b977ee7950924adangling blob df59668b1936e943a2cba4f8adaaf0a483750b4edangling blob d4db40a3c7f0cd1233ba44c48a3e7c1d50f7ec8edangling blob 4bdd5eb6e5fd878d2a746ecd3bc1c828f7d28fc3dangling blob d05f50a3f8c94a33a299a69d3d5f6b3477176b1cdangling blob 3060ce815b8194104d3ff1012bc751ad1dffb87edangling blob 716119f982e40e374ee39d1402c22f5cc023fe9bdangling blob ef62995ec442331fe88d76179f82be6f5141dcb1dangling blob 3ee55b384fe968605a7bfd4fa75c884bb75b3376dangling tree 4665a28689fcea2f5663c714c042a3610384e19cdangling blob b165ac008489376dcece29176294f7de293a9fa1dangling blob 2ee6ffdd33a6bd9b405e43952e81ea9bd67cd060dangling blob bfe7cac6d898e81751c1bd4eb69234653673da4edangling blob 026ba8c4e00010085729507af74647f1b2f9d87edangling blob 5a6b30393fe44e82c921c7b2606322551bbe8032dangling blob 746b4cb7759fc08ffa8cdc6eb98767774c7399bcdangling blob 866b28c16658b8bba5b0b8f53edf8e7dc6f63e22dangling blob 29eca3420125525f0e4b3cd9da0b09ca3f5c5df3dangling blob c56c1a8e6c465a361d64aa7c06458b690b120c39dangling blob dc6efe7bace09250472e0076bacf87688cf6c5e6dangling blob eeee5f53403fca1b72776479cef409eaa91e5d90dangling blob 35712c388fbaf4a505ef9b739f82723b46a3e8b7dangling blob aaf4aa57f0d407e368e243024d4c043e45a9fbcbdangling blob 36f5b440134341d05a9de3c7128739bb1c3a6993dangling blob 7cf54d997e2c4dc0b08b3d17a24c34478549b786dangling tree 287670f0709127055cf12b31bafb9d98be3beca0dangling blob 5df7b68440951570b608cc1199d46a92f9c31d2edangling blob 06faa38425d252d958f27de0facd0613ceff4f9adangling blob 387a9e1083c0d71b8786384bed9c55d987d7d56edangling blob 4ffa81f46ffaad83b66fa07bf2b31a92accbbcaedangling blob 49fc39a18f4aa1e7ea5a4cd8acdb6f927174f2b3dangling blob f9fd49e5ac59d67c91048cf446a90e86bfe8de33huanshi2@DESKTOP-VRNCVPP:~/blog/.deploy_git$ git checkout .Updated 1 path from the index","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/categories/Hexo/"}],"tags":[{"name":"Error","slug":"Error","permalink":"http://233hsysweb.ml/tags/Error/"},{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/tags/Hexo/"},{"name":"Git","slug":"Git","permalink":"http://233hsysweb.ml/tags/Git/"}],"author":"huanshi2"},{"title":"java接口","slug":"java接口","date":"2020-07-21T07:11:00.000Z","updated":"2020-07-21T07:11:00.000Z","comments":true,"path":"2020/07/21/java接口/","link":"","permalink":"http://233hsysweb.ml/2020/07/21/java%E6%8E%A5%E5%8F%A3/","excerpt":"Java 接口接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。 接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。","text":"Java 接口接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。 接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。 除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。 接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。 接口与类相似点： 一个接口可以有多个方法。 接口文件保存在 .java 结尾的文件中，文件名使用接口名。 接口的字节码文件保存在 .class 结尾的文件中。 接口相应的字节码文件必须在与包名称相匹配的目录结构中。 接口与类的区别： 接口不能用于实例化对象。 接口没有构造方法。 接口中所有的方法必须是抽象方法。 接口不能包含成员变量，除了 static 和 final 变量。 接口不是被类继承了，而是要被类实现。 接口支持多继承。 接口特性 接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract（只能是 public abstract，其他修饰符都会报错）。 接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量（并且只能是 public，用 private 修饰会报编译错误）。 接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。抽象类和接口的区别 抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。 接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。 一个类只能继承一个抽象类，而一个类却可以实现多个接口。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"接口","slug":"接口","permalink":"http://233hsysweb.ml/tags/%E6%8E%A5%E5%8F%A3/"}],"author":"huanshi2"},{"title":"字节跳动7.17面试","slug":"字节跳动7-17面试","date":"2020-07-17T09:00:00.000Z","updated":"2020-07-17T09:00:00.000Z","comments":true,"path":"2020/07/17/字节跳动7-17面试/","link":"","permalink":"http://233hsysweb.ml/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A87-17%E9%9D%A2%E8%AF%95/","excerpt":"","text":"字节跳动面试7.17 自我介绍 哪个项目比较印象深刻 项目难点：我说了两个 你对面向对象的理解 说一下继承，封装，多态 常用的设计模式？简单介绍一下你知道的几个？ hashmap 一次put的过程 哈希碰撞是什么？ 哈希碰撞可以避免吗？ 说一下快速排序的思想 快速排序的复杂度为什么是nlogn 算法题，{1,2,3,2,2,2,5,4,2} 类似数组，求个数多于数组长度一半的那个值，有则输出该值，没有则输出0","categories":[{"name":"面试","slug":"面试","permalink":"http://233hsysweb.ml/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[],"author":"huanshi2"},{"title":"常用的加密算法","slug":"常用的加密算法","date":"2020-07-17T07:03:00.000Z","updated":"2020-07-17T07:03:00.000Z","comments":true,"path":"2020/07/17/常用的加密算法/","link":"","permalink":"http://233hsysweb.ml/2020/07/17/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/","excerpt":"","text":"","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"},{"name":"加密算法","slug":"加密算法","permalink":"http://233hsysweb.ml/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"}],"author":"huanshi2"},{"title":"jdbc实现事务","slug":"jdbc实现事务","date":"2020-07-17T06:49:00.000Z","updated":"2020-07-17T06:49:00.000Z","comments":true,"path":"2020/07/17/jdbc实现事务/","link":"","permalink":"http://233hsysweb.ml/2020/07/17/jdbc%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1/","excerpt":"","text":"https://www.cnblogs.com/storml/p/11393836.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"jdbc","slug":"jdbc","permalink":"http://233hsysweb.ml/tags/jdbc/"}],"author":"huanshi2"},{"title":" 并发与并行","slug":"java多线程概念","date":"2020-07-16T02:36:00.000Z","updated":"2020-07-16T02:36:00.000Z","comments":true,"path":"2020/07/16/java多线程概念/","link":"","permalink":"http://233hsysweb.ml/2020/07/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/","excerpt":"并发和并行并发并发： 操作系统中，指一个时间端内有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。 并发不是真正意义上的“同时进行”，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。如：打游戏和听音乐两件事情在同一个时间段内都是在同一台电脑上完成了从开始到结束的动作。那么，就可以说听音乐和打游戏是并发的。","text":"并发和并行并发并发： 操作系统中，指一个时间端内有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行。 并发不是真正意义上的“同时进行”，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。如：打游戏和听音乐两件事情在同一个时间段内都是在同一台电脑上完成了从开始到结束的动作。那么，就可以说听音乐和打游戏是并发的。 并行并行（Parallel），当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。 决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。 区别如下图所示： 所以，并发是在一段时间内宏观上多个程序同时运行，并行是在某一时刻，真正有多个程序在运行。 并行和并发的区别： 并发，指的是多个事情，在同一时间段内同时发生了。并行，指的是多个事情，在同一时间点上同时发生了。 并发的多个任务之间是互相抢占资源的。并行的多个任务之间是不互相抢占资源的、 只有在多CPU或者一个CPU多核的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。 https://www.cnblogs.com/xc-chejj/p/10813692.html","categories":[{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"author":"huanshi2"},{"title":"wsl2文件系统性能","slug":"未收录","date":"2020-07-15T12:53:00.000Z","updated":"2020-07-15T12:53:00.000Z","comments":true,"path":"2020/07/15/未收录/","link":"","permalink":"http://233hsysweb.ml/2020/07/15/%E6%9C%AA%E6%94%B6%E5%BD%95/","excerpt":"wsl2 跨OS的文件系统较差，搭建博客可以考虑把博客文件全部放在wsl2的根目录下：\\\\wsl$\\Ubuntu-20.04\\home\\huanshi2 感觉速度快了三四倍","text":"wsl2 跨OS的文件系统较差，搭建博客可以考虑把博客文件全部放在wsl2的根目录下：\\\\wsl$\\Ubuntu-20.04\\home\\huanshi2 感觉速度快了三四倍 https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions","categories":[{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/categories/Linux/"},{"name":"Wsl2","slug":"Linux/Wsl2","permalink":"http://233hsysweb.ml/categories/Linux/Wsl2/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/tags/Linux/"},{"name":"wsl2","slug":"wsl2","permalink":"http://233hsysweb.ml/tags/wsl2/"}],"author":"huanshi2"},{"title":"java集合","slug":"java集合","date":"2020-07-14T01:40:00.000Z","updated":"2020-07-14T01:40:00.000Z","comments":true,"path":"2020/07/14/java集合/","link":"","permalink":"http://233hsysweb.ml/2020/07/14/java%E9%9B%86%E5%90%88/","excerpt":"","text":"ArrayListArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。 ArrayList是List使用中最常用的实现类，它的查询速度快，效率高，但增删慢，线程不安全。 ArrayList 继承了 AbstractList ，并实现了 List 接口 实现原理ArrayList底层实现采用的数据结构是数组，并且数组默认大小为10 123List list = new ArrayList(); //没有指定数组大小，使用默认值（默认大小是10）List list = new ArrayList(10); // 指定数组大小为10，传如的参数便是数组的大小，传入为10时，跟默认值相同，所以是等同的 扩容机制jdk1.8的扩容算法： newCapacity = oldCapacity + ( oldCapacity &gt;&gt; 1 ); // oldCapacity &gt;&gt; 2 移位运算，此处相当于oldCapacity除以2，但是 &gt;&gt; 这种写法更加高效 VectorVector的底层也是通过数组实现的，默认大小也是10。主要特点：查询快，增删慢 , 线程安全，但是效率低 实现原理创建对象与ArrayList类似，但有一点不同，它可以设置扩容是容量增长大小。 扩容机制jdk1.8的扩容算法： 1newCapacity = oldCapacity + ( ( capacityIncrement &gt; 0 ) ? capacityIncrement : oldCapacity ); LinkedListLinkedList底层是一个双向链表，它增删快，效率高，但是查询慢，线程不安全 LinkedList 继承了 AbstractSequentialList 类。 LinkedList 实现了 Queue 接口，可作为队列使用。 LinkedList 实现了 List 接口，可进行列表的相关操作。 LinkedList 实现了 Deque 接口，可作为队列使用。 LinkedList 实现了 Cloneable 接口，可实现克隆。 LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。 扩容机制由于它的底层实现是链表，所以没有容量大小的定义，只有上个节点，当前节点，下个节点，每个节点都有一个上级节点和一个下级节点。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"集合","slug":"集合","permalink":"http://233hsysweb.ml/tags/%E9%9B%86%E5%90%88/"},{"name":"Vector","slug":"Vector","permalink":"http://233hsysweb.ml/tags/Vector/"},{"name":"LinkedList","slug":"LinkedList","permalink":"http://233hsysweb.ml/tags/LinkedList/"},{"name":"ArrayList","slug":"ArrayList","permalink":"http://233hsysweb.ml/tags/ArrayList/"}],"author":"huanshi2"},{"title":"二叉树的遍历","slug":"二叉树的遍历","date":"2020-07-13T07:54:00.000Z","updated":"2020-07-13T07:54:00.000Z","comments":true,"path":"2020/07/13/二叉树的遍历/","link":"","permalink":"http://233hsysweb.ml/2020/07/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/","excerpt":"二叉树的先序遍历，中序遍历，后序遍历，层次遍历,分层输出的层次遍历，递归与非递归方法","text":"二叉树的先序遍历，中序遍历，后序遍历，层次遍历,分层输出的层次遍历，递归与非递归方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303package hs;import java.util.*;public class erchashu &#123; public static void visit(TreeNode p) &#123; System.out.print(p.val + &quot; &quot;); &#125; public static void main(String[] args)&#123; TreeNode a = new TreeNode(1); TreeNode b = new TreeNode(2); TreeNode c = new TreeNode(3); TreeNode d = new TreeNode(4); TreeNode e = new TreeNode(5); TreeNode f = new TreeNode(6); TreeNode g = new TreeNode(7); a.left = b; a.right = c; b.right = d; c.left = e; c.right = f; f.left = g; System.out.println(&quot;递归的先序遍历&quot;); recursivePreOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;递归的中序遍历&quot;); recursiveInOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;递归的后序遍历&quot;); recursiveLatOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的先序遍历&quot;); feidiguipreOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的中序遍历&quot;); feidiguiinOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的后序遍历&quot;); feidiguilatOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的后序遍历-1&quot;); feidiguilatOrder1(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的层次遍历-1&quot;); iterativeLevelOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的分层输出的层次遍历&quot;); iterlevelOrder(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;非递归的分层输出的层次遍历-1&quot;); iterlevelOrder1(a); System.out.println(&quot;\\n------------&quot;); System.out.println(&quot;分层份数组输出&quot;); List&lt;List&lt;Integer&gt;&gt; list = levelOrder(a); System.out.println(list); &#125; //**********递归的先序遍历********** public static void recursivePreOrder(TreeNode p) &#123; if (p == null) return; visit(p); recursivePreOrder(p.left); recursivePreOrder(p.right); &#125; //**********递归的中序遍历********** public static void recursiveInOrder(TreeNode p) &#123; if (p == null) return; recursiveInOrder(p.left); visit(p); recursiveInOrder(p.right); &#125; //****递归的后序遍历******* public static void recursiveLatOrder(TreeNode p)&#123; if(p == null)&#123; return;&#125; recursiveLatOrder(p.left); recursiveLatOrder(p.right); visit(p); &#125; //***非递归的先序遍历****** //手算的思想，找到最左下方的，然后向上再向访问右边的 public static void feidiguipreOrder(TreeNode p)&#123; if(p == null) return; Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;(); while(!st.empty() || p != null)&#123; while(p != null)&#123; //先序遍历父节点 visit(p); //把父节点存下来 st.push(p); //访问父节点的最左边节点 p = p.left; &#125; //如果访问到叶子节点了，再返回最后一个父节点（该节点为栈顶元素） p = st.pop(); //访问父节点的右节点 p = p.right; &#125; &#125; //***非递归的中序遍历****** //手算的思想，找到最左下方的，然后向上再向访问右边的 public static void feidiguiinOrder(TreeNode p)&#123; if(p == null) return; Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;(); while(!st.empty() || p != null)&#123; while(p != null)&#123; //先序遍历父节点 //把父节点存下来 st.push(p); //访问父节点的最左边节点 p = p.left; &#125; //如果访问到叶子节点了，再返回最后一个父节点（该节点为栈顶元素） p = st.pop(); //中序遍历父节点 visit(p); //访问父节点的右节点 p = p.right; &#125; &#125; //***非递归的后序遍历****** //手算的思想，找到最左下方的，然后向上再向访问右边的 public static void feidiguilatOrder(TreeNode p)&#123; if(p == null) return; Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;(); TreeNode prev = p; while(!st.empty() || p != null)&#123; while(p != null)&#123; //先序遍历父节点 //把父节点存下来 st.push(p); //访问父节点的最左边节点 p = p.left; &#125; //搜索到最左边的节点之后，访问最后一个父节点（栈顶元素）的右节点 p = st.peek().right; //如果栈顶元素的右节点为空或者已经visit，则按顺序访问栈顶节点 if(p == null || p == prev)&#123; p = st.pop(); visit(p); prev = p; p = null; &#125; //右边的叶子节点会先入栈再出栈 &#125; &#125; //**********非递归的后序遍历********** //双栈法，易于理解 public static void feidiguilatOrder1(TreeNode p) &#123; if (p == null) return; Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;(); Stack&lt;TreeNode&gt; result = new Stack&lt;TreeNode&gt;(); while (!stack.empty() || p != null) &#123; while (p != null) &#123; //父节点存入栈中 stack.push(p); result.push(p); //访问父节点的右节点 p = p.right; &#125; //上一个while访问到二叉树的最右节点， //if语句访问当前最右节点p的左节点， //并在下一轮循环中把该节点存入栈中 if (!stack.empty()) p = stack.pop().left; &#125; //最后从栈中取出所有节点 while (!result.empty()) &#123; p = result.pop(); visit(p); &#125; &#125; //**********非递归的层次遍历********** public static void iterativeLevelOrder(TreeNode p) &#123; if (p == null) return; LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;(); queue.offer(p); while (!queue.isEmpty()) &#123; p = queue.poll(); if (p.left != null) queue.offer(p.left); if (p.right != null) queue.offer(p.right); visit(p); &#125; &#125; //****非递归的分层输出的层次遍历*** public static void iterlevelOrder(TreeNode p)&#123; if(p == null)&#123;return;&#125; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;(); queue.offer(p); while(!queue.isEmpty())&#123; int levelNum = queue.size(); System.out.println(&quot;--&quot;); for(int i = 0; i &lt; levelNum; i++)&#123; p = queue.poll(); if(p.left != null) queue.offer(p.left); if(p.right != null) queue.offer(p.right); visit(p); &#125; &#125; &#125; //***非递归的分层输出的层次病历-1**/ //维护两个int，代表上一层和下一层的节点数量， //上一层遍历结束之后lineUp = lineDown; lineDown = 0; public static void iterlevelOrder1(TreeNode p)&#123; if(p == null)&#123;return;&#125; LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); int lineUp = 1 ; int lineDown = 0; queue.offer(p); while(!queue.isEmpty())&#123; p = queue.poll(); visit(p); if(p.left != null)&#123; queue.offer(p.left); lineDown++; &#125; if(p.right != null)&#123; queue.offer(p.right); lineDown++; &#125; if(--lineUp == 0)&#123; lineUp = lineDown; lineDown = 0; System.out.println(); &#125; &#125; &#125; //****递归的层次病历访问**** public static void diguilevelOrder(TreeNode p)&#123; if(p == null)&#123;return;&#125; int depth = maxDepth(p); for (int i = 1; i &lt;= depth; i++) visitNodeAtDepth(p, i); &#125; // public static void visitNodeAtDepth(TreeNode p, int depth) &#123; if (p == null || depth &lt; 1) return; //因为要按顺序访问（打印），所以要规定必须到某一层才能visit if (depth == 1) &#123; visit(p); return; &#125; //每次都要遍历depth之上的所有层 visitNodeAtDepth(p.left, depth - 1); visitNodeAtDepth(p.right, depth - 1); &#125; //递归方法得到树的层数 public static int maxDepth(TreeNode root) &#123; if (root == null) return 0; return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1; &#125; //层次遍历 public static List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode p) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;(); queue.offer(p); List&lt;List&lt;Integer&gt;&gt; lists = new ArrayList&lt;&gt;(); while(!queue.isEmpty())&#123; int levelNum = queue.size(); List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; levelNum; i++)&#123; p = queue.poll(); if(p.left != null) queue.offer(p.left); if(p.right != null) queue.offer(p.right); list.add(p.val); &#125; lists.add(list); &#125; return lists; &#125;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"二叉树","slug":"二叉树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"}],"author":"huanshi2"},{"title":"java关键字volatile和synchronized(2)","slug":"java关键字volatile和synchronized-2","date":"2020-07-13T07:28:00.000Z","updated":"2020-07-13T07:28:00.000Z","comments":true,"path":"2020/07/13/java关键字volatile和synchronized-2/","link":"","permalink":"http://233hsysweb.ml/2020/07/13/java%E5%85%B3%E9%94%AE%E5%AD%97volatile%E5%92%8Csynchronized-2/","excerpt":"","text":"https://zhuanlan.zhihu.com/p/42497046https://zhuanlan.zhihu.com/p/111229417 synchronized 是独占锁/排他锁（就是有你没我的意思），同时只能有一个线程调用 add10KCount 方法，其他调用线程会被阻塞。所以三行 CPU 指令都是同一个线程执行完之后别的线程才能继续执行，这就是通常说说的 原子性 （线程执行多条指令不被中断） 但 volatile 是非阻塞算法（也就是不排他），当遇到三行 CPU 指令自然就不能保证别的线程不插足了，这就是通常所说的，volatile 能保证内存可见性，但是不能保证原子性","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"Synchronized","slug":"Synchronized","permalink":"http://233hsysweb.ml/tags/Synchronized/"}],"author":"huanshi2"},{"title":"java关键字volatile和synchronzied（1）","slug":"java关键字volatile和synchronzied","date":"2020-07-09T13:28:00.000Z","updated":"2020-07-09T13:28:00.000Z","comments":true,"path":"2020/07/09/java关键字volatile和synchronzied/","link":"","permalink":"http://233hsysweb.ml/2020/07/09/java%E5%85%B3%E9%94%AE%E5%AD%97volatile%E5%92%8Csynchronzied/","excerpt":"Java内存模型","text":"Java内存模型 Java内存模型(java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节。 首先介绍几个概念 名词 解释 共享变量 如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量。 原子性 一个操作/一系列操作要么全部执行，要么都不执行 可见性 一个线程对共享变量值的修改，能够及时地被其他线程看到 有序性 程序的运行顺序要和程序的逻辑顺序一致，可能实际情况是计算机考虑到性能的因素执行顺序有所不同，但是结果肯定会和逻辑顺序一致 共享变量可见性实现的原理 线程1对共享变量的修改要想被线程2及时看到，必须要经过如下两个步骤 把工作内存1中更新过的共享变量刷新到主内存中 将主内存中最新的共享变量的值更新到工作内存2中 其中，线程对共享变量的操作，遵循一下两条规则 线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写 不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成 可见性要实现共享变量的可见性，必须保证两点： 线程修改后的共享变量值能够及时从工作内存刷新到主内存中其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中 可见性的实现方式： synchronized volatile volatilevolatile是java虚拟机提供的最轻量级的同步机制。当一个变量定义为volatile之后，它将具备两种特性：1、保证此变量对所有线程的可见性，即当一个线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。2、禁止指令重排序 对于volatile的作用，《Java核心技术卷》是这么说的： 为实例域的访问提供了一种免锁机制，不提供原子性。 首先，实例域说明它是用来修饰域的，如下： 1private volatile boolean isNum = false; 其次，对实例域的访问提供了免锁机制说明volatile具有可见性；最后的重点就是没有原子性。《Java编程思想》中提到： 所有的基础类型（除了double和long）的基础操作（读取和写入）都具有原子性，经过volatile修饰的long和double在基础操作中也会具有原子性。 volatile 实现可见性volatile关键字 能够保证volatile变量的可见性 不能保证volatile变量复合操作的原子性 volatile如何实现内存可见性：深入来说：通过加入内存屏障和禁止重排序优化来实现的. 编译器在生成字节码时，会在volatile指令序列中插入内存屏障来禁止特定类型的处理器重排序。 对volatile变量执行写操作时，会在写操作后加入一条store屏障指令 对volatile变量执行读操作时，会在读操作前加入一条load屏障指令 通俗地讲：volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存，这样任何时刻，不同的线程总能看到该变量的最新值。 线程写volatile变量的过程： 改变线程工作内存中volatile变量副本的值 将改变后的副本的值从工作内存刷新到主内存 线程读volatile变量的过程： 从主内存中读取volatile变量的最新值到线程的工作内存中 从工作内存中读取volatile变量的副本 volatile适用场合要在多线程中安全的使用volatile变量，必须同时满足： 对变量的写入操作不依赖其当前值 不满足：number++、count = count*5等 满足：boolean变量、记录温度变化的变量等 该变量没有包含在具有其他变量的不变式中 不满足：low&lt;up 下图是volatile不能实现原子性的示例： synchronized在Java中，所有实例对象都自动含有单一的锁（也称监视器）。所以，当使用synchronized修饰的方法的时候，该方法会自动给实例加锁，这个时候，其他含synchronized的方法必须等到该方法调用结束并释放锁之后，该方法才能够被调用。简单来说，就是同一时间内，只能有一个线程访问 synchronized修饰的方法或者代码块啊，保证了原子性、有序性和可视性。 synchronized实现可见性： 原子性(同步) 可见性 JMM关于synchronized的两条规定： 线程解锁前，必须把共享变量的最新值刷新到主内存中 线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时，需要从主内存中重新读取最新的值(注意：加锁与解锁需要是同一把锁) 注意：线程解锁前对共享变量的修改在下次加锁时对其他线程可见 线程执行互斥代码的过程： 获得互斥锁 清空工作内存 从主内存拷贝变量的最新副本到工作的内存 执行代码 将更改后的共享变量的值刷新到主内存 释放互斥锁 关键字的使用volatile 12345678// 对一个域加上volatile，域可以确保可视性和有序性private volatile int b;// 对long和double加上volatile，可以使如下的读取和写入具有原子性。private volatile long a;public long getA()&#123; return a;&#125;public void setA(A a)&#123; this.a = a;&#125; synchronized: 12345678910111213141516171819202122232425262728public class Test &#123; private int a; public static int b； //对象锁 public synchronized void addOne() &#123; a = a + 1; &#125; public void addTwo() &#123; synchronized (this) &#123; a = a + 2; &#125; &#125; //类锁 public void addThree() &#123; synchronized (Test.class) &#123; b = b + 3; &#125; &#125; public synchronized static void addFour() &#123; b = b + 4; &#125;&#125; 根据以上代码，我们看到synchronized的使用通常会分两种类型： 对象锁，synchronized修饰普通方法或者在代码块中使用的当前对象，分别对应着addOne()和addTwo()方法，该方法采用的是Test的对象锁，只针对单个Test实例的并发问题。 类锁，synchronized修饰静态方法或者在代码块中使用类对象，分别对应这addFour()和addThree()，这两个方法采用的是Test.Class的对象锁。当存在多个Test实例对象的时候，同一时间只有一个Test实例可以访问到addFour()方法或者addThree()中的代码块。 值得注意的是，一个任务可以多次获得对象的锁，当在一个synchronized方法中调用同一个对象的另一个synchronized方法，该方法就会使得JVM跟踪的线程的持有的锁的数量加一，方法调用结束的时候，持有锁的数量就会减一，直到数字减为零，锁才会被释放。 总结 synchronized和volatile的区别 volatile不需要加锁，比synchronized更轻量级，不会阻塞线程； 从内存可见性角度，volatile读相当于加锁，volatile写相当于解锁； synchronized既能够保证可见性，又能保证原子性，而volatile只能保证可见性，无法保证原子性。 https://zhuanlan.zhihu.com/p/61966479 https://www.jianshu.com/p/1ae887521cf3 https://www.jianshu.com/p/327daf7dff34","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"Synchronized","slug":"Synchronized","permalink":"http://233hsysweb.ml/tags/Synchronized/"},{"name":"Volatile","slug":"Volatile","permalink":"http://233hsysweb.ml/tags/Volatile/"}],"author":"huanshi2"},{"title":"运算符","slug":"运算符","date":"2020-07-09T11:52:00.000Z","updated":"2020-07-09T11:52:00.000Z","comments":true,"path":"2020/07/09/运算符/","link":"","permalink":"http://233hsysweb.ml/2020/07/09/%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"运算符 描述 运算规则 按位与运算符（&amp;） 二进制位与运算，串联电路 0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1; 异或运算符“^” 用于位运算，每个位相同为0，不同为1 0 ^1 =1， 0 ^ 0 = 0；1^0=1, 1^1=0; 取反运算符（~） 按位取反 ~1=0； ~0=1； 位移运算符“&lt;&lt;”和”&gt;&gt;” 移位 1&lt;&lt;2 = 4 条件运算符 ？ int result = 1 &gt; 2 ? 1 + 1 : 2 + 2; // result = 4; | 按位或运算符（|） | 二进制位或运算，并联电路 | 0|0=0，0|1=1；1|0=1，1|1=1； |","text":"运算符 描述 运算规则 按位与运算符（&amp;） 二进制位与运算，串联电路 0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1; 异或运算符“^” 用于位运算，每个位相同为0，不同为1 0 ^1 =1， 0 ^ 0 = 0；1^0=1, 1^1=0; 取反运算符（~） 按位取反 ~1=0； ~0=1； 位移运算符“&lt;&lt;”和”&gt;&gt;” 移位 1&lt;&lt;2 = 4 条件运算符 ？ int result = 1 &gt; 2 ? 1 + 1 : 2 + 2; // result = 4; | 按位或运算符（|） | 二进制位或运算，并联电路 | 0|0=0，0|1=1；1|0=1，1|1=1； | &amp;&amp; 和 &amp;&amp;&amp;有短路功能 12345int i=0,j=1;if(i++&amp;&amp;j++)System.out.println(“j=”+j); &amp;&amp;输出结果为j=1 &amp;输出结果为j=2 || 表示短路或，| 表示不短路或 或运算只要一个为true，那么结果就为true","categories":[{"name":"运算符","slug":"运算符","permalink":"http://233hsysweb.ml/categories/%E8%BF%90%E7%AE%97%E7%AC%A6/"}],"tags":[{"name":"二进制","slug":"二进制","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"运算符","slug":"运算符","permalink":"http://233hsysweb.ml/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"}],"author":"huanshi2"},{"title":"Hashcode","slug":"Hashcode","date":"2020-07-09T06:40:00.000Z","updated":"2020-07-09T06:40:00.000Z","comments":true,"path":"2020/07/09/Hashcode/","link":"","permalink":"http://233hsysweb.ml/2020/07/09/Hashcode/","excerpt":"什么是Hashcode？要理解hashcode首先要理解hash表 哈希表hash表也称散列表（Hash table），是根据关键码值（key value）而直接进行访问的数据结构。 它通过把关键码值映射到表中的一个位置来访问记录，以加快查找速度。这个映射函数称为散列函数，存放记录的数组叫做散列表。","text":"什么是Hashcode？要理解hashcode首先要理解hash表 哈希表hash表也称散列表（Hash table），是根据关键码值（key value）而直接进行访问的数据结构。 它通过把关键码值映射到表中的一个位置来访问记录，以加快查找速度。这个映射函数称为散列函数，存放记录的数组叫做散列表。 给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。 简单理解就是：在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使每个关键字和结构中一个唯一的存储位置相对应。 具有快速查找和插入操作的优点 hashcode hashcode 通过hash函数计算得到，hashcode就是hash表中有对应的位置。 每个对象都有hashcode，通过将对象的物理地址转换为一个整数，将整数通过hash计算就可以得到hashcode hashcode的作用 HashCode的存在主要是为了查找的快捷性，HashCode是用来在散列存储结构中确定对象的存储地址的 对于容器类设计 基本上都会涉及到hashCode。在Java中也一样，hashCode方法的主要作用是为了配合基于散列的集合一起正常运行，这样的散列集合包括HashSet、HashMap以及HashTable。 在对集合进行插入操作时，集合内时是不允许存在重复元素的，这样就引发了一个问题 如何判别在集合中是否已经存在该对象了？ 首先想到的方法就是调用equals()方法，这个方法确实可行。但是如果集合中已经存在大量的数据或者更多的数据，如果采用equals方法去逐一比较，效率必然是一个问题。 此时hashCode方法的作用就体现出来了， 当集合要添加新的对象时，先调用这个对象的hashCode方法，得到对应的hashcode值，实际上在HashMap的具体实现中会一个表保存已经存进去的对象的hashcode值, 如果table中没有该hashcode值，它就可以直接存进去，不用再进行任何比较了； 如果存在该hashcode值， 就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址，所以这里存在一个冲突解决的问题，这样一来实际调用equals方法的次数就大大降低了 这也就解释了为什么equals()相等，则hashCode()必须相等。如果两个对象equals()相等，则它们在哈希表(如HashSet、HashMap等)中只应该出现一次；如果hashCode()不相等，那么它们会被散列到哈希表的不同位置，哈希表中出现了不止一次。 所以说hashCode方法的存在是为了减少equals方法的调用次数，从而提高程序效率。 hashcode()和equals() Java的基类Object中的 equals()方法用于判断两个对象是否相等，hashCode()方法用于计算对象的哈希码。equals()和hashCode()都不是final方法，都可以被重写(overwrite) equals方法 Object类中equals()方法实现如下 123public boolean equals(Object obj) &#123; return (this == obj);&#125; 通过该实现可以看出，Object类的实现采用了区分度最高的算法，即只要两个对象不是同一个对象，那么equals()一定返回false。 hashcode方法 Object类中hashCode()方法的声明如下： 1public native int hashCode(); 可以看出，hashCode()是一个native方法，而且返回值类型是整形；实际上，该native方法将对象在内存中的地址作为哈希码返回，可以保证不同对象的返回值不同。 与equals()方法类似，hashCode()方法可以被重写。JDK中对hashCode()方法的作用，以及实现时的注意事项做了说明： （1）hashCode()在哈希表中起作用，如java.util.HashMap。 （2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。 （3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。 （4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。 重写hashcode()的原则 （1）如果重写了equals()方法，检查条件“两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等”是否成立，如果不成立，则重写hashCode ()方法。 （2）hashCode()方法不能太过简单，否则哈希冲突过多。 （3）hashCode()方法不能太过复杂，否则计算复杂度过高，影响性能 HashMap中的hash()函数HashMap中并没有直接使用KV中K原有的hash值; 在HashMap的put、get操作时也未直接使用K中原有的hash值，而使用了一个hash()方法。让我们一起看一下这个方法 123456static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); //移位16位，保留高16位，再与key.hashcode()做异或操作 //异或的规则是转换成二进制比较，相同为0，不同为1.&#125; 这段代码类似作用是为了增加hashcode的随机性 key.hashCode()的作用是返回键值key所属类型自带的hashcode，返回的类型是int，如果直接拿散列值作为下标访问HashMap的主数组的话，考虑到int类型值的范围[-2^31 , 2^31 -1]，虽然只要hash表映射比较松散的话，碰撞几率很小，但是映射空间太大，内存放不下，所以先做对数组的长度取模运算，得到的余数才能用来访问数组下标。 hashMap源码中模运算是在这个indexFor( )函数里完成的把散列值和数组长度-1做一个”与”操作 12static int indexFor(int h, int length) &#123; return h &amp; (length-1);&#125; 这也正好解释了为什么HashMap的数组长度要取2的整数幂。因为数组长度-1相当于一个“低位掩码”。“与”操作的结果就是散列值的高位全部归零，只保留低位值.以初始长度16为例，16-1=15。2进制表示是00000000 00000000 00001111。和某散列值做“与”操作如下，结果就是截取了最低的四位值。h &amp; (length - 1) 和 h % length，它俩是等价不等效的，明显位运算效率非常高。 12345 01111010 00111100 00100101&amp; 00000000 00000000 00001111---------------------------------- 00000000 00000000 00000101 //高位全部归零，只保留末四位 but 只取后四位，即使散列值分布再松散，碰撞几率还是很大。更糟糕的是如果散列函数做的比较差吧，分布上是个等差数列啥的，恰好使最后几个低位呈现规律性重复，就比较蛋疼。 这时候 “hash”函数作用就出来了 右位移16位，正好是32bit的一半，高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。 设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，少了系统的开销，也不会造成因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。 根据研究结果显示，当HashMap数组长度为512的时候，也就是用掩码取低9位的时候，在没有使用hash()的情况下，发生了103次碰撞，接近30%。而在使用了hash()之后只有92次碰撞。碰撞减少了将近10%。看来扰hash()函数在将降低碰撞上还是有功效的。 hashMap中 MAXIMUM_CAPACITY = 1 &lt;&lt; 30;最大为2的30次方（超过这个值就将threshold修改为Integer.MAX_VALUE（此时表的大小已经是2的31次方了），表明不进行扩容了） https://www.cnblogs.com/NathanYang/p/9427456.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"},{"name":"hashcode","slug":"hashcode","permalink":"http://233hsysweb.ml/tags/hashcode/"}],"author":"huanshi2"},{"title":"Http协议","slug":"Http和https","date":"2020-07-07T08:08:00.000Z","updated":"2020-07-07T08:08:00.000Z","comments":true,"path":"2020/07/07/Http和https/","link":"","permalink":"http://233hsysweb.ml/2020/07/07/Http%E5%92%8Chttps/","excerpt":"HTTP 简介HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。","text":"HTTP 简介HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。。 HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。 HTTP 工作原理HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。 Web服务器有：Apache服务器，IIS服务器（Internet Information Services）,nginx,tomcat等。 Web服务器根据接收到的请求后，向客户端发送响应信息。 HTTP默认端口号为80，但是你也可以改为8080或者其他端口。 HTTP三点注意事项： HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 HTTP是媒体独立的：这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。 HTTP是无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 工作原理图下图表展示了HTTP协议通信流程 CGI(Common Gateway Interface) 是 HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。 绝大多数的 CGI 程序被用来解释处理来自表单的输入信息，并在服务器产生相应的处理，或将相应的信息反馈给浏览器。CGI 程序使网页具有交互功能。 Http消息结构HTTP是基于客户端/服务端（C/S）的架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。 一个HTTP”客户端”是一个应用程序（Web浏览器或其他任何客户端），通过连接到服务器达到向服务器发送一个或多个HTTP的请求的目的。 一个HTTP”服务器”同样也是一个应用程序（通常是一个Web服务，如Apache Web服务器或IIS服务器等），通过接收客户端的请求并向客户端发送HTTP响应数据。 HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。 一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。 客户端请求消息客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成，下图给出了请求报文的一般格式。 服务器响应消息HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。 http请求方法根据 HTTP 标准，HTTP 请求可以使用多种请求方法。 HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。 协议的八种请求类型HTTP 协议中共定义了八种方法或者叫“动作”来表明对 Request-URI 指定的资源的不同操作方式，具体介绍如下： OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法。也可以利用向Web服务器发送’*’的请求来测试服务器的功能性。 HEAD：向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。 GET：向特定的资源发出请求。 POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的创建和/或已有资源的修改。 PUT：向指定资源位置上传其最新内容。 DELETE：请求服务器删除 Request-URI 所标识的资源。 TRACE：回显服务器收到的请求，主要用于测试或诊断。 CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。 虽然 HTTP 的请求方式有 8 种，但是我们在实际应用中常用的也就是 get 和 post，其他请求方式也都可以通过这两种方式间接的来实现。 http请求实例下面实例是一点典型的使用GET来传递数据的实例： 客户端请求： 1234GET /hello.txt HTTP/1.1User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3Host: www.example.comAccept-Language: en, mi 服务端响应: 123456789HTTP/1.1 200 OKDate: Mon, 27 Jul 2009 12:28:53 GMTServer: ApacheLast-Modified: Wed, 22 Jul 2009 19:15:56 GMTETag: &quot;34aa387-d-1568eb00&quot;Accept-Ranges: bytesContent-Length: 51Vary: Accept-EncodingContent-Type: text/plain 输出结果： Hello World! My payload includes a trailing CRLF. http响应头信息 https://www.runoob.com/http/http-messages.html http状态码下面是常见的HTTP状态码： 200 - 请求成功 301 - 资源（网页等）被永久转移到其它URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误 分类 分类描述 1** 信息，服务器收到请求，需要请求者继续执行操作 2** 成功，操作被成功接收并处理 3** 重定向，需要进一步的操作以完成请求 4** 客户端错误，请求包含语法错误或无法完成请求 5** 服务器错误，服务器在处理请求的过程中发生了错误 content-type","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Http","slug":"Http","permalink":"http://233hsysweb.ml/tags/Http/"}],"author":"huanshi2"},{"title":"Mysql 索引","slug":"mysql-索引","date":"2020-07-01T08:22:00.000Z","updated":"2020-07-01T08:22:00.000Z","comments":true,"path":"2020/07/01/mysql-索引/","link":"","permalink":"http://233hsysweb.ml/2020/07/01/mysql-%E7%B4%A2%E5%BC%95/","excerpt":"索引分类 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 组合索引，即一个索引包含多个列。 索引是在存储引擎中实现的，而不是在服务器层中实现的。所以，每种存储引擎的索引都不一定完全相同，并不是所有的存储引擎都支持所有的索引类型。","text":"索引分类 单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 组合索引，即一个索引包含多个列。 索引是在存储引擎中实现的，而不是在服务器层中实现的。所以，每种存储引擎的索引都不一定完全相同，并不是所有的存储引擎都支持所有的索引类型。 优点： 1、所有的MySql列类型(字段类型)都可以被索引，也就是可以给任意字段设置索引 2、大大加快数据的查询速度 缺点： 1、创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加 2、索引也需要占空间，我们知道数据表中的数据也会有最大上限设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上限值 3、当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。 使用原则： 通过上面说的优点和缺点，我们应该可以知道，并不是每个字段度设置索引就好，也不是索引越多越好，而是需要自己合理的使用。 1、对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引， 2、数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果。 3、在一同值少的列上(字段上)不要建立索引，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，在一个字段上不同值较多可以建立索引。 一般来说，在WHERE和JOIN中出现的列需要建立索引，但也不完全如此，因为MySQL的B-Tree只对&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN，以及不以通配符开始的LIKE才会使用索引。 普通索引这是最基本的索引，它没有任何限制。普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件(WHERE column = …)或排序条件(ORDER BY column)中的数据列创建索引。 它有以下几种创建方式： 创建索引(1)使用 CREATE INDEX 语句 CREATE &lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC]) 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length，下同。 (2)修改表结构 ALTER &lt;表名&gt; ADD INDEX [indexName] ON [表名(列名)] (3)创建表的时候直接指定 123456create table table_index( id int primary key auto_increment , name varchar(20) );create index index_name On table_index( name ); 1234567create table table_index( id int primary key auto_increment , name varchar(20) );alter table table_indexadd index index_name (name); 实际操作： create index on actor(first_name); 删除索引的语法：DROP INDEX first ON actor; 删除完展示所有的索引show index from actor 唯一索引它与前面的普通索引类似，不同的就是：普通索引允许被索引的数据列包含重复的值。而唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。 CREATE UNIQUE INDEX indexName ON table(columename) 主键索引它是一种特殊的唯一索引，不允许有空值。一个表只能有一个主键。一般是在建表的时候同时创建主键索引： 见上面(3)创建表的时候直接指定部分 与之类似的，外键索引 如果为某个外键字段定义了一个外键约束条件，MySQL就会定义一个内部索引来帮助自己以最有效率的方式去管理和使用外键约束条件。 组合索引为了形象地对比单列索引和组合索引，为表添加多个字段： CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, city VARCHAR(50) NOT NULL, age INT NOT NULL ); 为了进一步榨取MySQL的效率，就要考虑建立组合索引。就是将 name, city, age建到一个索引里： ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age); 建表时，usernname长度为 16，这里用 10。这是因为一般情况下名字的长度不会超过10，这样会加速索引查询速度，还会减少索引文件的大小，提高INSERT的更新速度。 建立这样的组合索引，其实是相当于分别建立了下面三组组合索引： usernname,city,age usernname,city usernname 为什么没有 city，age这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这三列的查询都会用到该组合索引。下面的几个SQL就会用到这个组合索引： SELECT * FROM mytable WHREE username=&quot;admin&quot; AND city=&quot;郑州&quot; SELECT * FROM mytable WHREE username=&quot;admin&quot; 而下面几个则不会用到： SELECT * FROM mytable WHREE age=20 AND city=&quot;郑州&quot; SELECT * FROM mytable WHREE city=&quot;郑州&quot; 如果分别在 usernname，city，age上建立单列索引，让该表有3个单列索引，查询时和上述的组合索引效率也会大不一样，远远低于我们的组合索引。因为虽然此时有了三个索引，但MySQL只能用到其中的那个它认为似乎是最有效率的单列索引。 组合索引的使用要遵守“最左前缀”原则’ 全文索引全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引。 全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”你是个靓仔，靓女 …” 通过靓仔，可能就可以找到该条记录。 https://www.jianshu.com/p/0d6c828d3c70https://zhuanlan.zhihu.com/p/29118331https://www.jianshu.com/p/0d6c828d3c70","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"},{"name":"索引","slug":"索引","permalink":"http://233hsysweb.ml/tags/%E7%B4%A2%E5%BC%95/"},{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"author":"huanshi2"},{"title":"字节跳动面试","slug":"字节跳动面试","date":"2020-07-01T08:08:00.000Z","updated":"2020-07-01T08:08:00.000Z","comments":true,"path":"2020/07/01/字节跳动面试/","link":"","permalink":"http://233hsysweb.ml/2020/07/01/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%A2%E8%AF%95/","excerpt":"","text":"1.自我介绍 2.做题 给定[3,2,10,7,8,9]和target = 9 求出两个等于9的数的索引 写完之后问你怎么优化？ 3.索引—介绍一下mysql倒排索引 4.索引类型有哪几种？B树，字段可以不唯一的, 5.二叉树的搜索为什么比Btree的时间复杂度高， 6.https http差别，https加密在哪一层?(答错了，应该在第七层应用层) 7.听说过ssl TLS吗？ 8.常用的加密算法 9.TCP三次握手 10.两次握手，可不可以？ 11.操作系统了解些什么？cpu了解些什么？ 流水线，时间片 12.反问：基础薄弱，哪些地方可以加强。 前端要求？ 后台编程语言java，python ​ ES搜索、医学图像。","categories":[{"name":"面试","slug":"面试","permalink":"http://233hsysweb.ml/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[],"author":"huanshi2"},{"title":"OSI网络模型","slug":"OSI网络模型","date":"2020-07-01T02:53:00.000Z","updated":"2020-07-01T02:53:00.000Z","comments":true,"path":"2020/07/01/OSI网络模型/","link":"","permalink":"http://233hsysweb.ml/2020/07/01/OSI%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"应用层OSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。表示层表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。会话层会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。传输层传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。网络层本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。数据链路层将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。 数据链路层又分为2个子层：逻辑链路控制子层（LLC）和媒体访问控制子层（MAC）。 MAC子层处理CSMA/CD算法、数据出错校验、成帧等；LLC子层定义了一些字段使上次协议能共享数据链路层。 在实际使用中，LLC子层并非必需的。物理层实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"OSI","slug":"OSI","permalink":"http://233hsysweb.ml/tags/OSI/"}],"author":"huanshi2"},{"title":"TCP 三次握手四次挥手","slug":"TCP-三次握手四次挥手","date":"2020-07-01T01:53:00.000Z","updated":"2020-07-01T01:53:00.000Z","comments":true,"path":"2020/07/01/TCP-三次握手四次挥手/","link":"","permalink":"http://233hsysweb.ml/2020/07/01/TCP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/","excerpt":"三次握手","text":"三次握手 tcp的6种标志位的分别代表： SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急) Sequence number(顺序号码) Acknowledge number(确认号码) 握手之前主动打开连接的客户端结束CLOSED阶段，被动打开的服务器端也结束CLOSED阶段，并进入LISTEN阶段。随后开始“三次握手”： （1）首先客户端向服务器端发送一段TCP报文，其中： 标记位为SYN，表示“请求建立新连接”; 序号为Seq=X（X一般为1）； 随后客户端进入SYN-SENT阶段。 （2）服务器端接收到来自客户端的TCP报文之后，结束LISTEN阶段。并返回一段TCP报文，其中： 标志位为SYN和ACK，表示“确认客户端的报文Seq序号有效，服务器能正常接收客户端发送的数据，并同意创建新连接”（即告诉客户端，服务器收到了你的数据）； 序号为Seq=y； 确认号为Ack=x+1，表示收到客户端的序号Seq并将其值加1作为自己确认号Ack的值；随后服务器端进入SYN-RCVD阶段。 （3）客户端接收到来自服务器端的确认收到数据的TCP报文之后，明确了从客户端到服务器的数据传输是正常的，结束SYN-SENT阶段。并返回最后一段TCP报文。其中： 标志位为ACK，表示“确认收到服务器端同意连接的信号”（即告诉服务器，我知道你收到我发的数据了）；序号为Seq=x+1，表示收到服务器端的确认号Ack，并将其值作为自己的序号值；确认号为Ack=y+1，表示收到服务器端序号Seq，并将其值加1作为自己的确认号Ack的值；随后客户端进入ESTABLISHED阶段。服务器收到来自客户端的“确认收到服务器数据”的TCP报文之后，明确了从服务器到客户端的数据传输是正常的。结束SYN-SENT阶段，进入ESTABLISHED阶段。 在客户端与服务器端传输的TCP报文中，双方的确认号Ack和序号Seq的值，都是在彼此Ack和Seq值的基础上进行计算的，这样做保证了TCP报文传输的连贯性。一旦出现某一方发出的TCP报文丢失，便无法继续”握手”，以此确保了”三次握手”的顺利完成。 此后客户端和服务器端进行正常的数据传输。这就是“三次握手”的过程。 四次挥手 为什么客户端最后还要等待2MSL？MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。 第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。 第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"}],"author":"huanshi2"},{"title":"java 虚拟机栈","slug":"java-虚拟机栈","date":"2020-07-01T01:40:00.000Z","updated":"2020-07-01T01:40:00.000Z","comments":true,"path":"2020/07/01/java-虚拟机栈/","link":"","permalink":"http://233hsysweb.ml/2020/07/01/java-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/","excerpt":"","text":"https://www.cnblogs.com/newAndHui/p/11168791.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"}],"author":"huanshi2"},{"title":"java面向对象","slug":"java面向对象","date":"2020-06-29T09:34:00.000Z","updated":"2020-06-29T09:34:00.000Z","comments":true,"path":"2020/06/29/java面向对象/","link":"","permalink":"http://233hsysweb.ml/2020/06/29/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","excerpt":"https://blog.csdn.net/hc1151310108/article/details/80499388 面向对象开发,设计,特征面向对象开发 就是不断的创建对象，使用对象，指挥对象做事情。 面向对象设计 其实就是在管理和维护对象之间的关系。 面向对象特征封装(encapsulation) 继承(inheritance) 多态(polymorphism)","text":"https://blog.csdn.net/hc1151310108/article/details/80499388 面向对象开发,设计,特征面向对象开发 就是不断的创建对象，使用对象，指挥对象做事情。 面向对象设计 其实就是在管理和维护对象之间的关系。 面向对象特征封装(encapsulation) 继承(inheritance) 多态(polymorphism) 2个对象的内存图 匿名对象的两种使用情况• 对象调用方法仅仅一次的时候 • 作为实际参数传递 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* 匿名对象：就是没有名字的对象。 匿名对象的应用场景： A:调用方法，仅仅只调用一次的时候。 注意：调用多次的时候，不适合。 那么，这种匿名调用有什么好处吗? 有，匿名对象调用完毕就是垃圾。可以被垃圾回收器回收。 B:匿名对象可以作为实际参数传递*/class Student &#123; public void show() &#123; System.out.println(&quot;我爱学习&quot;); &#125;&#125; class StudentDemo &#123; public void method(Student s) &#123; s.show(); &#125;&#125; class NoNameDemo &#123; public static void main(String[] args) &#123; //带名字的调用 Student s = new Student(); s.show(); s.show(); System.out.println(&quot;--------------&quot;); //匿名对象 //new Student(); //匿名对象调用方法 new Student().show(); new Student().show(); //这里其实是重新创建了一个新的对象 System.out.println(&quot;--------------&quot;); //匿名对象作为实际参数传递 StudentDemo sd = new StudentDemo(); //Student ss = new Student(); //sd.method(ss); //这里的ss是一个实际参数 //匿名对象 sd.method(new Student()); //在来一个 new StudentDemo().method(new Student()); &#125;&#125; 继承封装在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。 封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。 要访问该类的代码和数据，必须通过严格的接口控制。 封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。 适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。 封装原则： 将不需要对外提供的内容都隐藏起来。 把属性隐藏，提供公共方法对其访问。 封装的优点 良好的封装能够减少耦合。 类内部的结构可以自由修改。 可以对成员变量进行更精确的控制。 隐藏信息，实现细节 提高代码复用性 封装关键字 private Default protected public 同一个类中 √ √ √ √ 同一个包下 √ √ √ 派生子类 √ √ 不同包下 √ this关键字 this:代表所在类的对象引用 方法被哪个对象调用，this就代表那个对象 什么时候使用this呢? 局部变量隐藏成员变量 多态","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"面向对象","slug":"面向对象","permalink":"http://233hsysweb.ml/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}],"author":"huanshi2"},{"title":"类的内存分配过程","slug":"类的内存分配过程","date":"2020-06-29T09:16:00.000Z","updated":"2020-06-29T09:16:00.000Z","comments":true,"path":"2020/06/29/类的内存分配过程/","link":"","permalink":"http://233hsysweb.ml/2020/06/29/%E7%B1%BB%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E8%BF%87%E7%A8%8B/","excerpt":"分配过程Person.java 1234567public class Person&#123; int age; String name; public void walk()&#123; System.out.println(&quot;我正在走路....&quot;); &#125;&#125;","text":"分配过程Person.java 1234567public class Person&#123; int age; String name; public void walk()&#123; System.out.println(&quot;我正在走路....&quot;); &#125;&#125; 测试类Test.java 12345678public class Test&#123; public static void main(String[] args)&#123; Person person = new Person(); person.name = &quot;java开发工程师&quot;; person.age = 24; person.walk; &#125;&#125; 第一步，jvm去方法去寻找test类的代码信息，如果有则直接调用，没有的话使用类的加载机制把类加载进来。同时把静态变量，静态方法，常量和全局变量加载进来。 第二步，jvm进入main方法区，看到看到Person person=new Person()，首先分析方法区是否有Person类的代码信息，有就加载，没有的话类加载机制加载进来。同时加载静态变量，静态方法，常量。 第三步，jvm接下来看到Person person 在main方法内部，此时person是局部变量，存放在栈空间中。此时地址还没有存储后面的new Person()地址。 第四步，jvm接下来看到了new Person()。 new出的对象实例存在堆空间中 第五步，jvm接下来看到了 = ,把new Person()的地址告诉person变量，这样栈中的person变量的值就修改为new Person()的地址。person通过地址引用该实例,效果如下图。 第六步，jvm看到 person.name = &quot;冯东东的IT技术栈&quot;,person通过引用 new Person实例的name属性，该属性通过地址指向常量池的”冯东东的IT技术栈” 第七步, jvm看到person.age = 18; person 的age属性是基本数据类型，直接赋值。 第八步，jvm看到person.walk(),调用实例方法时，并不会在实例对象中生产一个新方法，而是通过地址指向方法曲中的类信息中的方法","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"内存分配","slug":"内存分配","permalink":"http://233hsysweb.ml/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"},{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"}],"author":"huanshi2"},{"title":"Java 类和对象内存分配","slug":"Java-对象内存分配","date":"2020-06-29T06:46:00.000Z","updated":"2020-06-29T06:46:00.000Z","comments":true,"path":"2020/06/29/Java-对象内存分配/","link":"","permalink":"http://233hsysweb.ml/2020/06/29/Java-%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/","excerpt":"Java中方法传递参数是按值传递： 如果是基本类型，则值 代表元素内容 如果是引用类型，则值 代表地址号","text":"Java中方法传递参数是按值传递： 如果是基本类型，则值 代表元素内容 如果是引用类型，则值 代表地址号 一个类示例： 类变量总是比实例变量先初始化 错误示例： 类的加载时机：类加载的生命周期类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载 7 个阶段。其中 验证、准备、解析 3 个部分统称为连接，这 7 个阶段的发生顺序如下图所示。 类在实例化后的内存分配 1.每次创建对象时，都需要进行加载和创建2个操作： ① 先去判断需要的类是否已经加载，如果已经加载了，则无需再加载，如果没有加载，则需要通过类加载器加载类信息到方法区 ② 在堆中创建新对象 2、栈、堆、方法区的存储 栈：方法执行时创建方法栈帧，存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在堆中。 堆：对象和成员变量 方法区：与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。 java中的全局变量，也就是class的字段，存放在方法区中. 对于局部变量，如果是基本类型，会把值直接存储在栈；如果是引用类型，比如String s = new String(“william”);会把其对象存储在堆，而把这个对象的引用（指针）存储在栈。再如String s1 = new String(“william”);String s2 = s1;s1和s2同为这个字符串对象的实例，但是对象只有一个，存储在堆，而这两个引用存储在栈中。 3、方法的调用机制 每次调用方法，伴随着“方法入栈”操作，也就是栈中为该方法分配了一块空间，用于保存该方法中涉及到的变量 每次方法调用结束，伴随着“方法出栈”操作，也就是栈中分配的空间被释放了 在类的方法调用过程中，首先判断方法区是否存在该方法，存在则方法入栈，调用结束后出栈。 示例123456789101112131415161718192021public class Student &#123; private String name; private static Birthday birthday = new Birthday(); public Student(String name) &#123; this.name = name; &#125; public static void main(String[] args) &#123; Student s = new Student(&quot;zhangsan&quot;); int age = 10; System.out.println(age); &#125;&#125;class Birthday &#123; private int year = 2010; private int month = 10; private int day = 1;&#125; 从图中我们可以看出，普通的java实例对象内存分配，主要在这三个区域：虚拟机栈、堆、方法区。 从内存区域来分析虚拟机栈:只存放局部变量 堆:存储对象的实例 方法区：存放Class信息和常量信息，static变量。 • 成员变量：堆内存 • 局部变量：栈内存 从变量的角度来分析 局部变量：存放在虚拟机栈中（具体应为[栈-&gt;栈帧-&gt;局部变量表]） 基本类型的值直接存在栈中。如age=10 如果是对象的实例，则只存储对象实例的引用。如s=ref 实例变量：存放在堆中的对象实例中。如Student的实例变量 name=ref 静态变量：存放在方法区中的常量池中。如Student.class中的birthday=ref。 如果常量的类型是对象的实例则只存储对象实例的引用地址","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"内存分配","slug":"内存分配","permalink":"http://233hsysweb.ml/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"},{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"}],"author":"huanshi2"},{"title":"java 动态代理","slug":"java-动态代理","date":"2020-06-28T08:30:00.000Z","updated":"2020-06-28T08:30:00.000Z","comments":true,"path":"2020/06/28/java-动态代理/","link":"","permalink":"http://233hsysweb.ml/2020/06/28/java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/","excerpt":"https://www.jianshu.com/p/9bcac608c714 动态代理 https://www.jianshu.com/p/9bcac608c714 动态代理具体步骤： 通过实现 InvocationHandler 接口创建自己的调用处理器； 通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类； 通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型； 通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。 还有一种通过CgLIb代码生成库来进行","text":"https://www.jianshu.com/p/9bcac608c714 动态代理 https://www.jianshu.com/p/9bcac608c714 动态代理具体步骤： 通过实现 InvocationHandler 接口创建自己的调用处理器； 通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类； 通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型； 通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。 还有一种通过CgLIb代码生成库来进行 代理模式 为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类来完成服务，并将执行结果封装处理。 其实就是代理类为被代理类预处理消息、过滤消息并在此之后将消息转发给被代理类，之后还能进行消息的后置处理。代理类和被代理类通常会存在关联关系(即上面提到的持有的被带离对象的引用)，代理类本身不实现服务，而是通过调用被代理类中的方法来提供服务。 (类比代理服务器转发消息) 静态代理创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。 接口 123public interface HelloInterface &#123; void sayHello();&#125; 被代理类 123456public class Hello implements HelloInterface&#123; @Override public void sayHello() &#123; System.out.println(&quot;Hello zhanghao!&quot;); &#125;&#125; 代理类 123456789public class HelloProxy implements HelloInterface&#123; private HelloInterface helloInterface = new Hello(); @Override public void sayHello() &#123; System.out.println(&quot;Before invoke sayHello&quot; ); helloInterface.sayHello(); System.out.println(&quot;After invoke sayHello&quot;); &#125;&#125; 代理类调用 12345678910 public static void main(String[] args) &#123; HelloProxy helloProxy = new HelloProxy(); helloProxy.sayHello(); &#125; 输出：Before invoke sayHelloHello zhanghao!After invoke sayHello 缺点： 使用静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较繁琐。 动态代理利用反射机制在运行时创建代理类。接口、被代理类不变，我们构建一个handler类来实现InvocationHandler接口。 在ProxyGenerator.generateProxyClass函数中 saveGeneratedFiles定义如下，其指代是否保存生成的代理类class文件，默认false不保存。 在前面的示例中，我们修改了此系统变量 12345678System.getProperties().setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);```接口：```javapublic interface HelloInterface &#123; void sayHello();&#125; 被代理类： 123456public class Hello implements HelloInterface&#123; @Override public void sayHello() &#123; System.out.println(&quot;Hello zhanghao!&quot;); &#125;&#125; 12345678910111213public class ProxyHandler implements InvocationHandler&#123; private Object object; public ProxyHandler(Object object)&#123; this.object = object; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(&quot;Before invoke &quot; + method.getName()); method.invoke(object, args); System.out.println(&quot;After invoke &quot; + method.getName()); return null; &#125;&#125; 执行动态代理 1234567891011121314151617181920212223242526272829public static void main(String[] args) &#123; //传入键值对，JDK动态代理生成的class文件保存到本地 System.getProperties().setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;); //申明被代理类 HelloInterface hello = new Hello(); //创建代理handler //传入hello类参数 InvocationHandler handler = new ProxyHandler(hello); //创建代理类 //newProxyInstance，方法有三个参数： //loader: 用哪个类加载器去加载代理对象 //interfaces:动态代理类需要实现的接口 //h:动态代理方法在执行时，会调用h里面的invoke方法去执行 //传入hello类加载器，接口，还有产生的代理handler HelloInterface proxyHello = (HelloInterface) Proxy.newProxyInstance(hello.getClass().getClassLoader(), hello.getClass().getInterfaces(), handler); //调用invoke方法执行sayhello()方法 //invoke 方法在Proxyhandler 中进行了重写 //最终 proxyHello.sayHello();&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"设计模式","slug":"Java/设计模式","permalink":"http://233hsysweb.ml/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"动态代理","slug":"动态代理","permalink":"http://233hsysweb.ml/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"}],"author":"huanshi2"},{"title":"TP-link的面经","slug":"TP-link的面经","date":"2020-06-28T08:27:00.000Z","updated":"2020-06-28T08:27:00.000Z","comments":true,"path":"2020/06/28/TP-link的面经/","link":"","permalink":"http://233hsysweb.ml/2020/06/28/TP-link%E7%9A%84%E9%9D%A2%E7%BB%8F/","excerpt":"","text":"个人介绍—–简历、个人技能、个人简介不熟悉 专业问题—为何找软开 java学习时间多久，如何学习的 项目中印象比较深刻的一个问题 volatile synchronized 项目介绍—实验室项目 spring boot框架 项目中用到了哪些spring知识 强引用、软引用、弱引用 垃圾回收情况 一直留在成都 兴趣爱好 有什么问题：现在用的最多的java框架是什么 java拦截器，过滤器 最近在学习的技术","categories":[{"name":"面试","slug":"面试","permalink":"http://233hsysweb.ml/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[],"author":"huanshi2"},{"title":"java vector ","slug":"java-vector","date":"2020-06-28T08:20:00.000Z","updated":"2020-06-28T08:20:00.000Z","comments":true,"path":"2020/06/28/java-vector/","link":"","permalink":"http://233hsysweb.ml/2020/06/28/java-vector/","excerpt":"Vector 可实现自动增长的对象数组。java.util.vector提供了向量类(Vector)以实现类似动态数组的功能。创建了一个向量类的对象后，可以往其中随意插入不同类的对象，即不需顾及类型也不需预先选定向量的容量，并可以方便地进行查找。 对于预先不知或者不愿预先定义数组大小，并且需要频繁地进行查找，插入，删除工作的情况，可以考虑使用向量类。","text":"Vector 可实现自动增长的对象数组。java.util.vector提供了向量类(Vector)以实现类似动态数组的功能。创建了一个向量类的对象后，可以往其中随意插入不同类的对象，即不需顾及类型也不需预先选定向量的容量，并可以方便地进行查找。 对于预先不知或者不愿预先定义数组大小，并且需要频繁地进行查找，插入，删除工作的情况，可以考虑使用向量类。 插入123Vector v1 = new Vector(); Integer integer1 = new Integer(1); v1.addElement(integer1); https://www.cnblogs.com/zheting/p/7708366.html","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"vector","slug":"vector","permalink":"http://233hsysweb.ml/tags/vector/"}],"author":"huanshi2"},{"title":" 强引用、弱引用、软引用和虚引用","slug":"强引用、弱引用、软引用和虚引用","date":"2020-06-26T08:27:00.000Z","updated":"2020-06-26T08:27:00.000Z","comments":true,"path":"2020/06/26/强引用、弱引用、软引用和虚引用/","link":"","permalink":"http://233hsysweb.ml/2020/06/26/%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E5%92%8C%E8%99%9A%E5%BC%95%E7%94%A8/","excerpt":"","text":"在JDK 1.2以前的版本中，若一个对象不被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有对象处于(reachable)可达状态，程序才能使用它。 从JDK 1.2版本开始，对象的引用被划分为4种级别，从而使程序能更加灵活地控制对象的生命周期。这4种级别由高到低依次为：强引用、软引用、弱引用和虚引用。 原文链接：https://blog.csdn.net/baidu_22254181/article/details/82555485","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"}],"author":"huanshi2"},{"title":"堆的操作","slug":"堆的操作","date":"2020-06-11T08:39:00.000Z","updated":"2020-06-11T08:39:00.000Z","comments":true,"path":"2020/06/11/堆的操作/","link":"","permalink":"http://233hsysweb.ml/2020/06/11/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C/","excerpt":"","text":"插入插入的思路是这样的： 当插入一个元素时，先将这个元素插入到队列尾，然后将这个新插入的元素和它的父节点进行优先权的比较，如果比父节点的优先权要大，则和父节点互换位置，然后再和新的父节比较，直到比新的父节点优先权小为止","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"堆","slug":"堆","permalink":"http://233hsysweb.ml/tags/%E5%A0%86/"}],"author":"huanshi2"},{"title":"堆","slug":"堆","date":"2020-06-11T07:11:00.000Z","updated":"2020-06-11T07:11:00.000Z","comments":true,"path":"2020/06/11/堆/","link":"","permalink":"http://233hsysweb.ml/2020/06/11/%E5%A0%86/","excerpt":"用堆来进行存储需要符合以下规则： 1.元素可比较性：数据集中的元素可以进行比较，就是要实现Comparable接口；。 2.节点最大/最小性：每个节点的元素必须大于或小于该节点的孩子节点的元素； 3.堆是一棵完全二叉树。","text":"用堆来进行存储需要符合以下规则： 1.元素可比较性：数据集中的元素可以进行比较，就是要实现Comparable接口；。 2.节点最大/最小性：每个节点的元素必须大于或小于该节点的孩子节点的元素； 3.堆是一棵完全二叉树。 堆有两种：最大堆和最小堆。 最小堆中每个节点的优先级小于或者等于它的子节点；最大堆则相反，每个节点的优先级都大于或者等于它的子节点。 堆和普通树的区别堆并不能取代二叉搜索树，它们之间有相似之处也有一些不同。我们来看一下两者的主要差别： 节点的顺序。在二叉搜索树中，左子节点必须比父节点小，右子节点必须必比父节点大。但是在堆中并非如此。在最大堆中两个子节点都必须比父节点小，而在最小堆中，它们都必须比父节点大。 内存占用。普通树占用的内存空间比它们存储的数据要多。你必须为节点对象以及左/右子节点指针分配额为是我内存。堆仅仅使用一个数据来村塾数组，且不使用指针。 平衡。二叉搜索树必须是“平衡”的情况下，其大部分操作的复杂度才能达到O(log n)。你可以按任意顺序位置插入/删除数据，或者使用 AVL 树或者红黑树，但是在堆中实际上不需要整棵树都是有序的。我们只需要满足对属性即可，所以在堆中平衡不是问题。因为堆中数据的组织方式可以保证O(log n) 的性能。 搜索。在二叉树中搜索会很快，但是在堆中搜索会很慢。在堆中搜索不是第一优先级，因为使用堆的目的是将最大（或者最小）的节点放在最前面，从而快速的进行相关插入、删除操作。 堆的大小是提前知道的，在java集合中堆是通过ArrayList数组实现的： 1.根节点位置：根节点的数据总是在数组的位置[0] 2.节点的父节点位置：假设一个非根节点的数据在数组中的位置[i]，那么它的父节点总是在位置[(i-1)/2] 3.节点的孩子节点位置：假设一个节点的数据在数组中的位置为[i]，那么它的孩子（如果有）总是在下面的这两个位置：左孩子在[2i+1]，右孩子在[2i+2] https://blog.csdn.net/tuke_tuke/article/details/50357939https://blog.csdn.net/tuke_tuke/article/details/50357939https://www.jianshu.com/p/6b526aa481b1","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"堆","slug":"堆","permalink":"http://233hsysweb.ml/tags/%E5%A0%86/"}],"author":"huanshi2"},{"title":"排序算法","slug":"排序算法","date":"2020-06-09T14:07:00.000Z","updated":"2020-06-09T14:07:00.000Z","comments":true,"path":"2020/06/09/排序算法/","link":"","permalink":"http://233hsysweb.ml/2020/06/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","excerpt":"十大排序算法图片名词解释： n: 数据规模 k: “桶”的个数 In-place: 占用常数内存，不占用额外内存 Out-place: 占用额外内存","text":"十大排序算法图片名词解释： n: 数据规模 k: “桶”的个数 In-place: 占用常数内存，不占用额外内存 Out-place: 占用额外内存 1 排序的定义对一序列对象根据某个关键字进行排序。 2 术语说明 稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面； 不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面； 内排序：所有排序操作都在内存中完成； 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； 时间复杂度： 一个算法执行所耗费的时间。 空间复杂度：运行完一个程序所需内存的大小。 3.比较和非比较的区别常见的快速排序、归并排序、堆排序、冒泡排序等属于比较排序。在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置。在冒泡排序之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在归并排序、快速排序之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均o(nlogn)。比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，比较排序适用于一切需要排序的情况。 计数排序、基数排序、桶排序则属于非比较排序。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。 非比较排序只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。 非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。 插入排序 动图 希尔排序 归并排序 快速排序 https://www.cnblogs.com/guoyaohua/p/8600214.html","categories":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"排序","permalink":"http://233hsysweb.ml/tags/%E6%8E%92%E5%BA%8F/"}],"author":"huanshi2"},{"title":"二叉树的下一个节点","slug":"二叉树的下一个节点","date":"2020-06-09T03:16:00.000Z","updated":"2020-06-09T03:16:00.000Z","comments":true,"path":"2020/06/09/二叉树的下一个节点/","link":"","permalink":"http://233hsysweb.ml/2020/06/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/","excerpt":"二叉树的遍历12345678910111213141516171819链接：https://www.nowcoder.com/questionTerminal/9023a0c988684a53960365b889ceaf5e?f=discussion来源：牛客网public class Solution &#123; TreeLinkNode GetNext(TreeLinkNode node) &#123; if(node==null) return null; if(node.right!=null)&#123; //如果有右子树，则找右子树的最左节点 node = node.right; while(node.left!=null) node = node.left; return node; &#125; while(node.next!=null)&#123; //没右子树，则找第一个当前节点是父节点左孩子的节点 if(node.next.left==node) return node.next; node = node.next; &#125; return null; //退到了根节点仍没找到，则返回null &#125;&#125;","text":"二叉树的遍历12345678910111213141516171819链接：https://www.nowcoder.com/questionTerminal/9023a0c988684a53960365b889ceaf5e?f=discussion来源：牛客网public class Solution &#123; TreeLinkNode GetNext(TreeLinkNode node) &#123; if(node==null) return null; if(node.right!=null)&#123; //如果有右子树，则找右子树的最左节点 node = node.right; while(node.left!=null) node = node.left; return node; &#125; while(node.next!=null)&#123; //没右子树，则找第一个当前节点是父节点左孩子的节点 if(node.next.left==node) return node.next; node = node.next; &#125; return null; //退到了根节点仍没找到，则返回null &#125;&#125; https://www.cnblogs.com/zhi-leaf/p/10813048.html","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"二叉树","slug":"二叉树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"}],"author":"huanshi2"},{"title":" Elasticsearch Mapping、字段类型Field type详解","slug":"Elasticsearch-field-type","date":"2020-06-09T01:33:00.000Z","updated":"2020-06-09T01:33:00.000Z","comments":true,"path":"2020/06/09/Elasticsearch-field-type/","link":"","permalink":"http://233hsysweb.ml/2020/06/09/Elasticsearch-field-type/","excerpt":"Elasticsearch keyword 用法keyword类型 keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。keyword类型的字段只能通过精确值搜索到。","text":"Elasticsearch keyword 用法keyword类型 keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。keyword类型的字段只能通过精确值搜索到。 两种分词器使用的最佳实践是：索引时用ik_max_word，在搜索时用ik_smart。即：索引时最大化的将文章内容分词，搜索时更精确的搜索到想要的结果。 https://blog.csdn.net/weixin_44062339/article/details/85006948https://blog.csdn.net/weixin_44062339/article/details/85006948https://blog.csdn.net/hello_world123456789/article/details/95341515https://blog.csdn.net/raoxiaoya/article/details/90602296https://blog.csdn.net/limingcai168/article/details/85780964?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecasehttps://blog.csdn.net/ZYC88888/article/details/83059040https://blog.csdn.net/ZYC88888/article/details/83059040","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://233hsysweb.ml/tags/Elasticsearch/"}],"author":"huanshi2"},{"title":"Python3 requests 编码错误","slug":"Python3-requests-编码错误","date":"2020-06-08T07:55:00.000Z","updated":"2020-06-08T07:55:00.000Z","comments":true,"path":"2020/06/08/Python3-requests-编码错误/","link":"","permalink":"http://233hsysweb.ml/2020/06/08/Python3-requests-%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/","excerpt":"报错代码 12response = requests.post(base_url, headers=&#123;&quot;Content-Type&quot;:&quot;application/ndjson&quot;&#125;, data=data)","text":"报错代码 12response = requests.post(base_url, headers=&#123;&quot;Content-Type&quot;:&quot;application/ndjson&quot;&#125;, data=data) 报错 123456789101112131415161718192021222324252627Traceback (most recent call last): File &quot;E:/PycharmProjects/Afenci/insert.py&quot;, line 18, in begin_insert_job bulk_insert(base_url, line) File &quot;E:/PycharmProjects/Afenci/insert.py&quot;, line 9, in bulk_insert response = requests.post(base_url, headers=&#123;&quot;Content-Type&quot;:&quot;application/ndjson&quot;&#125;, data=data) File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\requests\\api.py&quot;, line 119, in post return request(&#x27;post&#x27;, url, data=data, json=json, **kwargs) File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\requests\\api.py&quot;, line 61, in request return session.request(method=method, url=url, **kwargs) File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\requests\\sessions.py&quot;, line 530, in request resp = self.send(prep, **send_kwargs) File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\requests\\sessions.py&quot;, line 643, in send r = adapter.send(request, **kwargs) File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\requests\\adapters.py&quot;, line 449, in send timeout=timeout File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\urllib3\\connectionpool.py&quot;, line 677, in urlopen chunked=chunked, File &quot;E:\\PycharmProjects\\Afenci\\venvforwindows\\lib\\site-packages\\urllib3\\connectionpool.py&quot;, line 392, in _make_request conn.request(method, url, **httplib_request_kw) File &quot;C:\\Users\\wujinfa\\AppData\\Local\\Programs\\Python\\Python36\\lib\\http\\client.py&quot;, line 1239, in request self._send_request(method, url, body, headers, encode_chunked) File &quot;C:\\Users\\wujinfa\\AppData\\Local\\Programs\\Python\\Python36\\lib\\http\\client.py&quot;, line 1284, in _send_request body = _encode(body, &#x27;body&#x27;) File &quot;C:\\Users\\wujinfa\\AppData\\Local\\Programs\\Python\\Python36\\lib\\http\\client.py&quot;, line 161, in _encode (name.title(), data[err.start:err.end], name)) from NoneUnicodeEncodeError: &#x27;latin-1&#x27; codec can&#x27;t encode characters in position 36-38: Body (&#x27;陈秉忠&#x27;) is not valid Latin-1. Use body.encode(&#x27;utf-8&#x27;) if you want to send it encoded in UTF-8. (1)python3换python2 或者 (2)utf-8 格式http client源码有问题,不支持中文，需要转换编码方式 data = line.encode(&quot;utf-8&quot;).decode(&quot;latin1&quot;) https://blog.csdn.net/Hepburn_li/article/details/90379062","categories":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/tags/Python/"},{"name":"Error","slug":"Error","permalink":"http://233hsysweb.ml/tags/Error/"}],"author":"huanshi2"},{"title":"二叉树","slug":"二叉树","date":"2020-06-07T06:35:00.000Z","updated":"2020-06-07T06:35:00.000Z","comments":true,"path":"2020/06/07/二叉树/","link":"","permalink":"http://233hsysweb.ml/2020/06/07/%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"演示网站http://520it.com/binarytrees/ 树树是一种一对多的数据结构。树又有很多子集，比如：二叉树、二叉搜索树、2-3树、红黑树等等。树的特征：1.没有父结点的结点叫根，一个数有且只有一个根;2.每个结点有0个或多个子结点;3.一颗树里也可拥有子树，且子树不能相交;","text":"演示网站http://520it.com/binarytrees/ 树树是一种一对多的数据结构。树又有很多子集，比如：二叉树、二叉搜索树、2-3树、红黑树等等。树的特征：1.没有父结点的结点叫根，一个数有且只有一个根;2.每个结点有0个或多个子结点;3.一颗树里也可拥有子树，且子树不能相交; 度每个结点拥有的子树数量称为该结点的度，简单的说结点的子节点个数就是它的度。二叉树二叉树是一类特殊的树，二叉树的特征：1.每个结点最多有2个子结点的树（就是不存在度大于2的结点）；2.左右子树有一定顺序（比如升序或降序，如下图中8的右子结点大于左子节点，结点2和7的子节点也是如此关系）； 满二叉树满二叉树是所有非叶结点的子结点个数都为2，看起来呈水平对称。其特征为：1.所有叶结点都在最后一层；2.非叶结点的所有结点的度都为2； 完全二叉树完全二叉树的特征：1.该树非最后一层的结点都是满的；2.最后一层的叶结点必须集中到左边，也就是不允许倒数第二层的结点只有右子结点而没左结点。 完全二叉树是一种高效的数据结构，堆就是从程序实现层面上使完全二叉树更加容易操作（如：增、删）的数据结构。 排序二叉树排序二叉树要么是一棵空二叉树，要么是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值； 它的左、右子树也分别为排序二叉树。 平衡二叉树平衡二叉树：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 红黑树红黑树在原有的排序二叉树增加了如下几个要求： 性质 1：每个节点要么是红色，要么是黑色。 性质 2：根节点永远是黑色的。 性质 3：所有的叶节点都是空节点（即 null），并且是黑色的。 性质 4：每个红色节点的两个子节点都是黑色。（从每个叶子到根的路径上不会有两个连续的红色节点） 性质 5：从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点 红黑树和平衡二叉树红黑树并不是真正的平衡二叉树，但在实际应用中，红黑树的统计性能要高于平衡二叉树，但极端性能略差。 由此我们可以得出结论：对于给定的黑色高度为 N 的红黑树，从根到叶子节点的最短路径长度为 N-1，最长路径长度为 2 * (N-1)。 提示：排序二叉树的深度直接影响了检索的性能，正如前面指出，当插入节点本身就是由小到大排列时，排序二叉树将变成一个链表，这种排序二叉树的检索性能最低：N 个节点的二叉树深度就是 N-1。 红黑树通过上面这种限制来保证它大致是平衡的——因为红黑树的高度不会无限增高，这样保证红黑树在最坏情况下都是高效的，不会出现普通排序二叉树的情况。 由于红黑树只是一个特殊的排序二叉树，因此对红黑树上的只读操作与普通排序二叉树上的只读操作完全相同，只是红黑树保持了大致平衡，因此检索性能比排序二叉树要好很多。 但在红黑树上进行插入操作和删除操作会导致树不再符合红黑树的特征，因此插入操作和删除操作都需要进行一定的维护，以保证插入节点、删除节点后的树依然是红黑树 https://www.jianshu.com/p/140f99add232https://www.cnblogs.com/guweiwei/p/7080971.htmlhttps://www.jianshu.com/p/bf73c8d50dc2","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"二叉树","slug":"二叉树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"java","slug":"java","permalink":"http://233hsysweb.ml/tags/java/"}],"author":"huanshi2"},{"title":"freeze_support error","slug":"freeze-support-error","date":"2020-06-05T07:07:00.000Z","updated":"2020-06-05T07:07:00.000Z","comments":true,"path":"2020/06/05/freeze-support-error/","link":"","permalink":"http://233hsysweb.ml/2020/06/05/freeze-support-error/","excerpt":"python3 error","text":"python3 error 1234567891011121314RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase. This probably means that you are not using fork to start your child processes and you have forgotten to use the proper idiom in the main module: if __name__ == &#x27;__main__&#x27;: freeze_support() ... The &quot;freeze_support()&quot; line can be omitted if the program is not going to be frozen to produce an executable. 加个if __name__ == &#39;__main__&#39;:就好了","categories":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/categories/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/tags/Python/"},{"name":"Error","slug":"Error","permalink":"http://233hsysweb.ml/tags/Error/"}],"author":"huanshi2"},{"title":"Java数组","slug":"Java数组","date":"2020-06-05T01:57:00.000Z","updated":"2020-06-05T01:57:00.000Z","comments":true,"path":"2020/06/05/Java数组/","link":"","permalink":"http://233hsysweb.ml/2020/06/05/Java%E6%95%B0%E7%BB%84/","excerpt":"1.数组（1）简介数组（Array）是有序的元素序列，数组是在堆内存中开辟一段连实的空间，并在此空间存放元素。数组长度一旦声明,不可改变不可追加","text":"1.数组（1）简介数组（Array）是有序的元素序列，数组是在堆内存中开辟一段连实的空间，并在此空间存放元素。数组长度一旦声明,不可改变不可追加 （2）结构特点 查找元素快 增删元素慢 1、数组查询快：数组的地址是连续的我们通过数组的首地址可以找到数组，通过数组的素引可以快速查找某一个元素 2、元素增删慢：数组的长度是固定的我们想要增加/删除一个元素，必须创建一个新数组把源数组的数据复制过来 3、增删元素，会在堆内存中频繁的创建新数组、复制数组中的元素、销毁数组，导致效率低下","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"author":"huanshi2"},{"title":"缓存","slug":"缓存","date":"2020-06-05T01:35:00.000Z","updated":"2020-06-05T01:35:00.000Z","comments":true,"path":"2020/06/05/缓存/","link":"","permalink":"http://233hsysweb.ml/2020/06/05/%E7%BC%93%E5%AD%98/","excerpt":"计算机系统会使用缓存技术来组织内存，访问数组相邻的元素会比访问不相邻的元素快很多。","text":"计算机系统会使用缓存技术来组织内存，访问数组相邻的元素会比访问不相邻的元素快很多。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"缓存","slug":"缓存","permalink":"http://233hsysweb.ml/tags/%E7%BC%93%E5%AD%98/"}],"author":"huanshi2"},{"title":"动态规划","slug":"动态规划","date":"2020-06-04T01:50:00.000Z","updated":"2020-06-04T01:50:00.000Z","comments":true,"path":"2020/06/04/动态规划/","link":"","permalink":"http://233hsysweb.ml/2020/06/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"动态规划问题总结1.斐波那契数列1.递归方法：","text":"动态规划问题总结1.斐波那契数列1.递归方法： 12345678public solutionFibonace()&#123; if(n == 0)&#123; return 0; &#125;else if(n == 1)&#123; return 1; &#125;else&#123; return solutionFibonacci(n-1)+solutionFibonacci(n-2); &#125; 动态规划方法：1234567891011121314public static int solutionFibonacci(int n)&#123; if(n==0)&#123; return 0; &#125;else if(n == 1)&#123; return 1; &#125;else&#123; int result[] = new int[n+1]; result[0] = 0; result[1] = 1; for(int i=2;i&lt;=n;i++)&#123; result[i] = result[i-1] + result[i-2]; &#125; return result[n]; &#125; 与之类似的还有： 跳台阶问题：每次只能跳一个或者两个台阶，跳到n层台阶上有几种方法 填充长方体问题：将一个21的长方体填充到2n的长方体中，有多少种方法 2.数组最大不连续递增子序列arr[] = {3,1,4,1,5,9,2,6,5}的最长递增子序列长度为4。即为：1,4,5,9 （1）设置一个数组temp，长度为原数组长度，数组第i个位置上的数字代表0…i上最长递增子序列， （2）当增加一个数字时，最大递增子序列可能变成前面最大的递增子序列+1，也可能就是前面最大递增子序列， （3）这需要让新增加进来的数字arr[i]跟前面所有数字比较大小， 当 arr[i] &gt; arr[j]，temp[i] = max{temp[j]}+1，其中，j 的取值范围为：0,1…i-1； 当 arr[i] &lt; arr[j]，temp[i] = max{temp[j]}，j 的取值范围为：0,1…i-1， 所以状态转换方程为temp[i]=max{temp[i-1], temp[i-1]+1} 1234567891011121314151617181920212223 public static int MaxChildArrayOrder(int a[]) &#123; int n = a.length; int temp[] = new int[n];//temp[i]代表0...i上最长递增子序列 for(int i=0;i&lt;n;i++)&#123; temp[i] = 1;//初始值都为1 &#125; for(int i=1;i&lt;n;i++)&#123; for(int j=0;j&lt;i;j++)&#123; if(a[i]&gt;a[j]&amp;&amp;temp[j]+1&gt;temp[i])&#123; //如果有a[i]比它前面所有的数都大，则temp[i]为它前面的比它小的数的那一个temp+1取得的最大值 temp[i] = temp[j]+1; &#125; &#125; &#125; int max = temp[0]; //从temp数组里取出最大的值 for(int i=1;i&lt;n;i++)&#123; if(temp[i]&gt;max)&#123; max = temp[i]; &#125; &#125; return max;&#125; 3.数组最大连续子序列和 如arr[] = {6,-1,3,-4,-6,9,2,-2,5}的最大连续子序列和为14。即为：9,2,-2,5 创建一个数组a，长度为原数组长度，不同位置数字a[i]代表0…i上最大连续子序列和，a[0]=arr[0]设置一个最大值max，初始值为数组中的第一个数字。当进来一个新的数字arr[i+1]时，判断到他前面数字子序列和sum+arr[i+1]跟arr[i+1]哪个大，前者大就保留前者，后者大就说明前面连续数字加起来都不如后者一个新进来的数字大，前面数字就可以舍弃，从arr[i+1]开始，每次比较完都跟max比较一下，最后的max就是最大值。DP[i] = max{DP[i-1] + A[i],A[i]} 123456789101112131415161718192021222324252627282930313233public void lianxuzixuliehe1()&#123; int[] a = &#123;6,-1,3,-4,-6,9,2,-2,5&#125;; int n = a.length; int max = a[0]; int sum = a[0]; for(int i=1;i&lt;n;i++)&#123; sum = Math.max(sum+a[i], a[i]); if(sum&gt;=max)&#123; max = sum; &#125; &#125; System.out.println(max); &#125; public void lianxuzixuliehe()&#123; int[] arr = &#123;6,-1,3,-4,-6,9,2,-2,5&#125;; int n = arr.length; int max = arr[0]; int sum = arr[0]; for(int i = 1;i &lt; n;i++)&#123; if(sum &lt; 0)&#123; sum = arr[i]; &#125; else &#123; sum = sum + arr[i]; &#125; if(sum &gt; max) &#123; max = sum; &#125; &#125; System.out.println(max); &#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"}],"author":"huanshi2"},{"title":"Junit测试单元","slug":"Junit测试单元","date":"2020-06-02T12:14:00.000Z","updated":"2020-06-02T12:14:00.000Z","comments":true,"path":"2020/06/02/Junit测试单元/","link":"","permalink":"http://233hsysweb.ml/2020/06/02/Junit%E6%B5%8B%E8%AF%95%E5%8D%95%E5%85%83/","excerpt":"junit测试单元1.什么是 JUnit？JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。","text":"junit测试单元1.什么是 JUnit？JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。 JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。 2.特点： JUnit 是一个开放的资源框架，用于编写和运行测试。 提供注释来识别测试方法。 提供断言来测试预期结果。 提供测试运行来运行测试。 JUnit 测试允许你编写代码更快，并能提高质量。 JUnit 优雅简洁。没那么复杂，花费时间较少。 JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。 JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。 JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。 3.什么是一个单元测试用例?单元测试用例是一部分代码，可以确保另一端代码（方法）按预期工作。为了迅速达到预期的结果，就需要测试框架。JUnit 是 java 编程语言理想的单元测试框架。 一个正式的编写好的单元测试用例的特点是：已知输入和预期输出，即在测试执行前就已知。已知输入需要测试的先决条件，预期输出需要测试后置条件。 每一项需求至少需要两个单元测试用例：一个正检验，一个负检验。如果一个需求有子需求，每一个子需求必须至少有正检验和负检验两个测试用例。 测试用class 123456789import org.junit.Test;import static org.junit.Assert.assertEquals;public class TestJunit &#123; @Test public void testAdd() &#123; String str= &quot;Junit is working fine&quot;; assertEquals(&quot;Junit is working fine&quot;,str); &#125;&#125; 测试class 12345678910111213import org.junit.runner.JUnitCore;import org.junit.runner.Result;import org.junit.runner.notification.Failure;public class TestRunner &#123; public static void main(String[] args) &#123; Result result = JUnitCore.runClasses(TestJunit.class); for (Failure failure : result.getFailures()) &#123; System.out.println(failure.toString()); &#125; System.out.println(result.wasSuccessful()); &#125;&#125; 输出true","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"测试","slug":"测试","permalink":"http://233hsysweb.ml/tags/%E6%B5%8B%E8%AF%95/"},{"name":"junit","slug":"junit","permalink":"http://233hsysweb.ml/tags/junit/"}],"author":"huanshi2"},{"title":"LinkedHashMap","slug":"LinkedHashMap","date":"2020-06-02T11:45:00.000Z","updated":"2020-06-02T11:45:00.000Z","comments":true,"path":"2020/06/02/LinkedHashMap/","link":"","permalink":"http://233hsysweb.ml/2020/06/02/LinkedHashMap/","excerpt":"LinkedHashMap使用与实现LinkedHashMap","text":"LinkedHashMap使用与实现LinkedHashMap HashMap是无序的，LinkedHashMap是有序的 1.简单使用LinkedHashMap是有序的，且默认为插入顺序。 12345678910111213@Testpublic void linkHp() &#123; Map&lt;String, String&gt; linkedHashMap = new LinkedHashMap&lt;String, String&gt;(); linkedHashMap.put(&quot;name1&quot;, &quot;josan1&quot;); linkedHashMap.put(&quot;name2&quot;, &quot;josan2&quot;); linkedHashMap.put(&quot;name3&quot;, &quot;josan3&quot;); Set&lt;Map.Entry&lt;String, String&gt;&gt; set = linkedHashMap.entrySet(); for (Map.Entry&lt;String, String&gt; entry : set) &#123; String key = (String) entry.getKey(); String value = (String) entry.getValue(); System.out.println(&quot;key:&quot; + key + &quot;,value:&quot; + value); &#125; &#125; 2.构造方法LinkedHashMap存储数据是有序的，而且分为两种：插入顺序和访问顺序。 这里accessOrder设置为false，表示不是访问顺序而是插入顺序存储的，这也是默认值，表示LinkedHashMap中存储的顺序是按照调用put方法插入的顺序进行排序的 LinkedHashMap构造函数，主要就是调用HashMap构造函数初始化了一个Entry[] table，然后调用自身的init初始化了一个只有头结点的双向链表。完成了如下操作： 当put元素时，不但要把它加入到HashMap中去，还要加入到双向链表中，所以可以看出LinkedHashMap就是HashMap+双向链表，下面用图来表示逐步往LinkedHashMap中添加数据的过程，红色部分是双向链表，黑色部分是HashMap结构，header是一个Entry类型的双向链表表头，本身不存储数据。 加入一个Entry时 再加入一个元素Entry2，假设index 为15 当再加入一个元素Entry3, 假设index也是0：就是LinkedHashMap的put的所有过程了，总体来看，跟HashMap的put类似，只是多了把新增的Entry加入到双向链表中。","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"},{"name":"LinkedHashMap","slug":"LinkedHashMap","permalink":"http://233hsysweb.ml/tags/LinkedHashMap/"}],"author":"huanshi2"},{"title":"HashMap","slug":"HashMap","date":"2020-06-02T00:00:00.000Z","updated":"2020-06-02T00:00:00.000Z","comments":true,"path":"2020/06/02/HashMap/","link":"","permalink":"http://233hsysweb.ml/2020/06/02/HashMap/","excerpt":"HashMap原理 1.使用 HashMap很方便地为我们提供了key-value的形式存取数据，使用put方法存数据，get方法取数据。","text":"HashMap原理 1.使用 HashMap很方便地为我们提供了key-value的形式存取数据，使用put方法存数据，get方法取数据。 2.定义 HashMap继承了Map接口，实现了Serializable等接口。HashMap的数据是存在table数组中的，它是一个Entry数组，Node是HashMap的一个静态内部类，看看它的定义。 12345static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next; 可见，Node其实就是封装了key和value，也就是我们put方法参数的key和value会被封装成Entry，然后放到table这个Entry数组中。但值得注意的是，它有一个类型为Entry的next，它是用于指向下一个Entry的引用，所以table中存储的是Entry的单向链表。 3.构造方法构造方法一共有四个initialCapacity是HashMap的初始化容量(即初始化table时用到)，默认为16。 loadFactor为负载因子，默认为0.75。threshold是HashMap进行扩容的阀值，当HashMap的存放的元素个数超过该值时，会进行扩容，它的值为HashMap的容量乘以负载因子。比如，HashMap的默认阀值为16*0.75，即12 4.put操作 5.扩容扩容就是先创建一个长度为原来2倍的新table，然后通过遍历的方式，将老table的数据，重新计算hash并存储到新table的适当位置，最后使用新的table，并重新计算HashMap的扩容阀值。 6.get取值，最简单粗暴的方式肯定是遍历table，并且遍历table中存放的单向链表，这样的话，get的时间复杂度就是O(n的平方)，但是HashMap的put本身就是有规律的存储，所以，取值时，可以按照规律去降低时间复杂度。 7.使用entrySet取数据HashMap除了提供get方法，通过key来取数据的方式，还提供了entrySet方法来遍历HashMap的方式取数据。 可知，HashMap的遍历，是先遍历table，然后再遍历table上每一条单向链表，如上述的HashMap遍历出来的顺序就是Entry1、Entry2….Entry6，但显然，这不是插入的顺序，所以说：HashMap是无序的。 8.对key为null的处理在HashMap中，不允许key重复，而key为null的情况，只允许一个key为null的Entry，并且存储在table[0]的单向链表上。 9.remove方法先根据key算出hash，然后根据hash得到在table上的index，再遍历talbe[index]的单向链表，这时候需要看要删除的元素是否就是单向链表的表头，如果是，则直接让table[index]=next，即删除了需要删除的元素；如果不是单向链表的头，那表示有前面的结点，则让pre.next = next，也删除了需要删除的元素。 10.线程安全问题由前面HashMap的put和get方法分析可得，put和get方法真实操作的都是Entry[] table这个数组，而所有操作都没有进行同步处理，所以HashMap是线程不安全的。如果想要实现线程安全，推荐使用ConcurrentHashMap。 总结 HashMap是基于哈希表实现的，用Entry[]来存储数据，而Entry中封装了key、value、hash以及Entry类型的next HashMap存储数据是无序的 hash冲突是通过拉链法解决的 HashMap的容量永远为2的幂次方，有利于哈希表的散列 HashMap不支持存储多个相同的key，且只保存一个key为null的值，多个会覆盖 put过程，是先通过key算出hash，然后用hash算出应该存储在table中的index，然后遍历table[index]，看是否有相同的key存在，存在，则更新value；不存在则插入到table[index]单向链表的表头，时间复杂度为O(n) get过程，通过key算出hash，然后用hash算出应该存储在table中的index，然后遍历table[index]，然后比对key，找到相同的key，则取出其value，时间复杂度为O(n) HashMap是线程不安全的，如果有线程安全需求，推荐使用ConcurrentHashMap。 作者：艺旭家链接：https://www.jianshu.com/p/dde9b12343c1来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 https://www.jianshu.com/p/dde9b12343c1","categories":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"}],"author":"huanshi2"},{"title":"python2.7 向Elasticsearch中插入数据","slug":"python2-7-向Elasticsearch中插入数据","date":"2020-06-02T00:00:00.000Z","updated":"2020-06-02T00:00:00.000Z","comments":true,"path":"2020/06/02/python2-7-向Elasticsearch中插入数据/","link":"","permalink":"http://233hsysweb.ml/2020/06/02/python2-7-%E5%90%91Elasticsearch%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/","excerpt":"1.首先需要创建索引和typeElasticsearch 6.x版本以上type逐渐放弃使用 创建索引可以使用transport client 也可以使用highlevelrestclient 来操作。单机版本指定分片1，副本0.","text":"1.首先需要创建索引和typeElasticsearch 6.x版本以上type逐渐放弃使用 创建索引可以使用transport client 也可以使用highlevelrestclient 来操作。单机版本指定分片1，副本0. 参考https://github.com/huanshi2/EHRelasticsearch 2.使用9200端口post数据Person.json结构： 123&#123;&quot;subj&quot;: &quot;A.R.拉曼&quot;, &quot;po&quot;: [&#123;&quot;pred&quot;: &quot;birthDate&quot;, &quot;obj&quot;: &quot;1966年1月6日&quot;&#125;]&#125;&#123;&quot;subj&quot;: &quot;A.帕拉第奥&quot;, &quot;po&quot;: [&#123;&quot;pred&quot;: &quot;birthPlace&quot;, &quot;obj&quot;: &quot;帕多瓦&quot;&#125;, &#123;&quot;pred&quot;: &quot;nationality&quot;, &quot;obj&quot;: &quot;意大利&quot;&#125;, &#123;&quot;pred&quot;: &quot;代表作品&quot;, &quot;obj&quot;: &quot;建筑四论&quot;&#125;]&#125;&#123;&quot;subj&quot;: &quot;ALEX（寂静岭5中主角）&quot;, &quot;po&quot;: [&#123;&quot;pred&quot;: &quot;birthDate&quot;, &quot;obj&quot;: &quot;1985年&quot;&#125;, &#123;&quot;pred&quot;: &quot;gender&quot;, &quot;obj&quot;: &quot;男&quot;&#125;, &#123;&quot;pred&quot;: &quot;年龄&quot;, &quot;obj&quot;: &quot;22（2007年）&quot;&#125;]&#125; insert.py 123456789101112131415161718192021222324252627282930313233try: import simplejson as jsonexcept: import jsonimport sysimport requestsfrom tqdm import tqdmdef bulk_insert(base_url, data): response = requests.post(base_url, headers=&#123;&quot;Content-Type&quot;:&quot;application/x-ndjson&quot;&#125;, data=data)def begin_insert_job(index_name,json_filepath, bulk_size=1000): base_url = &quot;http://localhost:9200/&quot; + index_name + &quot;/&quot; + &quot;_doc&quot; + &quot;/_bulk&quot; f = open(json_filepath) cnt, es_id = 0, 1 data = &quot;&quot; for line in tqdm(f): action_meta = &#x27;&#123;&quot;index&quot;: &#123;&quot;_id&quot;:&quot;&#x27; + str(es_id) + &#x27;&quot;&#125;&#125;&#x27; data = data + action_meta + &quot;\\n&quot; + line es_id += 1 cnt += 1 if cnt &gt;= bulk_size: bulk_insert(base_url, data) cnt, data = 0, &quot;&quot; if not (es_id % bulk_size): print es_id if cnt: bulk_insert(base_url, data)if __name__ == &#x27;__main__&#x27;: begin_insert_job(&quot;demo&quot;,&quot;./data/Person.json&quot;) 必须使用python2 bulk: Elasticsearch 批量操作 requests函数需要添加请求头","categories":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/categories/Python/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://233hsysweb.ml/tags/Elasticsearch/"},{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/tags/Python/"}],"author":"huanshi2"},{"title":"判断字符串是否表示数值","slug":"正则表达式","date":"2020-06-01T02:05:00.000Z","updated":"2020-06-01T02:05:00.000Z","comments":true,"path":"2020/06/01/正则表达式/","link":"","permalink":"http://233hsysweb.ml/2020/06/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"题目描述请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。","text":"题目描述请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。 链接：https://www.nowcoder.com/questionTerminal/6f8c901d091949a5837e24bb82a731f2?answerType=1&amp;f=discussion来源：牛客网 ^和 美元符号框定正则表达式，它指引这个正则表达式对文本中的所有字符都进行匹配。 如果省略这些标识，那么只要一个字符串中包含一个数字这个正则表达式就会进行匹配。 如果仅包含 ^ ，它将匹配以一个数字开头的字符串。如果仅包含$ ，则匹配以一个数字结尾的字符串。 [-+]? 正负号后面的 ? 后缀表示这个负号是可选的,表示有0到1个负号或者正号 \\\\d* \\将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。\\d的含义和[0-9]一样。它匹配一个数字。后缀 * 指引它可匹配零个或者多个数字。 (?:\\\\.\\\\d*)? (?: …)表示一个可选的非捕获型分组。* 指引这个分组会匹配后面跟随的0个或者多个数字的小数点。?匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。(?:[eE][+\\\\-]?\\d+)? 这是另外一个可选的非捕获型分组。它会匹配一个e(或E)、一个可选的正负号以及一个或多个数字。 &#123;&#125;一般是用来匹配的长度","categories":[{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"}],"author":"huanshi2"},{"title":"Content-Type header [] is not supported 错误","slug":"Content-Type-header-is-not-supported-错误","date":"2020-05-30T13:42:00.000Z","updated":"2020-05-30T13:42:00.000Z","comments":true,"path":"2020/05/30/Content-Type-header-is-not-supported-错误/","link":"","permalink":"http://233hsysweb.ml/2020/05/30/Content-Type-header-is-not-supported-%E9%94%99%E8%AF%AF/","excerpt":"","text":"Content-Type header [] is not supported error解决办法：添加 &#39;Content-Type&#39;: &#39;application/json&#39;","categories":[{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/categories/Python/"}],"tags":[],"author":"huanshi2"},{"title":"标注中出现的一些问题","slug":"标注中出现的一些问题","date":"2020-05-30T11:05:00.000Z","updated":"2020-05-30T11:05:00.000Z","comments":true,"path":"2020/05/30/标注中出现的一些问题/","link":"","permalink":"http://233hsysweb.ml/2020/05/30/%E6%A0%87%E6%B3%A8%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","excerpt":"1.过敏史过敏史不需要标最后的“史”字，尽量不标注标点符号 否认药物食物过敏 食物、药物过敏 如果是在一句话中，直接全部标注","text":"1.过敏史过敏史不需要标最后的“史”字，尽量不标注标点符号 否认药物食物过敏 食物、药物过敏 如果是在一句话中，直接全部标注 2.否认否认直接标否认 3.结果已治愈 标注为结果 4.时间30年前 标注要加前 术后一周全标 5.既往用药不标用量 6.病情普通的描述句子不标注 这种尽量标注 7.辅助检查检查项目和结果都标出来 最高，最低都标注 8.外伤史疤痕也要标 摔倒不标，标盆骨破裂 9.手术史更换起搏器也算手术史，不要漏标","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"nlp","slug":"nlp","permalink":"http://233hsysweb.ml/tags/nlp/"},{"name":"数据标注","slug":"数据标注","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8/"}],"author":["huanshi2"]},{"title":"KBQA的核心任务","slug":"KBQA的核心任务","date":"2020-05-29T08:17:00.000Z","updated":"2020-05-29T08:17:00.000Z","comments":true,"path":"2020/05/29/KBQA的核心任务/","link":"","permalink":"http://233hsysweb.ml/2020/05/29/KBQA%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BB%BB%E5%8A%A1/","excerpt":"https://zhuanlan.zhihu.com/p/114125502 知识体系构建（KB） 基于业务特点，梳理知识体系； 非结构化输入文本抽取三元组（主实体Subject，关系Predicate，客实体Object），并以特定方式进行存储（通常为图数据库）。如：”周星驰的电影功夫上映于2004年”，包含两对三元组（周星驰，拍摄的电影，功夫），（功夫，上映时间，2004年）；","text":"https://zhuanlan.zhihu.com/p/114125502 知识体系构建（KB） 基于业务特点，梳理知识体系； 非结构化输入文本抽取三元组（主实体Subject，关系Predicate，客实体Object），并以特定方式进行存储（通常为图数据库）。如：”周星驰的电影功夫上映于2004年”，包含两对三元组（周星驰，拍摄的电影，功夫），（功夫，上映时间，2004年）； 标准问答查询（QA）(1)关系实体抽取 查询语句抽取二元组（主实体Subject，关系Predicate）； 如：”功夫上映于哪一年”，包含一对二元组（功夫，上映时间）； (2)实体消歧 解决同名实体产生歧义的问题； 如：周星驰和星爷应对应同一实体； (3)关系链接 将抽取得到的实体与关系进行链接，保证链接后的实体关系在知识体系中是有效的； 如：豆瓣影评任务下询问”周星驰的母亲叫什么名字”，所得到的二元组（周星驰，母亲）是非法的，因为知识体系中未建立该关系； (4)结果查询 在知识体系中检索合法的关系实体对，获取结果输出。","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"知识图谱","slug":"知识图谱","permalink":"http://233hsysweb.ml/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"nlp","slug":"nlp","permalink":"http://233hsysweb.ml/tags/nlp/"}],"author":"huanshi2"},{"title":"GBK编码错误","slug":"GBK编码错误","date":"2020-05-28T14:00:00.000Z","updated":"2020-05-28T14:00:00.000Z","comments":true,"path":"2020/05/28/GBK编码错误/","link":"","permalink":"http://233hsysweb.ml/2020/05/28/GBK%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/","excerpt":"","text":"1.https://www.cnblogs.com/ruiy/p/9091010.html 2.json.dumps写入错误：https://www.cnblogs.com/shiju/p/9511916.html new_ent_j = json.dumps(new_ent,ensure_ascii=False) ascii参数要为false，否则json会变为gbk编码","categories":[{"name":"编程","slug":"编程","permalink":"http://233hsysweb.ml/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"GBK编码","slug":"GBK编码","permalink":"http://233hsysweb.ml/tags/GBK%E7%BC%96%E7%A0%81/"},{"name":"json","slug":"json","permalink":"http://233hsysweb.ml/tags/json/"},{"name":"python","slug":"python","permalink":"http://233hsysweb.ml/tags/python/"}],"author":"huanshi2"},{"title":"知识图谱参考","slug":"知识图谱参考","date":"2020-05-28T08:48:00.000Z","updated":"2020-05-28T08:48:00.000Z","comments":true,"path":"2020/05/28/知识图谱参考/","link":"","permalink":"http://233hsysweb.ml/2020/05/28/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%8F%82%E8%80%83/","excerpt":"https://zhuanlan.zhihu.com/p/37057052 建设一个知识图谱系统，需要包括：知识建模、知识获取、知识融合、知识存储和知识应用5大部分： 1、知识建模：构建多层级知识体系，将抽象的知识、属性、关联联关系等信息，进行定义、组织、管理，转化成现实的数据库。","text":"https://zhuanlan.zhihu.com/p/37057052 建设一个知识图谱系统，需要包括：知识建模、知识获取、知识融合、知识存储和知识应用5大部分： 1、知识建模：构建多层级知识体系，将抽象的知识、属性、关联联关系等信息，进行定义、组织、管理，转化成现实的数据库。 2、知识获取：将不同来源、不同结构的数据转化成图谱数据，包括结构化数据、半结构化数据（解析）、知识标引、知识推理等，保障数据的有效性和完整性。 3、知识融合：将多个来源、重复的知识信息进行融合，包括融合计算、融合计算引擎、手动操作融合等。 4、知识存储：根据业务场景提供合理的知识存储方案，存储方案具备灵活、多样化、可拓展特性。 5、知识应用：为已构建知识图谱提供图谱检索、知识计算、图谱可视化等分析与应用能力。并提供各类知识计算的SDK，包含图谱基础应用类、图结构分析类、图谱语义应用类、自然语言处理类、图数据获取类、图谱统计类、数据集数据获取类、数据集统计类。 结构化新冠知识图谱 https://zhuanlan.zhihu.com/p/143956563 搜索中的Query扩展技术 https://zhuanlan.zhihu.com/p/138551957 知识图谱的三大典型应用知识图谱的典型应用包括语义搜索、智能问答以及可视化决策支持三种。 1、语义搜索 当前基于关键词的搜索技术在知识图谱的知识支持下可以上升到基于实体和关系的检索，称之为语义搜索。 语义搜索可以利用知识图谱可以准确地捕捉用户搜索意图，进而基于知识图谱中的知识解决传统搜索中遇到的关键字语义多样性及语义消歧的难题，通过实体链接实现知识与文档的混合检索。 语义检索需要考虑如何解决自然语言输入带来的表达多样性问题，同时需要解决语言中实体的歧义性问题。同时借助于知识图谱，语义检索需要直接给出满足用户搜索意图的答案，而不是包含关键词的相关网页的链接。 2、智能问答 问答系统（Question Answering，QA）是信息服务的一种高级形式，能够让计算机自动回答用户所提出的问题。不同于现有的搜索引擎，问答系统返回用户的不再是基于关键词匹配的相关文档排序，而是精准的自然语言形式的答案。 智能问答系统被看作是未来信息服务的颠覆性技术之一，亦被认为是机器具备语言理解能力的主要验证手段之一。 智能问答需要针对用户输入的自然语言进行理解，从知识图谱中或目标数据中给出用户问题的答案，其关键技术及难点包括准确的语义解析、正确理解用户的真实意图、以及对返回答案的评分评定以确定优先级顺序。 3、可视化决策支持 可视化决策支持是指通过提供统一的图形接口，结合可视化、推理、检索等，为用户提供信息获取的入口。例如，决策支持可以通过图谱可视化技术对创投图谱中的初创公司发展情况、投资机构投资偏好等信息进行解读，通过节点探索、路径发现、关联探寻等可视化分析技术展示公司的全方位信息。 可视化决策支持需要考虑的关键问题包括通过可视化方式辅助用户快速发现业务模式、提升可视化组件的交互友好程度、以及大规模图环境下底层算法的效率等。","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"知识图谱","slug":"知识图谱","permalink":"http://233hsysweb.ml/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"}],"author":"huanshi2"},{"title":"医学知识图谱","slug":"知识图谱","date":"2020-05-28T08:24:00.000Z","updated":"2020-05-28T08:24:00.000Z","comments":true,"path":"2020/05/28/知识图谱/","link":"","permalink":"http://233hsysweb.ml/2020/05/28/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/","excerpt":"构建医学知识图谱本系统在开发过程中，涉及到的技术与框架繁多，为了使各个业务系统分离，使用微服务架构，为了进一步提高系统并发量与高可用，使用分布式技术。系统架构如图六所示：","text":"构建医学知识图谱本系统在开发过程中，涉及到的技术与框架繁多，为了使各个业务系统分离，使用微服务架构，为了进一步提高系统并发量与高可用，使用分布式技术。系统架构如图六所示： (1)针对支撑知识图谱的Neo4j数据库、支撑快速检索医学词典的Elastic Search数据库与提供医学知识库的MySQL数据库，为了进一步提升三个数据库的读写能力，使用分布式架构，将三者有关的功能模块进行分离。 (2)在系统的前后端分离上，使用Nginx服务器进行静态资源的读写，进一步提升系统的吞吐等待量与高可用。 (3)使用Spring Cloud框架用于分离各个系统功能模块，便于后续系统的升级与维护。 知识图谱可以大致概括为节点与关系的组成图谱，非常有助于本项目对医疗数据的分析与研究。关于知识图谱的节点设计，我们抽取医疗知识库中的全部症状词与全部疾病词构成了知识图谱的全部节点，这部分数据也成为了本项目的医学词典。每个节点都有许多属性，包括科室、症状、病因、并发症、治疗、预防等，但这些属性都是以长文本的形式存储，医学命名实体并没有被单独标注区分。前面已经说明，研究的主要方向是针对疾病与症状的联系，我们利用医学词典对疾病的症状属性进行分词。由此症状节点与疾病节点有了直接的关联，此时的节点知识图谱如图二所示： 当每个疾病节点都与它所属的症状或一些并发症进行了关联之后，相互之间难免出现交叉。以图二所示举例，偏头痛会导致一系列症状与并发症，这种关系以箭头指向表示，偏头痛指向丛集性头痛，丛集性头痛又指向症状词头痛，偏头痛也指向了头痛，各种复杂的疾病、症状关系正是通过这种复杂的指向关系（也就是知识图谱），进行了清晰的展示。 https://github.com/ystcode/Doctor","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"知识图谱","slug":"知识图谱","permalink":"http://233hsysweb.ml/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"nlp","slug":"nlp","permalink":"http://233hsysweb.ml/tags/nlp/"}],"author":"huanshi2"},{"title":"WordNet和中文Wordnet","slug":"wordnet","date":"2020-05-28T06:35:00.000Z","updated":"2020-05-28T06:35:00.000Z","comments":true,"path":"2020/05/28/wordnet/","link":"","permalink":"http://233hsysweb.ml/2020/05/28/wordnet/","excerpt":"1. WordNetWordNet是由Princeton 大学的心理学家，语言学家和计算机工程师联合设计的一种基于认知语言学的英语词典。它不是光把单词以字母顺序排列，而且按照单词的意义组成一个“单词的网络”。 它是一个覆盖范围宽广的英语词汇语义网。名词，动词，形容词和副词各自被组织成一个同义词的网络，每个同义词集合都代表一个基本的语义概念，并且这些集合之间也由各种关系连接。","text":"1. WordNetWordNet是由Princeton 大学的心理学家，语言学家和计算机工程师联合设计的一种基于认知语言学的英语词典。它不是光把单词以字母顺序排列，而且按照单词的意义组成一个“单词的网络”。 它是一个覆盖范围宽广的英语词汇语义网。名词，动词，形容词和副词各自被组织成一个同义词的网络，每个同义词集合都代表一个基本的语义概念，并且这些集合之间也由各种关系连接。 WordNet包含描述概念含义，一义多词，一词多义，类别归属，近义，反义等问题，访问以下网页，可使用wordnet的基本功能 http://wordnetweb.princeton.edu/perl/webwn 部分功能: (1) 上位词/下位词 (2) 同义词/反义词 (3) 蕴涵关系 (4) 整体与部位 (5) 计算概念之间距离 2. 中文词汇网路:http://openkg.cn/dataset/chinese-wordnet OpenKG收集和整理国内国外重要的开放知识库和知识图谱项目，并组织整理相关的中文资料免费对外开放。 中文词汇网路 (Chinese Wordnet, 以下简称中文词网) 计画，目的是在提供完整的中文词义 (sense) 区分与词汇语意关系知识库。相信词义的区分与表达，必须建立在完善的词汇语意学 (lexical semantics) 理论与知识本体 (ontology) 架构基础上。在词义理论与认知研究方面，这个详细分析的词汇知识库系统，将成為语言学研究的基本参考资料。在实际的应用上，这个资料库可望成為中文语言处理与知识工程不可或缺的基底架构。 本计划自 2003 年起，迄今累积了近十年的研究成果，对词义区分定义，与词义知识表达方式，渐次做了修正。建构过程中，也曾发表於国内外相关研究机关与数个国际研讨会议，得到了许多有价值的建议。中文词网的网路搜寻介面，在 2006 年於中央研究院语言学研究所正式啟用，提供给各界检索使用。到 2010 计画执行结束前，网站资料与技术报告内容皆作同步更新。为了永续经营此项珍贵的中文词汇资源，目前计画网站转由国立台湾大学语言学研究所维护。 CSC中文语义词库: CSC 是一个自主研制的软件系统, 核心是一个中文语义词库。该版本可查阅 18 万以上中文词语、22 万以上义项的同义、分类、反义等方面的语义信息, 其中含有超过 50 种关系类型、超过 200 万个关系实例, 大约 13 万的词语或义项带有同义词。整个词库呈现为比较复杂的网络结构, 并带有多种检索手段和显示方式。该词库也是一种较简化的知识本体或知识库, 有类似著名英文词库 WordNet 的用途, 可作为智能搜索、自然语言处理等领域的辅助资源。 cwb中文分类词库 中文语义词库: 这是一个略具规模的中文语义词库, 也是稍有特色的汉语语义词典。它含有 10 万以上的词条, 每个词条通过关系比较密切的相关词 (例如同义词、反义词、上位词、下位词等) 与其它词条相连结。整个词库呈现为比较复杂的网络结构, 并带有多种检索手段和显示方式。","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"实体关系","slug":"实体关系","permalink":"http://233hsysweb.ml/tags/%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://233hsysweb.ml/tags/elasticsearch/"}],"author":"huanshi2"},{"title":"二进制位运算","slug":"二进制运算","date":"2020-05-27T02:15:00.000Z","updated":"2020-05-27T02:15:00.000Z","comments":true,"path":"2020/05/27/二进制运算/","link":"","permalink":"http://233hsysweb.ml/2020/05/27/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BF%90%E7%AE%97/","excerpt":"1. 二进制中的负数原码：一个整数按照绝对值的大小转化成二进制的数 反码：将二进制数按位取反 补码：反码加 1 负数：以正数的补码表示","text":"1. 二进制中的负数原码：一个整数按照绝对值的大小转化成二进制的数 反码：将二进制数按位取反 补码：反码加 1 负数：以正数的补码表示 （1）机器都是使用补码，运算也是使用补码运算。 （2）正数的原码补码反码都一样。 （3）补码与原码相互转换，其运算过程是相同 2. 运算符1、定义： 符号 名称 实际操作 简单记忆 &lt;&lt; 左移 2 进制左边补齐0位 乘以2的N次方 &gt;&gt; 右移 2 进制右边减少位数 除以2的N次方（其实并非如此，要舍去小数点） &lt;&lt;&lt; 无符号右移 java中 整数位 32位 （1）左移： 将一个运算对象的各二进制位全部左移若干位（左边的二进制丢弃，右边补0） 12 &lt;&lt; 2 = 48 -14 &lt;&lt;2 =-56 十进制运算方法：12 * 2^2 = 48 -14 * 2^2 = -56 -14的左移操作 原码： 00000000 00000000 00000000 00001110 反码： 11111111 11111111 11111111 11110001 补码： 11111111 11111111 11111111 11110010 所以-14 的二进制是 11111111 11111111 11111111 11110010 左移两位 补码：11111111 11111111 11111111 11001000 反码：11111111 11111111 11111111 11000111 原码： 00000000 00000000 00000000 00111000 源码代表56 因为有符号数，所以结果是-56 （2）右移： 将一个运算对象的各二进制位全部右移若干位，正数左补0，负数左补1. 4 &gt;&gt; 2 = 1 -14 &gt;&gt; 2 = -4 3. 位运算1、一位加法 普通加法 异或 1 + 1 = 0 1 ^ 1 = 0(错误) 1 + 0 = 1 1 ^ 0 = 1(正确) 0 + 1 = 1 0 ^ 1 = 1(正确) 0 + 0 = 0 0 ^ 0 = 0(正确) 与运算 1 &amp; 1 = 1(进位) 1 &amp; 0 = 0(不进位) 0 &amp; 1 = 0(不进位) 0 &amp; 0 = 0(不进位) 在位运算中，我们用“&lt;&lt;”表示向左移动一位，也就是“进位”。那么我们就可以得到如下的表达式 ( x &amp; y ) &lt;&lt; 1 拥有了两个基本表达式： 执行加法 x ^ y 进位操作 ( x &amp; y ) &lt;&lt; 1 2、二位加法例子： *正确的加法计算：11+01 = 100 * 使用位运算实现二位加法： 按位加法： res1 = 11 ^ 01 = 10 与运算进位： res2 = (11 &amp; 01) &lt;&lt; 1 = ( 01 ) &lt;&lt; 1 = 010 res1 ^ res2 = 10 ^ 010 = 00 (10 &amp; 10) &lt;&lt; 1 = 100 3、更高位的加法继续推理可以得出三位数的加法只需重复的计算三次得到第一个表达式的值就是计算出来的结果 三位加法： 101 ^ 111 = 0010 （没有处理进位的加法）(101 &amp; 111) &lt;&lt; 1 = 101 &lt;&lt; 1 = 1010 （此处得到哪一位需要加上进位，为1的地方表示有进位需要加上） 0010 ^ 1010 = 1000 （没有处理进位的加法 + 进位 = 没有处理进位的加法） (0010 &amp; 1010) &lt;&lt; 1 = 0010 &lt;&lt; 1 = 00100 （查看是否有新的进位需要处理） 1000 ^ 00100 （没有处理进位的加法 + 进位 = 没有处理进位的加法） (1000 &amp; 00100) &lt;&lt; 1 = 00000 &lt;&lt; 1 = 000000 (进位为0，所以没有要处理的进位了) https://www.jianshu.com/p/415412d99c76 https://www.nowcoder.com/questionTerminal/59ac416b4b944300b617d4f7f111b215?answerType=1&amp;f=discussion","categories":[{"name":"位运算","slug":"位运算","permalink":"http://233hsysweb.ml/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"}],"tags":[{"name":"二进制","slug":"二进制","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"}],"author":"huanshi2"},{"title":"使用java restclient API 操作Elasticsearch","slug":"使用java-restclient-API-操作Elasticsearch","date":"2020-05-27T00:54:50.000Z","updated":"2020-05-27T00:54:50.000Z","comments":true,"path":"2020/05/27/使用java-restclient-API-操作Elasticsearch/","link":"","permalink":"http://233hsysweb.ml/2020/05/27/%E4%BD%BF%E7%94%A8java-restclient-API-%E6%93%8D%E4%BD%9CElasticsearch/","excerpt":"使用Java操作Elasticsearch-6.8.41. 确定elasticsearch是否已经在本机运行在浏览器中输入http://localhost:9200/查看elasticsearch是否成功运行","text":"使用Java操作Elasticsearch-6.8.41. 确定elasticsearch是否已经在本机运行在浏览器中输入http://localhost:9200/查看elasticsearch是否成功运行 如果出现如上图结果，则说明elasticsearch成功运行在本机，如果没有出现上图结果，可以先检查elsaticsearch开发环境。 2. 搭建maven工程，添加依赖pom.xml文件配置如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;EHRelasticsearch&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- elasticsearch的客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt; &lt;artifactId&gt;transport&lt;/artifactId&gt; &lt;version&gt;6.8.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt; &lt;version&gt;6.8.4&lt;/version&gt; &lt;/dependency&gt; &lt;!-- elasticsearch依赖2.x的log4j --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.13.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- junit单元测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 其中elasticsearch的版本为6.8.4 junit依赖： Junit是xUnit的一个子集，在c++,paython,java语言中测试框架的名字都不相同，xUnit是一套基于测试驱动开发的测试框架。 其中的断言机制：将程序预期的结果与程序运行的最终结果进行比对，确保对结果的可预知性。 https://blog.csdn.net/fulishafulisha/article/details/80158392 直接引用csdn博主fulisha_la的总结：修饰符及其作用： @BeforeClass修饰的方法会在所有方法被调用前执行，且该方法时静态的，所以当测试类被加载后就接着运行它，而且在内存中他只会存在一份实例，他比较适合加载配置文件（针对所有测试，只执行一次 @AfterClass所修饰的方法通常用来对资源管理，如关闭数据库连接（针对所有测试，只执行一次 ） @Before和@After 会在每个测试方法前后各执行一次 @Test：测试方法，在这里可以测试期望异常和超时时间 @Ignore：忽略的测试方法 3. Java操作elasticsearch直接上代码，连接es后再查找一条数据 123456789101112131415161718192021222324252627282930313233343536373839package es;import org.elasticsearch.action.get.GetResponse;import org.elasticsearch.client.transport.TransportClient;import org.elasticsearch.common.settings.Settings;import org.elasticsearch.common.transport.TransportAddress;import org.elasticsearch.transport.client.PreBuiltTransportClient;import java.net.InetAddress;/** * @program: EHRelasticsearch * @description: 使用java连接elasicsearch * @author: huanshi2 * @create: 2020-04-30 18:00 * @email: 1557679224@qq.com */public class ConnectEs &#123; public static void main(String[] args) &#123; try &#123; // 设置集群名称elasticsearch-cluster,Settings设置es的集群名称,使用的设计模式，链式设计模式、build设计模式。 Settings settings = Settings.builder().put(&quot;cluster.name&quot;, &quot;elasticsearch-cluster&quot;).build(); // 读取es集群中的数据,创建client。 @SuppressWarnings(&quot;resource&quot;) TransportClient client = new PreBuiltTransportClient(settings).addTransportAddresses( new TransportAddress(InetAddress.getByName(&quot;localhost&quot;), 9300)); // 搜索数据(.actionGet()方法是同步的，没有返回就等待) // 方式是先去索引里面查询出索引数据,再去文档里面查询出数据。 GetResponse response = client.prepareGet(&quot;emr&quot;, &quot;patient&quot;, &quot;1&quot;).execute().actionGet(); // 输出结果 System.out.println(response); // 关闭client client.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 输出结果 3.1 向elasticsearch中添加索引1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package es;import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;import org.elasticsearch.client.AdminClient;import org.elasticsearch.client.IndicesAdminClient;import org.elasticsearch.client.transport.TransportClient;import org.elasticsearch.common.settings.Settings;import org.elasticsearch.common.transport.TransportAddress;import org.elasticsearch.common.xcontent.XContentBuilder;import org.elasticsearch.common.xcontent.XContentFactory;import org.elasticsearch.transport.client.PreBuiltTransportClient;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.net.InetAddress;import java.util.HashMap;/** * @program: EHRelasticsearch * @description: 向elasticsearch中添加数据 * @author: huanshi2 * @create: 2020-05-03 16:51 * @email: 1557679224@qq.com */public class AdateEs &#123; private TransportClient client = null; // 在所有的测试方法之前执行连接elasticsearch操作 @SuppressWarnings(&quot;resource&quot;) @Before public void init() throws Exception &#123; // 设置集群名称 elasticsearch-cluster Settings settings = Settings.builder().put(&quot;cluster.name&quot;, &quot;elasticsearch-cluster&quot;) // 自动嗅探整个集群的状态，把集群中其他ES节点的ip添加到本地的客户端列表中 .put(&quot;client.transport.sniff&quot;, true).build(); // 创建client client = new PreBuiltTransportClient(settings).addTransportAddresses( // 建议指定2个及其以上的节点。 //节点个数由你安装的节点决定 new TransportAddress(InetAddress.getByName(&quot;localhost&quot;), 9300)); &#125; /* * @Author huanshi2 * @Description //测试向es中添加数据 * @Date 2020/5/3 16:55 * @email 1557679224@qq.com **/ @Test public void createIndexWithSettings() &#123; AdminClient admin = client.admin(); // 使用Admin API对索引进行操作 IndicesAdminClient indices = admin.indices(); // 准备创建索引 indices.prepareCreate(&quot;player&quot;) // 配置索引参数 .setSettings( // 参数配置器 Settings.builder()// 指定索引分区的数量。shards分区， .put(&quot;index.number_of_shards&quot;, 1) // 指定索引副本的数量(注意：不包括本身,如果设置数据存储副本为1,实际上数据存储了2份) // 由于本机只用了单节点，这里replicas设置为0，不保存副本 .put(&quot;index.number_of_replicas&quot;, 0)) // 真正执行 .get(); &#125;&#125; 测试成功： 添加成功后，可以使用elasticsearch-head插件查看结果可以看到我们的player索引创建成功。 3.2 为索引添加Mapping和field参考https://blog.csdn.net/sinat_35930259/article/details/80354732mapping是类似于数据库中的表结构定义，主要作用如下： 定义index下的字段名 定义字段类型，比如数值型、浮点型、布尔型等 定义倒排索引相关的设置，比如是否索引、记录position等 自定义mapping的API 查看已有的index的mapping设定索引player的·mapping ，把下面的代码加入到上面的java文件 1234567891011121314151617181920212223242526272829@Test public void elasticsearchSettingsPlayerMappings() throws IOException &#123; XContentBuilder builder = XContentFactory.jsonBuilder().startObject() .field(&quot;dynamic&quot;, &quot;true&quot;) .startObject(&quot;properties&quot;) // 在文档中存储、 .startObject(&quot;id&quot;).field(&quot;type&quot;, &quot;integer&quot;).field(&quot;store&quot;, &quot;true&quot;).endObject() // 不分词,不建索引、 .startObject(&quot;name&quot;).field(&quot;type&quot;, &quot;text&quot;).field(&quot;index&quot;, &quot;false&quot;).endObject() // .startObject(&quot;age&quot;).field(&quot;type&quot;, &quot;integer&quot;).endObject() // .startObject(&quot;salary&quot;).field(&quot;type&quot;, &quot;integer&quot;).endObject() // 不分词,不建建索引、 .startObject(&quot;team&quot;).field(&quot;type&quot;, &quot;text&quot;).field(&quot;index&quot;, &quot;false&quot;).endObject() // 不分词,但是建索引、 .startObject(&quot;position&quot;).field(&quot;type&quot;, &quot;text&quot;).field(&quot;index&quot;, &quot;true&quot;).endObject() // 即分词,又建立索引、 .startObject(&quot;description&quot;).field(&quot;type&quot;, &quot;text&quot;).field(&quot;store&quot;, &quot;false&quot;).field(&quot;index&quot;, &quot;true&quot;) .field(&quot;analyzer&quot;, &quot;ik_smart&quot;).endObject() // 即分词,又建立索引、在文档中存储、 .startObject(&quot;addr&quot;).field(&quot;type&quot;, &quot;text&quot;).field(&quot;store&quot;, &quot;true&quot;).field(&quot;index&quot;, &quot;true&quot;) .field(&quot;analyzer&quot;, &quot;ik_smart&quot;).endObject() .endObject() .endObject(); CreateIndexRequestBuilder prepareCreate = client.admin().indices().prepareCreate(&quot;player&quot;); prepareCreate.addMapping(&quot;basketball&quot;, builder).get(); &#125; mapping设定注意事项： mapping中的字段类型一旦设置，禁止直接修改，因为 lucene实现的倒排索引生成后不允许修改，应该重新建立新的索引，然后做reindex操作。 但是可以新增字段，通过 dynamic 参数来控制字段的新增，这个参数的值如下： true：默认值，表示允许选自动新增字段 false：不允许自动新增字段，但是文档可以正常写入，但无法对字段进行查询等操作 strict：严格模式，文档不能写入，报错 elasticsearch5.x以后，stringtype变为了text 由于本机使用的单机单节点elasticsearch，所以每次添加索引时都需要指定分片和分副本数量 运行结果：查看mapping： 1234567891011121314151617181920&#123; &quot;player&quot;: &#123; &quot;mappings&quot;: &#123; &quot;basketball&quot;: &#123; &quot;dynamic&quot;: &quot;true&quot;, &quot;properties&quot;: &#123; &quot;addr&quot;: &#123; &quot;type&quot;: &quot;text&quot;,&quot;store&quot;: true,&quot;analyzer&quot;: &quot;ik_smart&quot;&#125;, &quot;age&quot;: &#123; &quot;type&quot;: &quot;integer&quot;&#125;, &quot;description&quot;: &#123; &quot;type&quot;: &quot;text&quot;,&quot;analyzer&quot;: &quot;ik_smart&quot;&#125;, &quot;id&quot;: &#123; &quot;type&quot;: &quot;integer&quot;,&quot;store&quot;: true&#125;, &quot;name&quot;: &#123; &quot;type&quot;: &quot;text&quot;,&quot;index&quot;: false&#125;, &quot;position&quot;: &#123; &quot;type&quot;: &quot;text&quot;&#125;, &quot;salary&quot;: &#123; &quot;type&quot;: &quot;integer&quot;&#125;, &quot;team&quot;: &#123; &quot;type&quot;: &quot;text&quot;,&quot;index&quot;: false&#125; &#125; &#125; &#125; &#125;&#125; 自定义mapping成功！ 3.3 创建一个索引并添加数据12345678910111213141516171819@Test public void elasticsearchCreate() throws IOException &#123; HashMap&lt;String, Object&gt; settings_map = new HashMap&lt;&gt;(2); // shards分区的数量1 settings_map.put(&quot;number_of_shards&quot;, 1); // 副本的数量0 settings_map.put(&quot;number_of_replicas&quot;, 0); CreateIndexRequestBuilder prepareCreate = client.admin().indices().prepareCreate(&quot;student&quot;); prepareCreate.setSettings(settings_map).get(); IndexResponse response = client.prepareIndex(&quot;student&quot;, &quot;classone&quot;, &quot;1&quot;) .setSource(jsonBuilder().startObject().field(&quot;name&quot;, &quot;zhangsan&quot;).field(&quot;sex&quot;, &quot;man&quot;) .field(&quot;birthday&quot;, new Date()).field(&quot;age&quot;, 21).field(&quot;message&quot;, &quot;using java to control Elasticsearch&quot;) .endObject()) .get(); System.out.println(response.toString()); &#125; 添加成功浏览数据：添加成功!再使用java查看刚才插入的数据插入成功。 向指定索引指定Type的id的信息添加信息 12345678910111213141516171819@Test public void elasticsearchAddPlayer() throws IOException &#123; /* * @description: 向指定索引指定Type的id的信息添加信息 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 14:43 */ IndexResponse response = client.prepareIndex(&quot;student&quot;, &quot;classone&quot;, &quot;9&quot;) .setSource(jsonBuilder().startObject() .field(&quot;name&quot;, &quot;安其拉&quot;) .field(&quot;birthday&quot;, new Date()) .field(&quot;age&quot;, 28) .field(&quot;message&quot;, &quot;唱跳rap&quot;) .endObject()) .get(); System.out.println(response); &#125; 成功 插入多条数据并遍历打印： 123456789101112131415161718192021222324252627@Test public void elasticsearchMultiGet() throws IOException &#123; IndexResponse response1 = client.prepareIndex(&quot;student&quot;, &quot;classone&quot;, &quot;2&quot;) .setSource(jsonBuilder().startObject().field(&quot;name&quot;, &quot;lisi&quot;).field(&quot;sex&quot;, &quot;man&quot;) .field(&quot;birthday&quot;, new Date()).field(&quot;age&quot;, 22).field(&quot;message&quot;, &quot;using java to control Elasticsearch&quot;) .endObject()) .get(); IndexResponse response2 = client.prepareIndex(&quot;student&quot;, &quot;classone&quot;, &quot;3&quot;) .setSource(jsonBuilder().startObject().field(&quot;name&quot;, &quot;wangwu&quot;).field(&quot;sex&quot;, &quot;man&quot;) .field(&quot;birthday&quot;, new Date()).field(&quot;age&quot;, 23).field(&quot;message&quot;, &quot;using java to control Elasticsearch&quot;) .endObject()) .get(); //查找多个 MultiGetResponse multiGetItemResponses = client.prepareMultiGet().add(&quot;student&quot;, &quot;classone&quot;, &quot;1&quot;,&quot;2&quot;,&quot;3&quot;).get(); // 将查询出的结果遍历输出 for (MultiGetItemResponse itemResponse : multiGetItemResponses) &#123; // 将每一个查询出的结果遍历输出 GetResponse response = itemResponse.getResponse(); // 判断如果存在就进行遍历输出 if (response.isExists()) &#123; String json = response.getSourceAsString(); System.out.println(json); &#125; &#125; &#125; 测试结果： 3.4 删除已经插入的数据上代码：删除指定id的数据： 1234567891011121314@Test public void elasticsearchDelete() &#123; /* * @description: 删除指定id的数据 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 14:19 */ // 指定删除的id信息,并且给出响应结果 DeleteResponse response = client.prepareDelete(&quot;student&quot;, &quot;classone&quot;, &quot;5&quot;).get(); // 打印输出的响应信息 System.out.println(response); &#125; 根据查询条件进行删除数据：代码： 12345678910111213141516171819@Test public void elasticsearchDeleteByQuery() &#123; /* * @description: 根据查询条件进行删除数据 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 14:27 */ BulkByScrollResponse response = DeleteByQueryAction.INSTANCE.newRequestBuilder(client) // 指定查询条件,matchQuery是name的值text里面包括了这个内容就进行删除。默认使用标准分词器。 .filter(QueryBuilders.matchQuery(&quot;name&quot;, &quot;王八&quot;)) // 指定索引名称 .source(&quot;student&quot;).get(); // 获取到删除的个数 long deleted = response.getDeleted(); // 打印输出删除的个数 System.out.println(deleted); &#125; 删除成功 3.5 修改elasticsearch中已经存储的数据更新指定index指定type指定id的信息由于前面添加信息时忘记添加sex字段，这里直接修改为man 123456789101112131415161718192021222324@Test public void elasticsearchUpdate() throws Exception &#123; /* * @description: 更新指定index指定type指定id的信息 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 14:54 */ // 创建一个更新的请求对象 UpdateRequest updateRequest = new UpdateRequest(); // 指定索引Index updateRequest.index(&quot;student&quot;); // 指定类型Type updateRequest.type(&quot;classone&quot;); // 指定id的值 updateRequest.id(&quot;9&quot;); // 设置修改的字段信息 updateRequest.doc(jsonBuilder().startObject().field(&quot;name&quot;, &quot;吕布&quot;).field(&quot;sex&quot;,&quot;man&quot;).endObject()); // 开始进行修改，并且返回响应信息 UpdateResponse updateResponse = client.update(updateRequest).get(); // 打印输出响应的信息 System.out.println(updateResponse.toString()); &#125; 修改成功 3.6 查找数据根据id查找 12345@Test public void elasticsearchGet() throws IOException &#123; GetResponse response = client.prepareGet(&quot;class&quot;, &quot;classone&quot;, &quot;9&quot;).get(); System.out.println(response.getSourceAsString()); &#125; 根据指定index，指定type，指定id查找 注意：6.0的版本不允许一个index下面有多个type，在接下来的7.0版本中会删掉type https://www.cnblogs.com/yfb918/p/10690103.html 1234567891011121314151617181920212223@Test public void elasticsearchMultiGet() throws IOException &#123; /* * @description: 查询出多个索引Index多个类型Type的多个id的所有信息 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 15:07 */ MultiGetResponse multiGetItemResponses = client.prepareMultiGet().add(&quot;student&quot;, &quot;classone&quot;, &quot;10&quot;) .add(&quot;student&quot;, &quot;classone&quot;, &quot;2&quot;, &quot;3&quot;,&quot;9&quot;).add(&quot;teacher&quot;, &quot;classtwo&quot;, &quot;11&quot;).get(); // 将查询出的结果遍历输出 for (MultiGetItemResponse itemResponse : multiGetItemResponses) &#123; // 将每一个查询出的结果遍历输出 GetResponse response = itemResponse.getResponse(); // 判断如果存在就进行遍历输出 if (response.isExists()) &#123; String json = response.getSourceAsString(); System.out.println(json); &#125; &#125; &#125; 结果范围查找： 12345678910111213141516@Test public void elasticsearchRange() &#123; /* * @description: 范围查找 * @Param: [] * @Return: void * @Author: huanshi2 * @Date: 2020/5/4 15:29 */ // includeLower(true).includeUpper(false)含义是包含前面,不包含后面的 // [21, 24) QueryBuilder qb = rangeQuery(&quot;age&quot;).from(21).to(24).includeLower(true).includeUpper(false); // 将查询条件传递进去,并将查询结果进行返回。 SearchResponse response = client.prepareSearch(&quot;student&quot;).setQuery(qb).get(); System.out.println(response); &#125; 结果： github地址：https://github.com/huanshi2/EHRelasticsearch 代码查考了下列的博客文章： https://blog.csdn.net/Mr_OOO/article/details/79518978 https://www.cnblogs.com/biehongli/p/11710704.htmlhttps://www.cnblogs.com/chenyuanbo/p/10296809.htmlhttps://blog.csdn.net/fulishafulisha/article/details/80158392https://www.cnblogs.com/cjsblog/p/10035629.htmlhttps://www.cnblogs.com/yfb918/p/10690103.html","categories":[{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://233hsysweb.ml/tags/Elasticsearch/"}],"author":"huanshi2"}],"categories":[{"name":"C语言","slug":"C语言","permalink":"http://233hsysweb.ml/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"毕设","slug":"毕设","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/"},{"name":"搜索引擎","slug":"毕设/搜索引擎","permalink":"http://233hsysweb.ml/categories/%E6%AF%95%E8%AE%BE/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/categories/Hexo/"},{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Mysql","slug":"数据库/Mysql","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/"},{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/categories/Java/"},{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Small points","slug":"Small-points","permalink":"http://233hsysweb.ml/categories/Small-points/"},{"name":"多线程","slug":"Java/多线程","permalink":"http://233hsysweb.ml/categories/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"Jvm","slug":"Java/Jvm","permalink":"http://233hsysweb.ml/categories/Java/Jvm/"},{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/categories/Spring/"},{"name":"设计模式","slug":"设计模式","permalink":"http://233hsysweb.ml/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Maven","slug":"Maven","permalink":"http://233hsysweb.ml/categories/Maven/"},{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/categories/leetcode/"},{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/categories/%E7%AE%97%E6%B3%95/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/categories/Linux/"},{"name":"数据结构","slug":"Java/数据结构","permalink":"http://233hsysweb.ml/categories/Java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"Vscode","slug":"Vscode","permalink":"http://233hsysweb.ml/categories/Vscode/"},{"name":"面试","slug":"Java/面试","permalink":"http://233hsysweb.ml/categories/Java/%E9%9D%A2%E8%AF%95/"},{"name":"JVM","slug":"Java/JVM","permalink":"http://233hsysweb.ml/categories/Java/JVM/"},{"name":"泛型","slug":"Java/泛型","permalink":"http://233hsysweb.ml/categories/Java/%E6%B3%9B%E5%9E%8B/"},{"name":"面试","slug":"面试","permalink":"http://233hsysweb.ml/categories/%E9%9D%A2%E8%AF%95/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"Wsl2","slug":"Linux/Wsl2","permalink":"http://233hsysweb.ml/categories/Linux/Wsl2/"},{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"运算符","slug":"运算符","permalink":"http://233hsysweb.ml/categories/%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/categories/Mysql/"},{"name":"设计模式","slug":"Java/设计模式","permalink":"http://233hsysweb.ml/categories/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/categories/Python/"},{"name":"编程","slug":"编程","permalink":"http://233hsysweb.ml/categories/%E7%BC%96%E7%A8%8B/"},{"name":"位运算","slug":"位运算","permalink":"http://233hsysweb.ml/categories/%E4%BD%8D%E8%BF%90%E7%AE%97/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://233hsysweb.ml/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"C","slug":"C","permalink":"http://233hsysweb.ml/tags/C/"},{"name":"C++","slug":"C","permalink":"http://233hsysweb.ml/tags/C/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"http://233hsysweb.ml/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"Hexo","slug":"Hexo","permalink":"http://233hsysweb.ml/tags/Hexo/"},{"name":"数据库","slug":"数据库","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"索引","slug":"索引","permalink":"http://233hsysweb.ml/tags/%E7%B4%A2%E5%BC%95/"},{"name":"Java","slug":"Java","permalink":"http://233hsysweb.ml/tags/Java/"},{"name":"操作系统","slug":"操作系统","permalink":"http://233hsysweb.ml/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"IO","slug":"IO","permalink":"http://233hsysweb.ml/tags/IO/"},{"name":"points","slug":"points","permalink":"http://233hsysweb.ml/tags/points/"},{"name":"多线程","slug":"多线程","permalink":"http://233hsysweb.ml/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"Jvm","slug":"Jvm","permalink":"http://233hsysweb.ml/tags/Jvm/"},{"name":"Spring","slug":"Spring","permalink":"http://233hsysweb.ml/tags/Spring/"},{"name":"设计模式","slug":"设计模式","permalink":"http://233hsysweb.ml/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"Maven","slug":"Maven","permalink":"http://233hsysweb.ml/tags/Maven/"},{"name":"leetcode","slug":"leetcode","permalink":"http://233hsysweb.ml/tags/leetcode/"},{"name":"B+Tree","slug":"B-Tree","permalink":"http://233hsysweb.ml/tags/B-Tree/"},{"name":"Mysql","slug":"Mysql","permalink":"http://233hsysweb.ml/tags/Mysql/"},{"name":"滑动窗口","slug":"滑动窗口","permalink":"http://233hsysweb.ml/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"},{"name":"动态规划","slug":"动态规划","permalink":"http://233hsysweb.ml/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"TCP","slug":"TCP","permalink":"http://233hsysweb.ml/tags/TCP/"},{"name":"BFS","slug":"BFS","permalink":"http://233hsysweb.ml/tags/BFS/"},{"name":"DFS","slug":"DFS","permalink":"http://233hsysweb.ml/tags/DFS/"},{"name":"Linux","slug":"Linux","permalink":"http://233hsysweb.ml/tags/Linux/"},{"name":"进程","slug":"进程","permalink":"http://233hsysweb.ml/tags/%E8%BF%9B%E7%A8%8B/"},{"name":"线程池","slug":"线程池","permalink":"http://233hsysweb.ml/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"},{"name":"UDP","slug":"UDP","permalink":"http://233hsysweb.ml/tags/UDP/"},{"name":"线程","slug":"线程","permalink":"http://233hsysweb.ml/tags/%E7%BA%BF%E7%A8%8B/"},{"name":"HashMap","slug":"HashMap","permalink":"http://233hsysweb.ml/tags/HashMap/"},{"name":"HashSet","slug":"HashSet","permalink":"http://233hsysweb.ml/tags/HashSet/"},{"name":"Hashtable","slug":"Hashtable","permalink":"http://233hsysweb.ml/tags/Hashtable/"},{"name":"List","slug":"List","permalink":"http://233hsysweb.ml/tags/List/"},{"name":"Map","slug":"Map","permalink":"http://233hsysweb.ml/tags/Map/"},{"name":"Set","slug":"Set","permalink":"http://233hsysweb.ml/tags/Set/"},{"name":"DNS","slug":"DNS","permalink":"http://233hsysweb.ml/tags/DNS/"},{"name":"深拷贝","slug":"深拷贝","permalink":"http://233hsysweb.ml/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"},{"name":"浅拷贝","slug":"浅拷贝","permalink":"http://233hsysweb.ml/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"},{"name":"JVM","slug":"JVM","permalink":"http://233hsysweb.ml/tags/JVM/"},{"name":"死锁","slug":"死锁","permalink":"http://233hsysweb.ml/tags/%E6%AD%BB%E9%94%81/"},{"name":"递归","slug":"递归","permalink":"http://233hsysweb.ml/tags/%E9%80%92%E5%BD%92/"},{"name":"二叉树","slug":"二叉树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"String","slug":"String","permalink":"http://233hsysweb.ml/tags/String/"},{"name":"StringBuffer","slug":"StringBuffer","permalink":"http://233hsysweb.ml/tags/StringBuffer/"},{"name":"StringBuilder","slug":"StringBuilder","permalink":"http://233hsysweb.ml/tags/StringBuilder/"},{"name":"优先队列","slug":"优先队列","permalink":"http://233hsysweb.ml/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"},{"name":"堆","slug":"堆","permalink":"http://233hsysweb.ml/tags/%E5%A0%86/"},{"name":"二分查找","slug":"二分查找","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"泛型","slug":"泛型","permalink":"http://233hsysweb.ml/tags/%E6%B3%9B%E5%9E%8B/"},{"name":"二叉搜索树","slug":"二叉搜索树","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"Error","slug":"Error","permalink":"http://233hsysweb.ml/tags/Error/"},{"name":"Git","slug":"Git","permalink":"http://233hsysweb.ml/tags/Git/"},{"name":"接口","slug":"接口","permalink":"http://233hsysweb.ml/tags/%E6%8E%A5%E5%8F%A3/"},{"name":"算法","slug":"算法","permalink":"http://233hsysweb.ml/tags/%E7%AE%97%E6%B3%95/"},{"name":"加密算法","slug":"加密算法","permalink":"http://233hsysweb.ml/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"jdbc","slug":"jdbc","permalink":"http://233hsysweb.ml/tags/jdbc/"},{"name":"wsl2","slug":"wsl2","permalink":"http://233hsysweb.ml/tags/wsl2/"},{"name":"集合","slug":"集合","permalink":"http://233hsysweb.ml/tags/%E9%9B%86%E5%90%88/"},{"name":"Vector","slug":"Vector","permalink":"http://233hsysweb.ml/tags/Vector/"},{"name":"LinkedList","slug":"LinkedList","permalink":"http://233hsysweb.ml/tags/LinkedList/"},{"name":"ArrayList","slug":"ArrayList","permalink":"http://233hsysweb.ml/tags/ArrayList/"},{"name":"Synchronized","slug":"Synchronized","permalink":"http://233hsysweb.ml/tags/Synchronized/"},{"name":"Volatile","slug":"Volatile","permalink":"http://233hsysweb.ml/tags/Volatile/"},{"name":"二进制","slug":"二进制","permalink":"http://233hsysweb.ml/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"运算符","slug":"运算符","permalink":"http://233hsysweb.ml/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"hashcode","slug":"hashcode","permalink":"http://233hsysweb.ml/tags/hashcode/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://233hsysweb.ml/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"Http","slug":"Http","permalink":"http://233hsysweb.ml/tags/Http/"},{"name":"OSI","slug":"OSI","permalink":"http://233hsysweb.ml/tags/OSI/"},{"name":"面向对象","slug":"面向对象","permalink":"http://233hsysweb.ml/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"},{"name":"内存分配","slug":"内存分配","permalink":"http://233hsysweb.ml/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"},{"name":"动态代理","slug":"动态代理","permalink":"http://233hsysweb.ml/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"name":"vector","slug":"vector","permalink":"http://233hsysweb.ml/tags/vector/"},{"name":"数据结构","slug":"数据结构","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"排序","slug":"排序","permalink":"http://233hsysweb.ml/tags/%E6%8E%92%E5%BA%8F/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://233hsysweb.ml/tags/Elasticsearch/"},{"name":"Python","slug":"Python","permalink":"http://233hsysweb.ml/tags/Python/"},{"name":"java","slug":"java","permalink":"http://233hsysweb.ml/tags/java/"},{"name":"缓存","slug":"缓存","permalink":"http://233hsysweb.ml/tags/%E7%BC%93%E5%AD%98/"},{"name":"测试","slug":"测试","permalink":"http://233hsysweb.ml/tags/%E6%B5%8B%E8%AF%95/"},{"name":"junit","slug":"junit","permalink":"http://233hsysweb.ml/tags/junit/"},{"name":"LinkedHashMap","slug":"LinkedHashMap","permalink":"http://233hsysweb.ml/tags/LinkedHashMap/"},{"name":"nlp","slug":"nlp","permalink":"http://233hsysweb.ml/tags/nlp/"},{"name":"数据标注","slug":"数据标注","permalink":"http://233hsysweb.ml/tags/%E6%95%B0%E6%8D%AE%E6%A0%87%E6%B3%A8/"},{"name":"知识图谱","slug":"知识图谱","permalink":"http://233hsysweb.ml/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"GBK编码","slug":"GBK编码","permalink":"http://233hsysweb.ml/tags/GBK%E7%BC%96%E7%A0%81/"},{"name":"json","slug":"json","permalink":"http://233hsysweb.ml/tags/json/"},{"name":"python","slug":"python","permalink":"http://233hsysweb.ml/tags/python/"},{"name":"实体关系","slug":"实体关系","permalink":"http://233hsysweb.ml/tags/%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB/"},{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://233hsysweb.ml/tags/elasticsearch/"}]}